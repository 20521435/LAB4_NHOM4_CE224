
LAB4_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f674  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001bec  0800f824  0800f824  0001f824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011410  08011410  000301e0  2**0
                  CONTENTS
  4 .ARM          00000008  08011410  08011410  00021410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011418  08011418  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011418  08011418  00021418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801141c  0801141c  0002141c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08011420  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301e0  2**0
                  CONTENTS
 10 .bss          00005d34  200001e0  200001e0  000301e0  2**2
                  ALLOC
 11 ._user_heap_stack 00002404  20005f14  20005f14  000301e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00027adc  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005f0e  00000000  00000000  00057cec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002240  00000000  00000000  0005dc00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001f88  00000000  00000000  0005fe40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c219  00000000  00000000  00061dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002b2f1  00000000  00000000  0008dfe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f449e  00000000  00000000  000b92d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001ad770  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009368  00000000  00000000  001ad7c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800f80c 	.word	0x0800f80c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	0800f80c 	.word	0x0800f80c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_dmul>:
 80002a0:	b570      	push	{r4, r5, r6, lr}
 80002a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ae:	bf1d      	ittte	ne
 80002b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002b4:	ea94 0f0c 	teqne	r4, ip
 80002b8:	ea95 0f0c 	teqne	r5, ip
 80002bc:	f000 f8de 	bleq	800047c <__aeabi_dmul+0x1dc>
 80002c0:	442c      	add	r4, r5
 80002c2:	ea81 0603 	eor.w	r6, r1, r3
 80002c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002d2:	bf18      	it	ne
 80002d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002e0:	d038      	beq.n	8000354 <__aeabi_dmul+0xb4>
 80002e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002e6:	f04f 0500 	mov.w	r5, #0
 80002ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002f6:	f04f 0600 	mov.w	r6, #0
 80002fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002fe:	f09c 0f00 	teq	ip, #0
 8000302:	bf18      	it	ne
 8000304:	f04e 0e01 	orrne.w	lr, lr, #1
 8000308:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800030c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000310:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000314:	d204      	bcs.n	8000320 <__aeabi_dmul+0x80>
 8000316:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800031a:	416d      	adcs	r5, r5
 800031c:	eb46 0606 	adc.w	r6, r6, r6
 8000320:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000324:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000328:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800032c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000330:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000334:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000338:	bf88      	it	hi
 800033a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800033e:	d81e      	bhi.n	800037e <__aeabi_dmul+0xde>
 8000340:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000358:	ea46 0101 	orr.w	r1, r6, r1
 800035c:	ea40 0002 	orr.w	r0, r0, r2
 8000360:	ea81 0103 	eor.w	r1, r1, r3
 8000364:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000368:	bfc2      	ittt	gt
 800036a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800036e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000372:	bd70      	popgt	{r4, r5, r6, pc}
 8000374:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000378:	f04f 0e00 	mov.w	lr, #0
 800037c:	3c01      	subs	r4, #1
 800037e:	f300 80ab 	bgt.w	80004d8 <__aeabi_dmul+0x238>
 8000382:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000386:	bfde      	ittt	le
 8000388:	2000      	movle	r0, #0
 800038a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800038e:	bd70      	pople	{r4, r5, r6, pc}
 8000390:	f1c4 0400 	rsb	r4, r4, #0
 8000394:	3c20      	subs	r4, #32
 8000396:	da35      	bge.n	8000404 <__aeabi_dmul+0x164>
 8000398:	340c      	adds	r4, #12
 800039a:	dc1b      	bgt.n	80003d4 <__aeabi_dmul+0x134>
 800039c:	f104 0414 	add.w	r4, r4, #20
 80003a0:	f1c4 0520 	rsb	r5, r4, #32
 80003a4:	fa00 f305 	lsl.w	r3, r0, r5
 80003a8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ac:	fa01 f205 	lsl.w	r2, r1, r5
 80003b0:	ea40 0002 	orr.w	r0, r0, r2
 80003b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c0:	fa21 f604 	lsr.w	r6, r1, r4
 80003c4:	eb42 0106 	adc.w	r1, r2, r6
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 040c 	rsb	r4, r4, #12
 80003d8:	f1c4 0520 	rsb	r5, r4, #32
 80003dc:	fa00 f304 	lsl.w	r3, r0, r4
 80003e0:	fa20 f005 	lsr.w	r0, r0, r5
 80003e4:	fa01 f204 	lsl.w	r2, r1, r4
 80003e8:	ea40 0002 	orr.w	r0, r0, r2
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003f4:	f141 0100 	adc.w	r1, r1, #0
 80003f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003fc:	bf08      	it	eq
 80003fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000402:	bd70      	pop	{r4, r5, r6, pc}
 8000404:	f1c4 0520 	rsb	r5, r4, #32
 8000408:	fa00 f205 	lsl.w	r2, r0, r5
 800040c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000410:	fa20 f304 	lsr.w	r3, r0, r4
 8000414:	fa01 f205 	lsl.w	r2, r1, r5
 8000418:	ea43 0302 	orr.w	r3, r3, r2
 800041c:	fa21 f004 	lsr.w	r0, r1, r4
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	fa21 f204 	lsr.w	r2, r1, r4
 8000428:	ea20 0002 	bic.w	r0, r0, r2
 800042c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000430:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000434:	bf08      	it	eq
 8000436:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800043a:	bd70      	pop	{r4, r5, r6, pc}
 800043c:	f094 0f00 	teq	r4, #0
 8000440:	d10f      	bne.n	8000462 <__aeabi_dmul+0x1c2>
 8000442:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000446:	0040      	lsls	r0, r0, #1
 8000448:	eb41 0101 	adc.w	r1, r1, r1
 800044c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3c01      	subeq	r4, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1a6>
 8000456:	ea41 0106 	orr.w	r1, r1, r6
 800045a:	f095 0f00 	teq	r5, #0
 800045e:	bf18      	it	ne
 8000460:	4770      	bxne	lr
 8000462:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000466:	0052      	lsls	r2, r2, #1
 8000468:	eb43 0303 	adc.w	r3, r3, r3
 800046c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3d01      	subeq	r5, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1c6>
 8000476:	ea43 0306 	orr.w	r3, r3, r6
 800047a:	4770      	bx	lr
 800047c:	ea94 0f0c 	teq	r4, ip
 8000480:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000484:	bf18      	it	ne
 8000486:	ea95 0f0c 	teqne	r5, ip
 800048a:	d00c      	beq.n	80004a6 <__aeabi_dmul+0x206>
 800048c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000490:	bf18      	it	ne
 8000492:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000496:	d1d1      	bne.n	800043c <__aeabi_dmul+0x19c>
 8000498:	ea81 0103 	eor.w	r1, r1, r3
 800049c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd70      	pop	{r4, r5, r6, pc}
 80004a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004aa:	bf06      	itte	eq
 80004ac:	4610      	moveq	r0, r2
 80004ae:	4619      	moveq	r1, r3
 80004b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b4:	d019      	beq.n	80004ea <__aeabi_dmul+0x24a>
 80004b6:	ea94 0f0c 	teq	r4, ip
 80004ba:	d102      	bne.n	80004c2 <__aeabi_dmul+0x222>
 80004bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004c0:	d113      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004c2:	ea95 0f0c 	teq	r5, ip
 80004c6:	d105      	bne.n	80004d4 <__aeabi_dmul+0x234>
 80004c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004cc:	bf1c      	itt	ne
 80004ce:	4610      	movne	r0, r2
 80004d0:	4619      	movne	r1, r3
 80004d2:	d10a      	bne.n	80004ea <__aeabi_dmul+0x24a>
 80004d4:	ea81 0103 	eor.w	r1, r1, r3
 80004d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd70      	pop	{r4, r5, r6, pc}
 80004ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004f2:	bd70      	pop	{r4, r5, r6, pc}

080004f4 <__aeabi_drsub>:
 80004f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e002      	b.n	8000500 <__adddf3>
 80004fa:	bf00      	nop

080004fc <__aeabi_dsub>:
 80004fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000500 <__adddf3>:
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000506:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800050a:	ea94 0f05 	teq	r4, r5
 800050e:	bf08      	it	eq
 8000510:	ea90 0f02 	teqeq	r0, r2
 8000514:	bf1f      	itttt	ne
 8000516:	ea54 0c00 	orrsne.w	ip, r4, r0
 800051a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800051e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000522:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000526:	f000 80e2 	beq.w	80006ee <__adddf3+0x1ee>
 800052a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800052e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000532:	bfb8      	it	lt
 8000534:	426d      	neglt	r5, r5
 8000536:	dd0c      	ble.n	8000552 <__adddf3+0x52>
 8000538:	442c      	add	r4, r5
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	ea82 0000 	eor.w	r0, r2, r0
 8000546:	ea83 0101 	eor.w	r1, r3, r1
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	2d36      	cmp	r5, #54	; 0x36
 8000554:	bf88      	it	hi
 8000556:	bd30      	pophi	{r4, r5, pc}
 8000558:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800055c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000560:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000564:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000568:	d002      	beq.n	8000570 <__adddf3+0x70>
 800056a:	4240      	negs	r0, r0
 800056c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000570:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000574:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000578:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800057c:	d002      	beq.n	8000584 <__adddf3+0x84>
 800057e:	4252      	negs	r2, r2
 8000580:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000584:	ea94 0f05 	teq	r4, r5
 8000588:	f000 80a7 	beq.w	80006da <__adddf3+0x1da>
 800058c:	f1a4 0401 	sub.w	r4, r4, #1
 8000590:	f1d5 0e20 	rsbs	lr, r5, #32
 8000594:	db0d      	blt.n	80005b2 <__adddf3+0xb2>
 8000596:	fa02 fc0e 	lsl.w	ip, r2, lr
 800059a:	fa22 f205 	lsr.w	r2, r2, r5
 800059e:	1880      	adds	r0, r0, r2
 80005a0:	f141 0100 	adc.w	r1, r1, #0
 80005a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005a8:	1880      	adds	r0, r0, r2
 80005aa:	fa43 f305 	asr.w	r3, r3, r5
 80005ae:	4159      	adcs	r1, r3
 80005b0:	e00e      	b.n	80005d0 <__adddf3+0xd0>
 80005b2:	f1a5 0520 	sub.w	r5, r5, #32
 80005b6:	f10e 0e20 	add.w	lr, lr, #32
 80005ba:	2a01      	cmp	r2, #1
 80005bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005c0:	bf28      	it	cs
 80005c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005c6:	fa43 f305 	asr.w	r3, r3, r5
 80005ca:	18c0      	adds	r0, r0, r3
 80005cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	d507      	bpl.n	80005e6 <__adddf3+0xe6>
 80005d6:	f04f 0e00 	mov.w	lr, #0
 80005da:	f1dc 0c00 	rsbs	ip, ip, #0
 80005de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ea:	d31b      	bcc.n	8000624 <__adddf3+0x124>
 80005ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005f0:	d30c      	bcc.n	800060c <__adddf3+0x10c>
 80005f2:	0849      	lsrs	r1, r1, #1
 80005f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005fc:	f104 0401 	add.w	r4, r4, #1
 8000600:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000604:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000608:	f080 809a 	bcs.w	8000740 <__adddf3+0x240>
 800060c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000610:	bf08      	it	eq
 8000612:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000616:	f150 0000 	adcs.w	r0, r0, #0
 800061a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061e:	ea41 0105 	orr.w	r1, r1, r5
 8000622:	bd30      	pop	{r4, r5, pc}
 8000624:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000628:	4140      	adcs	r0, r0
 800062a:	eb41 0101 	adc.w	r1, r1, r1
 800062e:	3c01      	subs	r4, #1
 8000630:	bf28      	it	cs
 8000632:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000636:	d2e9      	bcs.n	800060c <__adddf3+0x10c>
 8000638:	f091 0f00 	teq	r1, #0
 800063c:	bf04      	itt	eq
 800063e:	4601      	moveq	r1, r0
 8000640:	2000      	moveq	r0, #0
 8000642:	fab1 f381 	clz	r3, r1
 8000646:	bf08      	it	eq
 8000648:	3320      	addeq	r3, #32
 800064a:	f1a3 030b 	sub.w	r3, r3, #11
 800064e:	f1b3 0220 	subs.w	r2, r3, #32
 8000652:	da0c      	bge.n	800066e <__adddf3+0x16e>
 8000654:	320c      	adds	r2, #12
 8000656:	dd08      	ble.n	800066a <__adddf3+0x16a>
 8000658:	f102 0c14 	add.w	ip, r2, #20
 800065c:	f1c2 020c 	rsb	r2, r2, #12
 8000660:	fa01 f00c 	lsl.w	r0, r1, ip
 8000664:	fa21 f102 	lsr.w	r1, r1, r2
 8000668:	e00c      	b.n	8000684 <__adddf3+0x184>
 800066a:	f102 0214 	add.w	r2, r2, #20
 800066e:	bfd8      	it	le
 8000670:	f1c2 0c20 	rsble	ip, r2, #32
 8000674:	fa01 f102 	lsl.w	r1, r1, r2
 8000678:	fa20 fc0c 	lsr.w	ip, r0, ip
 800067c:	bfdc      	itt	le
 800067e:	ea41 010c 	orrle.w	r1, r1, ip
 8000682:	4090      	lslle	r0, r2
 8000684:	1ae4      	subs	r4, r4, r3
 8000686:	bfa2      	ittt	ge
 8000688:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800068c:	4329      	orrge	r1, r5
 800068e:	bd30      	popge	{r4, r5, pc}
 8000690:	ea6f 0404 	mvn.w	r4, r4
 8000694:	3c1f      	subs	r4, #31
 8000696:	da1c      	bge.n	80006d2 <__adddf3+0x1d2>
 8000698:	340c      	adds	r4, #12
 800069a:	dc0e      	bgt.n	80006ba <__adddf3+0x1ba>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0220 	rsb	r2, r4, #32
 80006a4:	fa20 f004 	lsr.w	r0, r0, r4
 80006a8:	fa01 f302 	lsl.w	r3, r1, r2
 80006ac:	ea40 0003 	orr.w	r0, r0, r3
 80006b0:	fa21 f304 	lsr.w	r3, r1, r4
 80006b4:	ea45 0103 	orr.w	r1, r5, r3
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f1c4 040c 	rsb	r4, r4, #12
 80006be:	f1c4 0220 	rsb	r2, r4, #32
 80006c2:	fa20 f002 	lsr.w	r0, r0, r2
 80006c6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ca:	ea40 0003 	orr.w	r0, r0, r3
 80006ce:	4629      	mov	r1, r5
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	fa21 f004 	lsr.w	r0, r1, r4
 80006d6:	4629      	mov	r1, r5
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f094 0f00 	teq	r4, #0
 80006de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006e2:	bf06      	itte	eq
 80006e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006e8:	3401      	addeq	r4, #1
 80006ea:	3d01      	subne	r5, #1
 80006ec:	e74e      	b.n	800058c <__adddf3+0x8c>
 80006ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006f2:	bf18      	it	ne
 80006f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006f8:	d029      	beq.n	800074e <__adddf3+0x24e>
 80006fa:	ea94 0f05 	teq	r4, r5
 80006fe:	bf08      	it	eq
 8000700:	ea90 0f02 	teqeq	r0, r2
 8000704:	d005      	beq.n	8000712 <__adddf3+0x212>
 8000706:	ea54 0c00 	orrs.w	ip, r4, r0
 800070a:	bf04      	itt	eq
 800070c:	4619      	moveq	r1, r3
 800070e:	4610      	moveq	r0, r2
 8000710:	bd30      	pop	{r4, r5, pc}
 8000712:	ea91 0f03 	teq	r1, r3
 8000716:	bf1e      	ittt	ne
 8000718:	2100      	movne	r1, #0
 800071a:	2000      	movne	r0, #0
 800071c:	bd30      	popne	{r4, r5, pc}
 800071e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000722:	d105      	bne.n	8000730 <__adddf3+0x230>
 8000724:	0040      	lsls	r0, r0, #1
 8000726:	4149      	adcs	r1, r1
 8000728:	bf28      	it	cs
 800072a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd30      	pop	{r4, r5, pc}
 8000730:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000734:	bf3c      	itt	cc
 8000736:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800073a:	bd30      	popcc	{r4, r5, pc}
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000744:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd30      	pop	{r4, r5, pc}
 800074e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000752:	bf1a      	itte	ne
 8000754:	4619      	movne	r1, r3
 8000756:	4610      	movne	r0, r2
 8000758:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800075c:	bf1c      	itt	ne
 800075e:	460b      	movne	r3, r1
 8000760:	4602      	movne	r2, r0
 8000762:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000766:	bf06      	itte	eq
 8000768:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800076c:	ea91 0f03 	teqeq	r1, r3
 8000770:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000774:	bd30      	pop	{r4, r5, pc}
 8000776:	bf00      	nop

08000778 <__aeabi_ui2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f04f 0500 	mov.w	r5, #0
 8000790:	f04f 0100 	mov.w	r1, #0
 8000794:	e750      	b.n	8000638 <__adddf3+0x138>
 8000796:	bf00      	nop

08000798 <__aeabi_i2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007b0:	bf48      	it	mi
 80007b2:	4240      	negmi	r0, r0
 80007b4:	f04f 0100 	mov.w	r1, #0
 80007b8:	e73e      	b.n	8000638 <__adddf3+0x138>
 80007ba:	bf00      	nop

080007bc <__aeabi_f2d>:
 80007bc:	0042      	lsls	r2, r0, #1
 80007be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ca:	bf1f      	itttt	ne
 80007cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007d8:	4770      	bxne	lr
 80007da:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007de:	bf08      	it	eq
 80007e0:	4770      	bxeq	lr
 80007e2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007e6:	bf04      	itt	eq
 80007e8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007ec:	4770      	bxeq	lr
 80007ee:	b530      	push	{r4, r5, lr}
 80007f0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007fc:	e71c      	b.n	8000638 <__adddf3+0x138>
 80007fe:	bf00      	nop

08000800 <__aeabi_ul2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f04f 0500 	mov.w	r5, #0
 800080e:	e00a      	b.n	8000826 <__aeabi_l2d+0x16>

08000810 <__aeabi_l2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800081e:	d502      	bpl.n	8000826 <__aeabi_l2d+0x16>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800082a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800082e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000832:	f43f aed8 	beq.w	80005e6 <__adddf3+0xe6>
 8000836:	f04f 0203 	mov.w	r2, #3
 800083a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800083e:	bf18      	it	ne
 8000840:	3203      	addne	r2, #3
 8000842:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000846:	bf18      	it	ne
 8000848:	3203      	addne	r2, #3
 800084a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800084e:	f1c2 0320 	rsb	r3, r2, #32
 8000852:	fa00 fc03 	lsl.w	ip, r0, r3
 8000856:	fa20 f002 	lsr.w	r0, r0, r2
 800085a:	fa01 fe03 	lsl.w	lr, r1, r3
 800085e:	ea40 000e 	orr.w	r0, r0, lr
 8000862:	fa21 f102 	lsr.w	r1, r1, r2
 8000866:	4414      	add	r4, r2
 8000868:	e6bd      	b.n	80005e6 <__adddf3+0xe6>
 800086a:	bf00      	nop

0800086c <__aeabi_d2f>:
 800086c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000870:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000874:	bf24      	itt	cs
 8000876:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800087a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800087e:	d90d      	bls.n	800089c <__aeabi_d2f+0x30>
 8000880:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000884:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000888:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800088c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000890:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000894:	bf08      	it	eq
 8000896:	f020 0001 	biceq.w	r0, r0, #1
 800089a:	4770      	bx	lr
 800089c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80008a0:	d121      	bne.n	80008e6 <__aeabi_d2f+0x7a>
 80008a2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80008a6:	bfbc      	itt	lt
 80008a8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80008ac:	4770      	bxlt	lr
 80008ae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008b6:	f1c2 0218 	rsb	r2, r2, #24
 80008ba:	f1c2 0c20 	rsb	ip, r2, #32
 80008be:	fa10 f30c 	lsls.w	r3, r0, ip
 80008c2:	fa20 f002 	lsr.w	r0, r0, r2
 80008c6:	bf18      	it	ne
 80008c8:	f040 0001 	orrne.w	r0, r0, #1
 80008cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008d8:	ea40 000c 	orr.w	r0, r0, ip
 80008dc:	fa23 f302 	lsr.w	r3, r3, r2
 80008e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008e4:	e7cc      	b.n	8000880 <__aeabi_d2f+0x14>
 80008e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ea:	d107      	bne.n	80008fc <__aeabi_d2f+0x90>
 80008ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008f0:	bf1e      	ittt	ne
 80008f2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008f6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008fa:	4770      	bxne	lr
 80008fc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000900:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000904:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop

0800090c <__aeabi_uldivmod>:
 800090c:	b953      	cbnz	r3, 8000924 <__aeabi_uldivmod+0x18>
 800090e:	b94a      	cbnz	r2, 8000924 <__aeabi_uldivmod+0x18>
 8000910:	2900      	cmp	r1, #0
 8000912:	bf08      	it	eq
 8000914:	2800      	cmpeq	r0, #0
 8000916:	bf1c      	itt	ne
 8000918:	f04f 31ff 	movne.w	r1, #4294967295
 800091c:	f04f 30ff 	movne.w	r0, #4294967295
 8000920:	f000 b974 	b.w	8000c0c <__aeabi_idiv0>
 8000924:	f1ad 0c08 	sub.w	ip, sp, #8
 8000928:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800092c:	f000 f806 	bl	800093c <__udivmoddi4>
 8000930:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000934:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000938:	b004      	add	sp, #16
 800093a:	4770      	bx	lr

0800093c <__udivmoddi4>:
 800093c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000940:	9d08      	ldr	r5, [sp, #32]
 8000942:	4604      	mov	r4, r0
 8000944:	468e      	mov	lr, r1
 8000946:	2b00      	cmp	r3, #0
 8000948:	d14d      	bne.n	80009e6 <__udivmoddi4+0xaa>
 800094a:	428a      	cmp	r2, r1
 800094c:	4694      	mov	ip, r2
 800094e:	d969      	bls.n	8000a24 <__udivmoddi4+0xe8>
 8000950:	fab2 f282 	clz	r2, r2
 8000954:	b152      	cbz	r2, 800096c <__udivmoddi4+0x30>
 8000956:	fa01 f302 	lsl.w	r3, r1, r2
 800095a:	f1c2 0120 	rsb	r1, r2, #32
 800095e:	fa20 f101 	lsr.w	r1, r0, r1
 8000962:	fa0c fc02 	lsl.w	ip, ip, r2
 8000966:	ea41 0e03 	orr.w	lr, r1, r3
 800096a:	4094      	lsls	r4, r2
 800096c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000970:	0c21      	lsrs	r1, r4, #16
 8000972:	fbbe f6f8 	udiv	r6, lr, r8
 8000976:	fa1f f78c 	uxth.w	r7, ip
 800097a:	fb08 e316 	mls	r3, r8, r6, lr
 800097e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000982:	fb06 f107 	mul.w	r1, r6, r7
 8000986:	4299      	cmp	r1, r3
 8000988:	d90a      	bls.n	80009a0 <__udivmoddi4+0x64>
 800098a:	eb1c 0303 	adds.w	r3, ip, r3
 800098e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000992:	f080 811f 	bcs.w	8000bd4 <__udivmoddi4+0x298>
 8000996:	4299      	cmp	r1, r3
 8000998:	f240 811c 	bls.w	8000bd4 <__udivmoddi4+0x298>
 800099c:	3e02      	subs	r6, #2
 800099e:	4463      	add	r3, ip
 80009a0:	1a5b      	subs	r3, r3, r1
 80009a2:	b2a4      	uxth	r4, r4
 80009a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80009a8:	fb08 3310 	mls	r3, r8, r0, r3
 80009ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009b0:	fb00 f707 	mul.w	r7, r0, r7
 80009b4:	42a7      	cmp	r7, r4
 80009b6:	d90a      	bls.n	80009ce <__udivmoddi4+0x92>
 80009b8:	eb1c 0404 	adds.w	r4, ip, r4
 80009bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80009c0:	f080 810a 	bcs.w	8000bd8 <__udivmoddi4+0x29c>
 80009c4:	42a7      	cmp	r7, r4
 80009c6:	f240 8107 	bls.w	8000bd8 <__udivmoddi4+0x29c>
 80009ca:	4464      	add	r4, ip
 80009cc:	3802      	subs	r0, #2
 80009ce:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009d2:	1be4      	subs	r4, r4, r7
 80009d4:	2600      	movs	r6, #0
 80009d6:	b11d      	cbz	r5, 80009e0 <__udivmoddi4+0xa4>
 80009d8:	40d4      	lsrs	r4, r2
 80009da:	2300      	movs	r3, #0
 80009dc:	e9c5 4300 	strd	r4, r3, [r5]
 80009e0:	4631      	mov	r1, r6
 80009e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009e6:	428b      	cmp	r3, r1
 80009e8:	d909      	bls.n	80009fe <__udivmoddi4+0xc2>
 80009ea:	2d00      	cmp	r5, #0
 80009ec:	f000 80ef 	beq.w	8000bce <__udivmoddi4+0x292>
 80009f0:	2600      	movs	r6, #0
 80009f2:	e9c5 0100 	strd	r0, r1, [r5]
 80009f6:	4630      	mov	r0, r6
 80009f8:	4631      	mov	r1, r6
 80009fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009fe:	fab3 f683 	clz	r6, r3
 8000a02:	2e00      	cmp	r6, #0
 8000a04:	d14a      	bne.n	8000a9c <__udivmoddi4+0x160>
 8000a06:	428b      	cmp	r3, r1
 8000a08:	d302      	bcc.n	8000a10 <__udivmoddi4+0xd4>
 8000a0a:	4282      	cmp	r2, r0
 8000a0c:	f200 80f9 	bhi.w	8000c02 <__udivmoddi4+0x2c6>
 8000a10:	1a84      	subs	r4, r0, r2
 8000a12:	eb61 0303 	sbc.w	r3, r1, r3
 8000a16:	2001      	movs	r0, #1
 8000a18:	469e      	mov	lr, r3
 8000a1a:	2d00      	cmp	r5, #0
 8000a1c:	d0e0      	beq.n	80009e0 <__udivmoddi4+0xa4>
 8000a1e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000a22:	e7dd      	b.n	80009e0 <__udivmoddi4+0xa4>
 8000a24:	b902      	cbnz	r2, 8000a28 <__udivmoddi4+0xec>
 8000a26:	deff      	udf	#255	; 0xff
 8000a28:	fab2 f282 	clz	r2, r2
 8000a2c:	2a00      	cmp	r2, #0
 8000a2e:	f040 8092 	bne.w	8000b56 <__udivmoddi4+0x21a>
 8000a32:	eba1 010c 	sub.w	r1, r1, ip
 8000a36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a3a:	fa1f fe8c 	uxth.w	lr, ip
 8000a3e:	2601      	movs	r6, #1
 8000a40:	0c20      	lsrs	r0, r4, #16
 8000a42:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a46:	fb07 1113 	mls	r1, r7, r3, r1
 8000a4a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a4e:	fb0e f003 	mul.w	r0, lr, r3
 8000a52:	4288      	cmp	r0, r1
 8000a54:	d908      	bls.n	8000a68 <__udivmoddi4+0x12c>
 8000a56:	eb1c 0101 	adds.w	r1, ip, r1
 8000a5a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a5e:	d202      	bcs.n	8000a66 <__udivmoddi4+0x12a>
 8000a60:	4288      	cmp	r0, r1
 8000a62:	f200 80cb 	bhi.w	8000bfc <__udivmoddi4+0x2c0>
 8000a66:	4643      	mov	r3, r8
 8000a68:	1a09      	subs	r1, r1, r0
 8000a6a:	b2a4      	uxth	r4, r4
 8000a6c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a70:	fb07 1110 	mls	r1, r7, r0, r1
 8000a74:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a78:	fb0e fe00 	mul.w	lr, lr, r0
 8000a7c:	45a6      	cmp	lr, r4
 8000a7e:	d908      	bls.n	8000a92 <__udivmoddi4+0x156>
 8000a80:	eb1c 0404 	adds.w	r4, ip, r4
 8000a84:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a88:	d202      	bcs.n	8000a90 <__udivmoddi4+0x154>
 8000a8a:	45a6      	cmp	lr, r4
 8000a8c:	f200 80bb 	bhi.w	8000c06 <__udivmoddi4+0x2ca>
 8000a90:	4608      	mov	r0, r1
 8000a92:	eba4 040e 	sub.w	r4, r4, lr
 8000a96:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a9a:	e79c      	b.n	80009d6 <__udivmoddi4+0x9a>
 8000a9c:	f1c6 0720 	rsb	r7, r6, #32
 8000aa0:	40b3      	lsls	r3, r6
 8000aa2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000aa6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000aaa:	fa20 f407 	lsr.w	r4, r0, r7
 8000aae:	fa01 f306 	lsl.w	r3, r1, r6
 8000ab2:	431c      	orrs	r4, r3
 8000ab4:	40f9      	lsrs	r1, r7
 8000ab6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000aba:	fa00 f306 	lsl.w	r3, r0, r6
 8000abe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ac2:	0c20      	lsrs	r0, r4, #16
 8000ac4:	fa1f fe8c 	uxth.w	lr, ip
 8000ac8:	fb09 1118 	mls	r1, r9, r8, r1
 8000acc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ad0:	fb08 f00e 	mul.w	r0, r8, lr
 8000ad4:	4288      	cmp	r0, r1
 8000ad6:	fa02 f206 	lsl.w	r2, r2, r6
 8000ada:	d90b      	bls.n	8000af4 <__udivmoddi4+0x1b8>
 8000adc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ae0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ae4:	f080 8088 	bcs.w	8000bf8 <__udivmoddi4+0x2bc>
 8000ae8:	4288      	cmp	r0, r1
 8000aea:	f240 8085 	bls.w	8000bf8 <__udivmoddi4+0x2bc>
 8000aee:	f1a8 0802 	sub.w	r8, r8, #2
 8000af2:	4461      	add	r1, ip
 8000af4:	1a09      	subs	r1, r1, r0
 8000af6:	b2a4      	uxth	r4, r4
 8000af8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000afc:	fb09 1110 	mls	r1, r9, r0, r1
 8000b00:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000b04:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b08:	458e      	cmp	lr, r1
 8000b0a:	d908      	bls.n	8000b1e <__udivmoddi4+0x1e2>
 8000b0c:	eb1c 0101 	adds.w	r1, ip, r1
 8000b10:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b14:	d26c      	bcs.n	8000bf0 <__udivmoddi4+0x2b4>
 8000b16:	458e      	cmp	lr, r1
 8000b18:	d96a      	bls.n	8000bf0 <__udivmoddi4+0x2b4>
 8000b1a:	3802      	subs	r0, #2
 8000b1c:	4461      	add	r1, ip
 8000b1e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b22:	fba0 9402 	umull	r9, r4, r0, r2
 8000b26:	eba1 010e 	sub.w	r1, r1, lr
 8000b2a:	42a1      	cmp	r1, r4
 8000b2c:	46c8      	mov	r8, r9
 8000b2e:	46a6      	mov	lr, r4
 8000b30:	d356      	bcc.n	8000be0 <__udivmoddi4+0x2a4>
 8000b32:	d053      	beq.n	8000bdc <__udivmoddi4+0x2a0>
 8000b34:	b15d      	cbz	r5, 8000b4e <__udivmoddi4+0x212>
 8000b36:	ebb3 0208 	subs.w	r2, r3, r8
 8000b3a:	eb61 010e 	sbc.w	r1, r1, lr
 8000b3e:	fa01 f707 	lsl.w	r7, r1, r7
 8000b42:	fa22 f306 	lsr.w	r3, r2, r6
 8000b46:	40f1      	lsrs	r1, r6
 8000b48:	431f      	orrs	r7, r3
 8000b4a:	e9c5 7100 	strd	r7, r1, [r5]
 8000b4e:	2600      	movs	r6, #0
 8000b50:	4631      	mov	r1, r6
 8000b52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b56:	f1c2 0320 	rsb	r3, r2, #32
 8000b5a:	40d8      	lsrs	r0, r3
 8000b5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b60:	fa21 f303 	lsr.w	r3, r1, r3
 8000b64:	4091      	lsls	r1, r2
 8000b66:	4301      	orrs	r1, r0
 8000b68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b6c:	fa1f fe8c 	uxth.w	lr, ip
 8000b70:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b74:	fb07 3610 	mls	r6, r7, r0, r3
 8000b78:	0c0b      	lsrs	r3, r1, #16
 8000b7a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b7e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b82:	429e      	cmp	r6, r3
 8000b84:	fa04 f402 	lsl.w	r4, r4, r2
 8000b88:	d908      	bls.n	8000b9c <__udivmoddi4+0x260>
 8000b8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b92:	d22f      	bcs.n	8000bf4 <__udivmoddi4+0x2b8>
 8000b94:	429e      	cmp	r6, r3
 8000b96:	d92d      	bls.n	8000bf4 <__udivmoddi4+0x2b8>
 8000b98:	3802      	subs	r0, #2
 8000b9a:	4463      	add	r3, ip
 8000b9c:	1b9b      	subs	r3, r3, r6
 8000b9e:	b289      	uxth	r1, r1
 8000ba0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ba4:	fb07 3316 	mls	r3, r7, r6, r3
 8000ba8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bac:	fb06 f30e 	mul.w	r3, r6, lr
 8000bb0:	428b      	cmp	r3, r1
 8000bb2:	d908      	bls.n	8000bc6 <__udivmoddi4+0x28a>
 8000bb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bb8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000bbc:	d216      	bcs.n	8000bec <__udivmoddi4+0x2b0>
 8000bbe:	428b      	cmp	r3, r1
 8000bc0:	d914      	bls.n	8000bec <__udivmoddi4+0x2b0>
 8000bc2:	3e02      	subs	r6, #2
 8000bc4:	4461      	add	r1, ip
 8000bc6:	1ac9      	subs	r1, r1, r3
 8000bc8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000bcc:	e738      	b.n	8000a40 <__udivmoddi4+0x104>
 8000bce:	462e      	mov	r6, r5
 8000bd0:	4628      	mov	r0, r5
 8000bd2:	e705      	b.n	80009e0 <__udivmoddi4+0xa4>
 8000bd4:	4606      	mov	r6, r0
 8000bd6:	e6e3      	b.n	80009a0 <__udivmoddi4+0x64>
 8000bd8:	4618      	mov	r0, r3
 8000bda:	e6f8      	b.n	80009ce <__udivmoddi4+0x92>
 8000bdc:	454b      	cmp	r3, r9
 8000bde:	d2a9      	bcs.n	8000b34 <__udivmoddi4+0x1f8>
 8000be0:	ebb9 0802 	subs.w	r8, r9, r2
 8000be4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000be8:	3801      	subs	r0, #1
 8000bea:	e7a3      	b.n	8000b34 <__udivmoddi4+0x1f8>
 8000bec:	4646      	mov	r6, r8
 8000bee:	e7ea      	b.n	8000bc6 <__udivmoddi4+0x28a>
 8000bf0:	4620      	mov	r0, r4
 8000bf2:	e794      	b.n	8000b1e <__udivmoddi4+0x1e2>
 8000bf4:	4640      	mov	r0, r8
 8000bf6:	e7d1      	b.n	8000b9c <__udivmoddi4+0x260>
 8000bf8:	46d0      	mov	r8, sl
 8000bfa:	e77b      	b.n	8000af4 <__udivmoddi4+0x1b8>
 8000bfc:	3b02      	subs	r3, #2
 8000bfe:	4461      	add	r1, ip
 8000c00:	e732      	b.n	8000a68 <__udivmoddi4+0x12c>
 8000c02:	4630      	mov	r0, r6
 8000c04:	e709      	b.n	8000a1a <__udivmoddi4+0xde>
 8000c06:	4464      	add	r4, ip
 8000c08:	3802      	subs	r0, #2
 8000c0a:	e742      	b.n	8000a92 <__udivmoddi4+0x156>

08000c0c <__aeabi_idiv0>:
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop

08000c10 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	4a07      	ldr	r2, [pc, #28]	; (8000c3c <vApplicationGetIdleTaskMemory+0x2c>)
 8000c20:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	4a06      	ldr	r2, [pc, #24]	; (8000c40 <vApplicationGetIdleTaskMemory+0x30>)
 8000c26:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2280      	movs	r2, #128	; 0x80
 8000c2c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000c2e:	bf00      	nop
 8000c30:	3714      	adds	r7, #20
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	200001fc 	.word	0x200001fc
 8000c40:	20000250 	.word	0x20000250

08000c44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c44:	b5b0      	push	{r4, r5, r7, lr}
 8000c46:	b092      	sub	sp, #72	; 0x48
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c4a:	f002 fa45 	bl	80030d8 <HAL_Init>

  /* USER CODE BEGIN Init */
  BSP_LCD_Init();
 8000c4e:	f001 fb4b 	bl	80022e8 <BSP_LCD_Init>
  BSP_SDRAM_Init();
 8000c52:	f002 f877 	bl	8002d44 <BSP_SDRAM_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c56:	f000 f863 	bl	8000d20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c5a:	f000 f901 	bl	8000e60 <MX_GPIO_Init>
  MX_SPI5_Init();
 8000c5e:	f000 f8c9 	bl	8000df4 <MX_SPI5_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_LayerDefaultInit(1, SDRAM_DEVICE_ADDR);
 8000c62:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8000c66:	2001      	movs	r0, #1
 8000c68:	f001 fbc0 	bl	80023ec <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);//select on which layer we write
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	f001 fc21 	bl	80024b4 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();//turn on LCD
 8000c72:	f001 ff23 	bl	8002abc <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_BLUE);//clear the LCD on blue s
 8000c76:	4823      	ldr	r0, [pc, #140]	; (8000d04 <main+0xc0>)
 8000c78:	f001 fc8e 	bl	8002598 <BSP_LCD_Clear>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);//set text background color
 8000c7c:	4821      	ldr	r0, [pc, #132]	; (8000d04 <main+0xc0>)
 8000c7e:	f001 fc41 	bl	8002504 <BSP_LCD_SetBackColor>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);//set text color
 8000c82:	f04f 30ff 	mov.w	r0, #4294967295
 8000c86:	f001 fc25 	bl	80024d4 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont(&Font24);
 8000c8a:	481f      	ldr	r0, [pc, #124]	; (8000d08 <main+0xc4>)
 8000c8c:	f001 fc54 	bl	8002538 <BSP_LCD_SetFont>
  BSP_LCD_GetFont();
 8000c90:	f001 fc6c 	bl	800256c <BSP_LCD_GetFont>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  osMailQDef(myMailQ, 5, Gyro_Data);
 8000c94:	2305      	movs	r3, #5
 8000c96:	63bb      	str	r3, [r7, #56]	; 0x38
 8000c98:	2306      	movs	r3, #6
 8000c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000c9c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ca0:	643b      	str	r3, [r7, #64]	; 0x40
  myMailQId = osMailCreate(osMailQ(myMailQ), NULL);
 8000ca2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f009 f86f 	bl	8009d8c <osMailCreate>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	4a16      	ldr	r2, [pc, #88]	; (8000d0c <main+0xc8>)
 8000cb2:	6013      	str	r3, [r2, #0]
  /* Create the thread(s) */
  /* definition and creation of defaultTask */


  /* definition and creation of Task01 */
  osThreadDef(Task01, StartTask01, osPriorityNormal, 0, 256);
 8000cb4:	4b16      	ldr	r3, [pc, #88]	; (8000d10 <main+0xcc>)
 8000cb6:	f107 041c 	add.w	r4, r7, #28
 8000cba:	461d      	mov	r5, r3
 8000cbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cc0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000cc4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task01Handle = osThreadCreate(osThread(Task01), NULL);
 8000cc8:	f107 031c 	add.w	r3, r7, #28
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f008 fe6f 	bl	80099b2 <osThreadCreate>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	4a0f      	ldr	r2, [pc, #60]	; (8000d14 <main+0xd0>)
 8000cd8:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task02 */
  osThreadDef(Task02, StartTask02, osPriorityNormal, 0, 128);
 8000cda:	4b0f      	ldr	r3, [pc, #60]	; (8000d18 <main+0xd4>)
 8000cdc:	463c      	mov	r4, r7
 8000cde:	461d      	mov	r5, r3
 8000ce0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ce2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ce4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ce8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task02Handle = osThreadCreate(osThread(Task02), NULL);
 8000cec:	463b      	mov	r3, r7
 8000cee:	2100      	movs	r1, #0
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f008 fe5e 	bl	80099b2 <osThreadCreate>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	4a08      	ldr	r2, [pc, #32]	; (8000d1c <main+0xd8>)
 8000cfa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000cfc:	f008 fe52 	bl	80099a4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d00:	e7fe      	b.n	8000d00 <main+0xbc>
 8000d02:	bf00      	nop
 8000d04:	ff0000ff 	.word	0xff0000ff
 8000d08:	20000074 	.word	0x20000074
 8000d0c:	200004b0 	.word	0x200004b0
 8000d10:	0800f834 	.word	0x0800f834
 8000d14:	200004a8 	.word	0x200004a8
 8000d18:	0800f850 	.word	0x0800f850
 8000d1c:	200004ac 	.word	0x200004ac

08000d20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b094      	sub	sp, #80	; 0x50
 8000d24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d26:	f107 0320 	add.w	r3, r7, #32
 8000d2a:	2230      	movs	r2, #48	; 0x30
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f00e f904 	bl	800ef3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d34:	f107 030c 	add.w	r3, r7, #12
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d44:	2300      	movs	r3, #0
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	4b28      	ldr	r3, [pc, #160]	; (8000dec <SystemClock_Config+0xcc>)
 8000d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4c:	4a27      	ldr	r2, [pc, #156]	; (8000dec <SystemClock_Config+0xcc>)
 8000d4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d52:	6413      	str	r3, [r2, #64]	; 0x40
 8000d54:	4b25      	ldr	r3, [pc, #148]	; (8000dec <SystemClock_Config+0xcc>)
 8000d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d5c:	60bb      	str	r3, [r7, #8]
 8000d5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d60:	2300      	movs	r3, #0
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	4b22      	ldr	r3, [pc, #136]	; (8000df0 <SystemClock_Config+0xd0>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a21      	ldr	r2, [pc, #132]	; (8000df0 <SystemClock_Config+0xd0>)
 8000d6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d6e:	6013      	str	r3, [r2, #0]
 8000d70:	4b1f      	ldr	r3, [pc, #124]	; (8000df0 <SystemClock_Config+0xd0>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d78:	607b      	str	r3, [r7, #4]
 8000d7a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d86:	2302      	movs	r3, #2
 8000d88:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d90:	2308      	movs	r3, #8
 8000d92:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000d94:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000d98:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d9e:	2307      	movs	r3, #7
 8000da0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000da2:	f107 0320 	add.w	r3, r7, #32
 8000da6:	4618      	mov	r0, r3
 8000da8:	f004 ffae 	bl	8005d08 <HAL_RCC_OscConfig>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000db2:	f000 f99f 	bl	80010f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000db6:	230f      	movs	r3, #15
 8000db8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000dc2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000dc6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000dc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dcc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000dce:	f107 030c 	add.w	r3, r7, #12
 8000dd2:	2105      	movs	r1, #5
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f005 fa0f 	bl	80061f8 <HAL_RCC_ClockConfig>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000de0:	f000 f988 	bl	80010f4 <Error_Handler>
  }
}
 8000de4:	bf00      	nop
 8000de6:	3750      	adds	r7, #80	; 0x50
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40007000 	.word	0x40007000

08000df4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000df8:	4b17      	ldr	r3, [pc, #92]	; (8000e58 <MX_SPI5_Init+0x64>)
 8000dfa:	4a18      	ldr	r2, [pc, #96]	; (8000e5c <MX_SPI5_Init+0x68>)
 8000dfc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000dfe:	4b16      	ldr	r3, [pc, #88]	; (8000e58 <MX_SPI5_Init+0x64>)
 8000e00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e04:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000e06:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <MX_SPI5_Init+0x64>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e0c:	4b12      	ldr	r3, [pc, #72]	; (8000e58 <MX_SPI5_Init+0x64>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e12:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <MX_SPI5_Init+0x64>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e18:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <MX_SPI5_Init+0x64>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <MX_SPI5_Init+0x64>)
 8000e20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e24:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e26:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <MX_SPI5_Init+0x64>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e2c:	4b0a      	ldr	r3, [pc, #40]	; (8000e58 <MX_SPI5_Init+0x64>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e32:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <MX_SPI5_Init+0x64>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e38:	4b07      	ldr	r3, [pc, #28]	; (8000e58 <MX_SPI5_Init+0x64>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000e3e:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <MX_SPI5_Init+0x64>)
 8000e40:	220a      	movs	r2, #10
 8000e42:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000e44:	4804      	ldr	r0, [pc, #16]	; (8000e58 <MX_SPI5_Init+0x64>)
 8000e46:	f005 fe70 	bl	8006b2a <HAL_SPI_Init>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000e50:	f000 f950 	bl	80010f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20000450 	.word	0x20000450
 8000e5c:	40015000 	.word	0x40015000

08000e60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08a      	sub	sp, #40	; 0x28
 8000e64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e66:	f107 0314 	add.w	r3, r7, #20
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	605a      	str	r2, [r3, #4]
 8000e70:	609a      	str	r2, [r3, #8]
 8000e72:	60da      	str	r2, [r3, #12]
 8000e74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
 8000e7a:	4b2e      	ldr	r3, [pc, #184]	; (8000f34 <MX_GPIO_Init+0xd4>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	4a2d      	ldr	r2, [pc, #180]	; (8000f34 <MX_GPIO_Init+0xd4>)
 8000e80:	f043 0320 	orr.w	r3, r3, #32
 8000e84:	6313      	str	r3, [r2, #48]	; 0x30
 8000e86:	4b2b      	ldr	r3, [pc, #172]	; (8000f34 <MX_GPIO_Init+0xd4>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	f003 0320 	and.w	r3, r3, #32
 8000e8e:	613b      	str	r3, [r7, #16]
 8000e90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	4b27      	ldr	r3, [pc, #156]	; (8000f34 <MX_GPIO_Init+0xd4>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	4a26      	ldr	r2, [pc, #152]	; (8000f34 <MX_GPIO_Init+0xd4>)
 8000e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea2:	4b24      	ldr	r3, [pc, #144]	; (8000f34 <MX_GPIO_Init+0xd4>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eaa:	60fb      	str	r3, [r7, #12]
 8000eac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60bb      	str	r3, [r7, #8]
 8000eb2:	4b20      	ldr	r3, [pc, #128]	; (8000f34 <MX_GPIO_Init+0xd4>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	4a1f      	ldr	r2, [pc, #124]	; (8000f34 <MX_GPIO_Init+0xd4>)
 8000eb8:	f043 0302 	orr.w	r3, r3, #2
 8000ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ebe:	4b1d      	ldr	r3, [pc, #116]	; (8000f34 <MX_GPIO_Init+0xd4>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	f003 0302 	and.w	r3, r3, #2
 8000ec6:	60bb      	str	r3, [r7, #8]
 8000ec8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	607b      	str	r3, [r7, #4]
 8000ece:	4b19      	ldr	r3, [pc, #100]	; (8000f34 <MX_GPIO_Init+0xd4>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	4a18      	ldr	r2, [pc, #96]	; (8000f34 <MX_GPIO_Init+0xd4>)
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eda:	4b16      	ldr	r3, [pc, #88]	; (8000f34 <MX_GPIO_Init+0xd4>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	603b      	str	r3, [r7, #0]
 8000eea:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <MX_GPIO_Init+0xd4>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	4a11      	ldr	r2, [pc, #68]	; (8000f34 <MX_GPIO_Init+0xd4>)
 8000ef0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef6:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <MX_GPIO_Init+0xd4>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000efe:	603b      	str	r3, [r7, #0]
 8000f00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8000f02:	2200      	movs	r2, #0
 8000f04:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000f08:	480b      	ldr	r0, [pc, #44]	; (8000f38 <MX_GPIO_Init+0xd8>)
 8000f0a:	f003 f98d 	bl	8004228 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000f0e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000f12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f14:	2301      	movs	r3, #1
 8000f16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f1c:	2303      	movs	r3, #3
 8000f1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	4619      	mov	r1, r3
 8000f26:	4804      	ldr	r0, [pc, #16]	; (8000f38 <MX_GPIO_Init+0xd8>)
 8000f28:	f002 fec6 	bl	8003cb8 <HAL_GPIO_Init>

}
 8000f2c:	bf00      	nop
 8000f2e:	3728      	adds	r7, #40	; 0x28
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40023800 	.word	0x40023800
 8000f38:	40021800 	.word	0x40021800

08000f3c <StartTask01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask01 */
void StartTask01(void const * argument)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08e      	sub	sp, #56	; 0x38
 8000f40:	af02      	add	r7, sp, #8
 8000f42:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartTask01 */
  /* Infinite loop */
  MX_USB_DEVICE_Init();
 8000f44:	f00d fa7a 	bl	800e43c <MX_USB_DEVICE_Init>
  uint8_t *pBuff;
  osSignalWait(0x1, osWaitForever);
 8000f48:	463b      	mov	r3, r7
 8000f4a:	f04f 32ff 	mov.w	r2, #4294967295
 8000f4e:	2101      	movs	r1, #1
 8000f50:	4618      	mov	r0, r3
 8000f52:	f008 fdcf 	bl	8009af4 <osSignalWait>
  osSignalSet(Task02Handle, 0x1);
 8000f56:	4b1b      	ldr	r3, [pc, #108]	; (8000fc4 <StartTask01+0x88>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f008 fd89 	bl	8009a74 <osSignalSet>
  for (;;) {
	  osEvent event = osMailGet(myMailQId, osWaitForever);
 8000f62:	4b19      	ldr	r3, [pc, #100]	; (8000fc8 <StartTask01+0x8c>)
 8000f64:	6819      	ldr	r1, [r3, #0]
 8000f66:	f107 031c 	add.w	r3, r7, #28
 8000f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f008 ffb8 	bl	8009ee4 <osMailGet>
	  Gyro_Data *data = event.value.p;
 8000f74:	6a3b      	ldr	r3, [r7, #32]
 8000f76:	62fb      	str	r3, [r7, #44]	; 0x2c
	  sprintf((char *) pBuff, "x: %d, y: %d; z: %d\n", data->x, data->y, data->z);
 8000f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f82:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f86:	4619      	mov	r1, r3
 8000f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f8a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000f8e:	9300      	str	r3, [sp, #0]
 8000f90:	460b      	mov	r3, r1
 8000f92:	490e      	ldr	r1, [pc, #56]	; (8000fcc <StartTask01+0x90>)
 8000f94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000f96:	f00d ffd9 	bl	800ef4c <siprintf>
	  osMailFree(myMailQId, data);
 8000f9a:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <StartTask01+0x8c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f009 f813 	bl	8009fcc <osMailFree>
	  CDC_Transmit_HS((uint8_t *) pBuff, strlen((const char *)pBuff));
 8000fa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000fa8:	f7ff f922 	bl	80001f0 <strlen>
 8000fac:	4603      	mov	r3, r0
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000fb4:	f00d fb2e 	bl	800e614 <CDC_Transmit_HS>
	  osDelay(1000);
 8000fb8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fbc:	f008 fd45 	bl	8009a4a <osDelay>
  for (;;) {
 8000fc0:	e7cf      	b.n	8000f62 <StartTask01+0x26>
 8000fc2:	bf00      	nop
 8000fc4:	200004ac 	.word	0x200004ac
 8000fc8:	200004b0 	.word	0x200004b0
 8000fcc:	0800f86c 	.word	0x0800f86c

08000fd0 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b096      	sub	sp, #88	; 0x58
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  BSP_GYRO_Init();
 8000fd8:	f001 f90c 	bl	80021f4 <BSP_GYRO_Init>
  Point UpArr [] = {{120, 0}, {110, 10}, {130, 10}};
 8000fdc:	4a37      	ldr	r2, [pc, #220]	; (80010bc <StartTask02+0xec>)
 8000fde:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fe2:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fe4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  Point DownArr [] = {{120, 320}, {110, 310}, {130, 310}};
 8000fe8:	4a35      	ldr	r2, [pc, #212]	; (80010c0 <StartTask02+0xf0>)
 8000fea:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000fee:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ff0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  Point LeftArr [] = {{0, 160}, {10, 150}, {10, 170}};
 8000ff4:	4a33      	ldr	r2, [pc, #204]	; (80010c4 <StartTask02+0xf4>)
 8000ff6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ffa:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ffc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  Point RightArr [] = {{240, 160}, {230, 150}, {230, 170}};
 8001000:	4a31      	ldr	r2, [pc, #196]	; (80010c8 <StartTask02+0xf8>)
 8001002:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001006:	ca07      	ldmia	r2, {r0, r1, r2}
 8001008:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  Gyro_Data data;
  osSignalWait(0x1, osWaitForever);
 800100c:	463b      	mov	r3, r7
 800100e:	f04f 32ff 	mov.w	r2, #4294967295
 8001012:	2101      	movs	r1, #1
 8001014:	4618      	mov	r0, r3
 8001016:	f008 fd6d 	bl	8009af4 <osSignalWait>
  for (;;) {
	  BSP_GYRO_GetXYZ((int16_t *) &data);
 800101a:	f107 031c 	add.w	r3, r7, #28
 800101e:	4618      	mov	r0, r3
 8001020:	f001 f94e 	bl	80022c0 <BSP_GYRO_GetXYZ>
	  Gyro_Data *data_tx;
	   while (NULL == data_tx) {
 8001024:	e007      	b.n	8001036 <StartTask02+0x66>
		   data_tx = (Gyro_Data *) osMailAlloc(myMailQId, osWaitForever);
 8001026:	4b29      	ldr	r3, [pc, #164]	; (80010cc <StartTask02+0xfc>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f04f 31ff 	mov.w	r1, #4294967295
 800102e:	4618      	mov	r0, r3
 8001030:	f008 ff04 	bl	8009e3c <osMailAlloc>
 8001034:	6578      	str	r0, [r7, #84]	; 0x54
	   while (NULL == data_tx) {
 8001036:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001038:	2b00      	cmp	r3, #0
 800103a:	d0f4      	beq.n	8001026 <StartTask02+0x56>
	   }
	  	 data_tx->x = data.x;
 800103c:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001040:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001042:	801a      	strh	r2, [r3, #0]
	  	 data_tx->y = data.y;
 8001044:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8001048:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800104a:	805a      	strh	r2, [r3, #2]
	  	 data_tx->z = data.z;
 800104c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001050:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001052:	809a      	strh	r2, [r3, #4]
	  	 osMailPut(myMailQId, data_tx);
 8001054:	4b1d      	ldr	r3, [pc, #116]	; (80010cc <StartTask02+0xfc>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800105a:	4618      	mov	r0, r3
 800105c:	f008 ff04 	bl	8009e68 <osMailPut>

	  	 //hien thi huong
	  	if (data_tx->x > 0) {
 8001060:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001062:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001066:	2b00      	cmp	r3, #0
 8001068:	dd05      	ble.n	8001076 <StartTask02+0xa6>
	  			  BSP_LCD_FillPolygon(DownArr, 3);
 800106a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800106e:	2103      	movs	r1, #3
 8001070:	4618      	mov	r0, r3
 8001072:	f001 fc41 	bl	80028f8 <BSP_LCD_FillPolygon>
	  	}
	  	if (data_tx->x < 0) {
 8001076:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001078:	f9b3 3000 	ldrsh.w	r3, [r3]
 800107c:	2b00      	cmp	r3, #0
 800107e:	da05      	bge.n	800108c <StartTask02+0xbc>
	  			  BSP_LCD_FillPolygon(UpArr, 3);
 8001080:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001084:	2103      	movs	r1, #3
 8001086:	4618      	mov	r0, r3
 8001088:	f001 fc36 	bl	80028f8 <BSP_LCD_FillPolygon>
	  	}
	  	if (data_tx->y > 0) {
 800108c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800108e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001092:	2b00      	cmp	r3, #0
 8001094:	dd05      	ble.n	80010a2 <StartTask02+0xd2>
	  		  		BSP_LCD_FillPolygon(RightArr, 3);
 8001096:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800109a:	2103      	movs	r1, #3
 800109c:	4618      	mov	r0, r3
 800109e:	f001 fc2b 	bl	80028f8 <BSP_LCD_FillPolygon>
	  	}

	  	if (data_tx->y < 0) {
 80010a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80010a4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	dab6      	bge.n	800101a <StartTask02+0x4a>
	  		  	  	BSP_LCD_FillPolygon(LeftArr, 3);
 80010ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010b0:	2103      	movs	r1, #3
 80010b2:	4618      	mov	r0, r3
 80010b4:	f001 fc20 	bl	80028f8 <BSP_LCD_FillPolygon>
  for (;;) {
 80010b8:	e7af      	b.n	800101a <StartTask02+0x4a>
 80010ba:	bf00      	nop
 80010bc:	0800f884 	.word	0x0800f884
 80010c0:	0800f890 	.word	0x0800f890
 80010c4:	0800f89c 	.word	0x0800f89c
 80010c8:	0800f8a8 	.word	0x0800f8a8
 80010cc:	200004b0 	.word	0x200004b0

080010d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a04      	ldr	r2, [pc, #16]	; (80010f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d101      	bne.n	80010e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010e2:	f002 f81b 	bl	800311c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40001000 	.word	0x40001000

080010f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010f8:	b672      	cpsid	i
}
 80010fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010fc:	e7fe      	b.n	80010fc <Error_Handler+0x8>
	...

08001100 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	4b16      	ldr	r3, [pc, #88]	; (8001164 <HAL_MspInit+0x64>)
 800110c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110e:	4a15      	ldr	r2, [pc, #84]	; (8001164 <HAL_MspInit+0x64>)
 8001110:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001114:	6453      	str	r3, [r2, #68]	; 0x44
 8001116:	4b13      	ldr	r3, [pc, #76]	; (8001164 <HAL_MspInit+0x64>)
 8001118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	603b      	str	r3, [r7, #0]
 8001126:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <HAL_MspInit+0x64>)
 8001128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112a:	4a0e      	ldr	r2, [pc, #56]	; (8001164 <HAL_MspInit+0x64>)
 800112c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001130:	6413      	str	r3, [r2, #64]	; 0x40
 8001132:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <HAL_MspInit+0x64>)
 8001134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800113a:	603b      	str	r3, [r7, #0]
 800113c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800113e:	2200      	movs	r2, #0
 8001140:	210f      	movs	r1, #15
 8001142:	f06f 0001 	mvn.w	r0, #1
 8001146:	f002 f909 	bl	800335c <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 800114a:	2200      	movs	r2, #0
 800114c:	2105      	movs	r1, #5
 800114e:	2005      	movs	r0, #5
 8001150:	f002 f904 	bl	800335c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001154:	2005      	movs	r0, #5
 8001156:	f002 f91d 	bl	8003394 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40023800 	.word	0x40023800

08001168 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08a      	sub	sp, #40	; 0x28
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a1d      	ldr	r2, [pc, #116]	; (80011fc <HAL_SPI_MspInit+0x94>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d134      	bne.n	80011f4 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]
 800118e:	4b1c      	ldr	r3, [pc, #112]	; (8001200 <HAL_SPI_MspInit+0x98>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001192:	4a1b      	ldr	r2, [pc, #108]	; (8001200 <HAL_SPI_MspInit+0x98>)
 8001194:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001198:	6453      	str	r3, [r2, #68]	; 0x44
 800119a:	4b19      	ldr	r3, [pc, #100]	; (8001200 <HAL_SPI_MspInit+0x98>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011a2:	613b      	str	r3, [r7, #16]
 80011a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	4b15      	ldr	r3, [pc, #84]	; (8001200 <HAL_SPI_MspInit+0x98>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a14      	ldr	r2, [pc, #80]	; (8001200 <HAL_SPI_MspInit+0x98>)
 80011b0:	f043 0320 	orr.w	r3, r3, #32
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b12      	ldr	r3, [pc, #72]	; (8001200 <HAL_SPI_MspInit+0x98>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f003 0320 	and.w	r3, r3, #32
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80011c2:	f44f 7360 	mov.w	r3, #896	; 0x380
 80011c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c8:	2302      	movs	r3, #2
 80011ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d0:	2303      	movs	r3, #3
 80011d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80011d4:	2305      	movs	r3, #5
 80011d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011d8:	f107 0314 	add.w	r3, r7, #20
 80011dc:	4619      	mov	r1, r3
 80011de:	4809      	ldr	r0, [pc, #36]	; (8001204 <HAL_SPI_MspInit+0x9c>)
 80011e0:	f002 fd6a 	bl	8003cb8 <HAL_GPIO_Init>

    /* SPI5 interrupt Init */
    HAL_NVIC_SetPriority(SPI5_IRQn, 5, 0);
 80011e4:	2200      	movs	r2, #0
 80011e6:	2105      	movs	r1, #5
 80011e8:	2055      	movs	r0, #85	; 0x55
 80011ea:	f002 f8b7 	bl	800335c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
 80011ee:	2055      	movs	r0, #85	; 0x55
 80011f0:	f002 f8d0 	bl	8003394 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80011f4:	bf00      	nop
 80011f6:	3728      	adds	r7, #40	; 0x28
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40015000 	.word	0x40015000
 8001200:	40023800 	.word	0x40023800
 8001204:	40021400 	.word	0x40021400

08001208 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a0a      	ldr	r2, [pc, #40]	; (8001240 <HAL_SPI_MspDeInit+0x38>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d10d      	bne.n	8001236 <HAL_SPI_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800121a:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <HAL_SPI_MspDeInit+0x3c>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121e:	4a09      	ldr	r2, [pc, #36]	; (8001244 <HAL_SPI_MspDeInit+0x3c>)
 8001220:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001224:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 8001226:	f44f 7160 	mov.w	r1, #896	; 0x380
 800122a:	4807      	ldr	r0, [pc, #28]	; (8001248 <HAL_SPI_MspDeInit+0x40>)
 800122c:	f002 fef0 	bl	8004010 <HAL_GPIO_DeInit>

    /* SPI5 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SPI5_IRQn);
 8001230:	2055      	movs	r0, #85	; 0x55
 8001232:	f002 f8bd 	bl	80033b0 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40015000 	.word	0x40015000
 8001244:	40023800 	.word	0x40023800
 8001248:	40021400 	.word	0x40021400

0800124c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08e      	sub	sp, #56	; 0x38
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001254:	2300      	movs	r3, #0
 8001256:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001258:	2300      	movs	r3, #0
 800125a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800125c:	2300      	movs	r3, #0
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	4b33      	ldr	r3, [pc, #204]	; (8001330 <HAL_InitTick+0xe4>)
 8001262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001264:	4a32      	ldr	r2, [pc, #200]	; (8001330 <HAL_InitTick+0xe4>)
 8001266:	f043 0310 	orr.w	r3, r3, #16
 800126a:	6413      	str	r3, [r2, #64]	; 0x40
 800126c:	4b30      	ldr	r3, [pc, #192]	; (8001330 <HAL_InitTick+0xe4>)
 800126e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001270:	f003 0310 	and.w	r3, r3, #16
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001278:	f107 0210 	add.w	r2, r7, #16
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	4611      	mov	r1, r2
 8001282:	4618      	mov	r0, r3
 8001284:	f005 f9c4 	bl	8006610 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001288:	6a3b      	ldr	r3, [r7, #32]
 800128a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800128c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800128e:	2b00      	cmp	r3, #0
 8001290:	d103      	bne.n	800129a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001292:	f005 f9a9 	bl	80065e8 <HAL_RCC_GetPCLK1Freq>
 8001296:	6378      	str	r0, [r7, #52]	; 0x34
 8001298:	e004      	b.n	80012a4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800129a:	f005 f9a5 	bl	80065e8 <HAL_RCC_GetPCLK1Freq>
 800129e:	4603      	mov	r3, r0
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012a6:	4a23      	ldr	r2, [pc, #140]	; (8001334 <HAL_InitTick+0xe8>)
 80012a8:	fba2 2303 	umull	r2, r3, r2, r3
 80012ac:	0c9b      	lsrs	r3, r3, #18
 80012ae:	3b01      	subs	r3, #1
 80012b0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80012b2:	4b21      	ldr	r3, [pc, #132]	; (8001338 <HAL_InitTick+0xec>)
 80012b4:	4a21      	ldr	r2, [pc, #132]	; (800133c <HAL_InitTick+0xf0>)
 80012b6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80012b8:	4b1f      	ldr	r3, [pc, #124]	; (8001338 <HAL_InitTick+0xec>)
 80012ba:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012be:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80012c0:	4a1d      	ldr	r2, [pc, #116]	; (8001338 <HAL_InitTick+0xec>)
 80012c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012c4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80012c6:	4b1c      	ldr	r3, [pc, #112]	; (8001338 <HAL_InitTick+0xec>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012cc:	4b1a      	ldr	r3, [pc, #104]	; (8001338 <HAL_InitTick+0xec>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d2:	4b19      	ldr	r3, [pc, #100]	; (8001338 <HAL_InitTick+0xec>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80012d8:	4817      	ldr	r0, [pc, #92]	; (8001338 <HAL_InitTick+0xec>)
 80012da:	f006 fb23 	bl	8007924 <HAL_TIM_Base_Init>
 80012de:	4603      	mov	r3, r0
 80012e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80012e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d11b      	bne.n	8001324 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80012ec:	4812      	ldr	r0, [pc, #72]	; (8001338 <HAL_InitTick+0xec>)
 80012ee:	f006 fb73 	bl	80079d8 <HAL_TIM_Base_Start_IT>
 80012f2:	4603      	mov	r3, r0
 80012f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80012f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d111      	bne.n	8001324 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001300:	2036      	movs	r0, #54	; 0x36
 8001302:	f002 f847 	bl	8003394 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2b0f      	cmp	r3, #15
 800130a:	d808      	bhi.n	800131e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800130c:	2200      	movs	r2, #0
 800130e:	6879      	ldr	r1, [r7, #4]
 8001310:	2036      	movs	r0, #54	; 0x36
 8001312:	f002 f823 	bl	800335c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001316:	4a0a      	ldr	r2, [pc, #40]	; (8001340 <HAL_InitTick+0xf4>)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6013      	str	r3, [r2, #0]
 800131c:	e002      	b.n	8001324 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001324:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001328:	4618      	mov	r0, r3
 800132a:	3738      	adds	r7, #56	; 0x38
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40023800 	.word	0x40023800
 8001334:	431bde83 	.word	0x431bde83
 8001338:	200004b4 	.word	0x200004b4
 800133c:	40001000 	.word	0x40001000
 8001340:	20000080 	.word	0x20000080

08001344 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001348:	e7fe      	b.n	8001348 <NMI_Handler+0x4>

0800134a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800134e:	e7fe      	b.n	800134e <HardFault_Handler+0x4>

08001350 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001354:	e7fe      	b.n	8001354 <MemManage_Handler+0x4>

08001356 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800135a:	e7fe      	b.n	800135a <BusFault_Handler+0x4>

0800135c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001360:	e7fe      	b.n	8001360 <UsageFault_Handler+0x4>

08001362 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001374:	bf00      	nop
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
	...

08001380 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001384:	4802      	ldr	r0, [pc, #8]	; (8001390 <TIM6_DAC_IRQHandler+0x10>)
 8001386:	f006 fb97 	bl	8007ab8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	200004b4 	.word	0x200004b4

08001394 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001398:	4802      	ldr	r0, [pc, #8]	; (80013a4 <OTG_HS_IRQHandler+0x10>)
 800139a:	f003 fb88 	bl	8004aae <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	20005998 	.word	0x20005998

080013a8 <SPI5_IRQHandler>:

/**
  * @brief This function handles SPI5 global interrupt.
  */
void SPI5_IRQHandler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI5_IRQn 0 */

  /* USER CODE END SPI5_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi5);
 80013ac:	4802      	ldr	r0, [pc, #8]	; (80013b8 <SPI5_IRQHandler+0x10>)
 80013ae:	f006 f85d 	bl	800746c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI5_IRQn 1 */

  /* USER CODE END SPI5_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000450 	.word	0x20000450

080013bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b086      	sub	sp, #24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013c4:	4a14      	ldr	r2, [pc, #80]	; (8001418 <_sbrk+0x5c>)
 80013c6:	4b15      	ldr	r3, [pc, #84]	; (800141c <_sbrk+0x60>)
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013d0:	4b13      	ldr	r3, [pc, #76]	; (8001420 <_sbrk+0x64>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d102      	bne.n	80013de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013d8:	4b11      	ldr	r3, [pc, #68]	; (8001420 <_sbrk+0x64>)
 80013da:	4a12      	ldr	r2, [pc, #72]	; (8001424 <_sbrk+0x68>)
 80013dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013de:	4b10      	ldr	r3, [pc, #64]	; (8001420 <_sbrk+0x64>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4413      	add	r3, r2
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d207      	bcs.n	80013fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013ec:	f00d fd6e 	bl	800eecc <__errno>
 80013f0:	4603      	mov	r3, r0
 80013f2:	220c      	movs	r2, #12
 80013f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013f6:	f04f 33ff 	mov.w	r3, #4294967295
 80013fa:	e009      	b.n	8001410 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013fc:	4b08      	ldr	r3, [pc, #32]	; (8001420 <_sbrk+0x64>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001402:	4b07      	ldr	r3, [pc, #28]	; (8001420 <_sbrk+0x64>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4413      	add	r3, r2
 800140a:	4a05      	ldr	r2, [pc, #20]	; (8001420 <_sbrk+0x64>)
 800140c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800140e:	68fb      	ldr	r3, [r7, #12]
}
 8001410:	4618      	mov	r0, r3
 8001412:	3718      	adds	r7, #24
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20030000 	.word	0x20030000
 800141c:	00000400 	.word	0x00000400
 8001420:	200004fc 	.word	0x200004fc
 8001424:	20005f18 	.word	0x20005f18

08001428 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <SystemInit+0x20>)
 800142e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001432:	4a05      	ldr	r2, [pc, #20]	; (8001448 <SystemInit+0x20>)
 8001434:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001438:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800144c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001484 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001450:	480d      	ldr	r0, [pc, #52]	; (8001488 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001452:	490e      	ldr	r1, [pc, #56]	; (800148c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001454:	4a0e      	ldr	r2, [pc, #56]	; (8001490 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001456:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001458:	e002      	b.n	8001460 <LoopCopyDataInit>

0800145a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800145a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800145c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800145e:	3304      	adds	r3, #4

08001460 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001460:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001462:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001464:	d3f9      	bcc.n	800145a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001466:	4a0b      	ldr	r2, [pc, #44]	; (8001494 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001468:	4c0b      	ldr	r4, [pc, #44]	; (8001498 <LoopFillZerobss+0x26>)
  movs r3, #0
 800146a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800146c:	e001      	b.n	8001472 <LoopFillZerobss>

0800146e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800146e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001470:	3204      	adds	r2, #4

08001472 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001472:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001474:	d3fb      	bcc.n	800146e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001476:	f7ff ffd7 	bl	8001428 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800147a:	f00d fd2d 	bl	800eed8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800147e:	f7ff fbe1 	bl	8000c44 <main>
  bx  lr    
 8001482:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001484:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001488:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800148c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001490:	08011420 	.word	0x08011420
  ldr r2, =_sbss
 8001494:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001498:	20005f14 	.word	0x20005f14

0800149c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800149c:	e7fe      	b.n	800149c <ADC_IRQHandler>

0800149e <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80014a2:	f000 fcf5 	bl	8001e90 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 80014a6:	20ca      	movs	r0, #202	; 0xca
 80014a8:	f000 f95d 	bl	8001766 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 80014ac:	20c3      	movs	r0, #195	; 0xc3
 80014ae:	f000 f967 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 80014b2:	2008      	movs	r0, #8
 80014b4:	f000 f964 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 80014b8:	2050      	movs	r0, #80	; 0x50
 80014ba:	f000 f961 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80014be:	20cf      	movs	r0, #207	; 0xcf
 80014c0:	f000 f951 	bl	8001766 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80014c4:	2000      	movs	r0, #0
 80014c6:	f000 f95b 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80014ca:	20c1      	movs	r0, #193	; 0xc1
 80014cc:	f000 f958 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80014d0:	2030      	movs	r0, #48	; 0x30
 80014d2:	f000 f955 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 80014d6:	20ed      	movs	r0, #237	; 0xed
 80014d8:	f000 f945 	bl	8001766 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 80014dc:	2064      	movs	r0, #100	; 0x64
 80014de:	f000 f94f 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 80014e2:	2003      	movs	r0, #3
 80014e4:	f000 f94c 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 80014e8:	2012      	movs	r0, #18
 80014ea:	f000 f949 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 80014ee:	2081      	movs	r0, #129	; 0x81
 80014f0:	f000 f946 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80014f4:	20e8      	movs	r0, #232	; 0xe8
 80014f6:	f000 f936 	bl	8001766 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 80014fa:	2085      	movs	r0, #133	; 0x85
 80014fc:	f000 f940 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001500:	2000      	movs	r0, #0
 8001502:	f000 f93d 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001506:	2078      	movs	r0, #120	; 0x78
 8001508:	f000 f93a 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 800150c:	20cb      	movs	r0, #203	; 0xcb
 800150e:	f000 f92a 	bl	8001766 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8001512:	2039      	movs	r0, #57	; 0x39
 8001514:	f000 f934 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8001518:	202c      	movs	r0, #44	; 0x2c
 800151a:	f000 f931 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800151e:	2000      	movs	r0, #0
 8001520:	f000 f92e 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8001524:	2034      	movs	r0, #52	; 0x34
 8001526:	f000 f92b 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 800152a:	2002      	movs	r0, #2
 800152c:	f000 f928 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8001530:	20f7      	movs	r0, #247	; 0xf7
 8001532:	f000 f918 	bl	8001766 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8001536:	2020      	movs	r0, #32
 8001538:	f000 f922 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 800153c:	20ea      	movs	r0, #234	; 0xea
 800153e:	f000 f912 	bl	8001766 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001542:	2000      	movs	r0, #0
 8001544:	f000 f91c 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001548:	2000      	movs	r0, #0
 800154a:	f000 f919 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 800154e:	20b1      	movs	r0, #177	; 0xb1
 8001550:	f000 f909 	bl	8001766 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001554:	2000      	movs	r0, #0
 8001556:	f000 f913 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 800155a:	201b      	movs	r0, #27
 800155c:	f000 f910 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001560:	20b6      	movs	r0, #182	; 0xb6
 8001562:	f000 f900 	bl	8001766 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001566:	200a      	movs	r0, #10
 8001568:	f000 f90a 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 800156c:	20a2      	movs	r0, #162	; 0xa2
 800156e:	f000 f907 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 8001572:	20c0      	movs	r0, #192	; 0xc0
 8001574:	f000 f8f7 	bl	8001766 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001578:	2010      	movs	r0, #16
 800157a:	f000 f901 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 800157e:	20c1      	movs	r0, #193	; 0xc1
 8001580:	f000 f8f1 	bl	8001766 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001584:	2010      	movs	r0, #16
 8001586:	f000 f8fb 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 800158a:	20c5      	movs	r0, #197	; 0xc5
 800158c:	f000 f8eb 	bl	8001766 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8001590:	2045      	movs	r0, #69	; 0x45
 8001592:	f000 f8f5 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 8001596:	2015      	movs	r0, #21
 8001598:	f000 f8f2 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 800159c:	20c7      	movs	r0, #199	; 0xc7
 800159e:	f000 f8e2 	bl	8001766 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 80015a2:	2090      	movs	r0, #144	; 0x90
 80015a4:	f000 f8ec 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 80015a8:	2036      	movs	r0, #54	; 0x36
 80015aa:	f000 f8dc 	bl	8001766 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 80015ae:	20c8      	movs	r0, #200	; 0xc8
 80015b0:	f000 f8e6 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 80015b4:	20f2      	movs	r0, #242	; 0xf2
 80015b6:	f000 f8d6 	bl	8001766 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80015ba:	2000      	movs	r0, #0
 80015bc:	f000 f8e0 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80015c0:	20b0      	movs	r0, #176	; 0xb0
 80015c2:	f000 f8d0 	bl	8001766 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80015c6:	20c2      	movs	r0, #194	; 0xc2
 80015c8:	f000 f8da 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80015cc:	20b6      	movs	r0, #182	; 0xb6
 80015ce:	f000 f8ca 	bl	8001766 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80015d2:	200a      	movs	r0, #10
 80015d4:	f000 f8d4 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 80015d8:	20a7      	movs	r0, #167	; 0xa7
 80015da:	f000 f8d1 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 80015de:	2027      	movs	r0, #39	; 0x27
 80015e0:	f000 f8ce 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80015e4:	2004      	movs	r0, #4
 80015e6:	f000 f8cb 	bl	8001780 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 80015ea:	202a      	movs	r0, #42	; 0x2a
 80015ec:	f000 f8bb 	bl	8001766 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80015f0:	2000      	movs	r0, #0
 80015f2:	f000 f8c5 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80015f6:	2000      	movs	r0, #0
 80015f8:	f000 f8c2 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80015fc:	2000      	movs	r0, #0
 80015fe:	f000 f8bf 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8001602:	20ef      	movs	r0, #239	; 0xef
 8001604:	f000 f8bc 	bl	8001780 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8001608:	202b      	movs	r0, #43	; 0x2b
 800160a:	f000 f8ac 	bl	8001766 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800160e:	2000      	movs	r0, #0
 8001610:	f000 f8b6 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001614:	2000      	movs	r0, #0
 8001616:	f000 f8b3 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 800161a:	2001      	movs	r0, #1
 800161c:	f000 f8b0 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8001620:	203f      	movs	r0, #63	; 0x3f
 8001622:	f000 f8ad 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8001626:	20f6      	movs	r0, #246	; 0xf6
 8001628:	f000 f89d 	bl	8001766 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 800162c:	2001      	movs	r0, #1
 800162e:	f000 f8a7 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001632:	2000      	movs	r0, #0
 8001634:	f000 f8a4 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001638:	2006      	movs	r0, #6
 800163a:	f000 f8a1 	bl	8001780 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 800163e:	202c      	movs	r0, #44	; 0x2c
 8001640:	f000 f891 	bl	8001766 <ili9341_WriteReg>
  LCD_Delay(200);
 8001644:	20c8      	movs	r0, #200	; 0xc8
 8001646:	f000 fd11 	bl	800206c <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 800164a:	2026      	movs	r0, #38	; 0x26
 800164c:	f000 f88b 	bl	8001766 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001650:	2001      	movs	r0, #1
 8001652:	f000 f895 	bl	8001780 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8001656:	20e0      	movs	r0, #224	; 0xe0
 8001658:	f000 f885 	bl	8001766 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 800165c:	200f      	movs	r0, #15
 800165e:	f000 f88f 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8001662:	2029      	movs	r0, #41	; 0x29
 8001664:	f000 f88c 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001668:	2024      	movs	r0, #36	; 0x24
 800166a:	f000 f889 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 800166e:	200c      	movs	r0, #12
 8001670:	f000 f886 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8001674:	200e      	movs	r0, #14
 8001676:	f000 f883 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800167a:	2009      	movs	r0, #9
 800167c:	f000 f880 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8001680:	204e      	movs	r0, #78	; 0x4e
 8001682:	f000 f87d 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001686:	2078      	movs	r0, #120	; 0x78
 8001688:	f000 f87a 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 800168c:	203c      	movs	r0, #60	; 0x3c
 800168e:	f000 f877 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001692:	2009      	movs	r0, #9
 8001694:	f000 f874 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8001698:	2013      	movs	r0, #19
 800169a:	f000 f871 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800169e:	2005      	movs	r0, #5
 80016a0:	f000 f86e 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 80016a4:	2017      	movs	r0, #23
 80016a6:	f000 f86b 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80016aa:	2011      	movs	r0, #17
 80016ac:	f000 f868 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80016b0:	2000      	movs	r0, #0
 80016b2:	f000 f865 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 80016b6:	20e1      	movs	r0, #225	; 0xe1
 80016b8:	f000 f855 	bl	8001766 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80016bc:	2000      	movs	r0, #0
 80016be:	f000 f85f 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80016c2:	2016      	movs	r0, #22
 80016c4:	f000 f85c 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80016c8:	201b      	movs	r0, #27
 80016ca:	f000 f859 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80016ce:	2004      	movs	r0, #4
 80016d0:	f000 f856 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80016d4:	2011      	movs	r0, #17
 80016d6:	f000 f853 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 80016da:	2007      	movs	r0, #7
 80016dc:	f000 f850 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 80016e0:	2031      	movs	r0, #49	; 0x31
 80016e2:	f000 f84d 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 80016e6:	2033      	movs	r0, #51	; 0x33
 80016e8:	f000 f84a 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 80016ec:	2042      	movs	r0, #66	; 0x42
 80016ee:	f000 f847 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80016f2:	2005      	movs	r0, #5
 80016f4:	f000 f844 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80016f8:	200c      	movs	r0, #12
 80016fa:	f000 f841 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 80016fe:	200a      	movs	r0, #10
 8001700:	f000 f83e 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8001704:	2028      	movs	r0, #40	; 0x28
 8001706:	f000 f83b 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 800170a:	202f      	movs	r0, #47	; 0x2f
 800170c:	f000 f838 	bl	8001780 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8001710:	200f      	movs	r0, #15
 8001712:	f000 f835 	bl	8001780 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8001716:	2011      	movs	r0, #17
 8001718:	f000 f825 	bl	8001766 <ili9341_WriteReg>
  LCD_Delay(200);
 800171c:	20c8      	movs	r0, #200	; 0xc8
 800171e:	f000 fca5 	bl	800206c <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001722:	2029      	movs	r0, #41	; 0x29
 8001724:	f000 f81f 	bl	8001766 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001728:	202c      	movs	r0, #44	; 0x2c
 800172a:	f000 f81c 	bl	8001766 <ili9341_WriteReg>
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}

08001732 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8001736:	f000 fbab 	bl	8001e90 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 800173a:	2103      	movs	r1, #3
 800173c:	20d3      	movs	r0, #211	; 0xd3
 800173e:	f000 f82c 	bl	800179a <ili9341_ReadData>
 8001742:	4603      	mov	r3, r0
 8001744:	b29b      	uxth	r3, r3
}
 8001746:	4618      	mov	r0, r3
 8001748:	bd80      	pop	{r7, pc}

0800174a <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800174e:	2029      	movs	r0, #41	; 0x29
 8001750:	f000 f809 	bl	8001766 <ili9341_WriteReg>
}
 8001754:	bf00      	nop
 8001756:	bd80      	pop	{r7, pc}

08001758 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 800175c:	2028      	movs	r0, #40	; 0x28
 800175e:	f000 f802 	bl	8001766 <ili9341_WriteReg>
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}

08001766 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b082      	sub	sp, #8
 800176a:	af00      	add	r7, sp, #0
 800176c:	4603      	mov	r3, r0
 800176e:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	4618      	mov	r0, r3
 8001774:	f000 fc26 	bl	8001fc4 <LCD_IO_WriteReg>
}
 8001778:	bf00      	nop
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 800178a:	88fb      	ldrh	r3, [r7, #6]
 800178c:	4618      	mov	r0, r3
 800178e:	f000 fbf7 	bl	8001f80 <LCD_IO_WriteData>
}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b082      	sub	sp, #8
 800179e:	af00      	add	r7, sp, #0
 80017a0:	4603      	mov	r3, r0
 80017a2:	460a      	mov	r2, r1
 80017a4:	80fb      	strh	r3, [r7, #6]
 80017a6:	4613      	mov	r3, r2
 80017a8:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80017aa:	797a      	ldrb	r2, [r7, #5]
 80017ac:	88fb      	ldrh	r3, [r7, #6]
 80017ae:	4611      	mov	r1, r2
 80017b0:	4618      	mov	r0, r3
 80017b2:	f000 fc29 	bl	8002008 <LCD_IO_ReadData>
 80017b6:	4603      	mov	r3, r0
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}

080017c0 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 80017c4:	23f0      	movs	r3, #240	; 0xf0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 80017d4:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80017d8:	4618      	mov	r0, r3
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b084      	sub	sp, #16
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	4603      	mov	r3, r0
 80017ea:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80017ec:	2300      	movs	r3, #0
 80017ee:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 80017f0:	f000 fc48 	bl	8002084 <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 80017f4:	88fb      	ldrh	r3, [r7, #6]
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 80017fa:	f107 030f 	add.w	r3, r7, #15
 80017fe:	2201      	movs	r2, #1
 8001800:	2120      	movs	r1, #32
 8001802:	4618      	mov	r0, r3
 8001804:	f000 fc8a 	bl	800211c <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 8001808:	88fb      	ldrh	r3, [r7, #6]
 800180a:	0a1b      	lsrs	r3, r3, #8
 800180c:	b29b      	uxth	r3, r3
 800180e:	b2db      	uxtb	r3, r3
 8001810:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8001812:	f107 030f 	add.w	r3, r7, #15
 8001816:	2201      	movs	r2, #1
 8001818:	2123      	movs	r1, #35	; 0x23
 800181a:	4618      	mov	r0, r3
 800181c:	f000 fc7e 	bl	800211c <GYRO_IO_Write>
}
 8001820:	bf00      	nop
 8001822:	3710      	adds	r7, #16
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b082      	sub	sp, #8
 800183a:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 800183c:	f000 fc22 	bl	8002084 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 8001840:	1dfb      	adds	r3, r7, #7
 8001842:	2201      	movs	r2, #1
 8001844:	210f      	movs	r1, #15
 8001846:	4618      	mov	r0, r3
 8001848:	f000 fc9a 	bl	8002180 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 800184c:	79fb      	ldrb	r3, [r7, #7]
}
 800184e:	4618      	mov	r0, r3
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b082      	sub	sp, #8
 800185a:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800185c:	1dfb      	adds	r3, r7, #7
 800185e:	2201      	movs	r2, #1
 8001860:	2124      	movs	r1, #36	; 0x24
 8001862:	4618      	mov	r0, r3
 8001864:	f000 fc8c 	bl	8002180 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8001868:	79fb      	ldrb	r3, [r7, #7]
 800186a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800186e:	b2db      	uxtb	r3, r3
 8001870:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001872:	1dfb      	adds	r3, r7, #7
 8001874:	2201      	movs	r2, #1
 8001876:	2124      	movs	r1, #36	; 0x24
 8001878:	4618      	mov	r0, r3
 800187a:	f000 fc4f 	bl	800211c <GYRO_IO_Write>
}
 800187e:	bf00      	nop
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 8001886:	b580      	push	{r7, lr}
 8001888:	b084      	sub	sp, #16
 800188a:	af00      	add	r7, sp, #0
 800188c:	4603      	mov	r3, r0
 800188e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001890:	2300      	movs	r3, #0
 8001892:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8001894:	88fb      	ldrh	r3, [r7, #6]
 8001896:	b2db      	uxtb	r3, r3
 8001898:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 800189a:	f107 030f 	add.w	r3, r7, #15
 800189e:	2201      	movs	r2, #1
 80018a0:	2120      	movs	r1, #32
 80018a2:	4618      	mov	r0, r3
 80018a4:	f000 fc3a 	bl	800211c <GYRO_IO_Write>
}
 80018a8:	bf00      	nop
 80018aa:	3710      	adds	r7, #16
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	4603      	mov	r3, r0
 80018b8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 80018ba:	2300      	movs	r3, #0
 80018bc:	73fb      	strb	r3, [r7, #15]
 80018be:	2300      	movs	r3, #0
 80018c0:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80018c2:	f107 030f 	add.w	r3, r7, #15
 80018c6:	2201      	movs	r2, #1
 80018c8:	2130      	movs	r1, #48	; 0x30
 80018ca:	4618      	mov	r0, r3
 80018cc:	f000 fc58 	bl	8002180 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 80018d0:	f107 030e 	add.w	r3, r7, #14
 80018d4:	2201      	movs	r2, #1
 80018d6:	2122      	movs	r1, #34	; 0x22
 80018d8:	4618      	mov	r0, r3
 80018da:	f000 fc51 	bl	8002180 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 80018de:	7bfb      	ldrb	r3, [r7, #15]
 80018e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 80018e8:	88fb      	ldrh	r3, [r7, #6]
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	121b      	asrs	r3, r3, #8
 80018ee:	b25a      	sxtb	r2, r3
 80018f0:	7bfb      	ldrb	r3, [r7, #15]
 80018f2:	b25b      	sxtb	r3, r3
 80018f4:	4313      	orrs	r3, r2
 80018f6:	b25b      	sxtb	r3, r3
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 80018fc:	7bbb      	ldrb	r3, [r7, #14]
 80018fe:	f023 0320 	bic.w	r3, r3, #32
 8001902:	b2db      	uxtb	r3, r3
 8001904:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 8001906:	88fb      	ldrh	r3, [r7, #6]
 8001908:	b2da      	uxtb	r2, r3
 800190a:	7bbb      	ldrb	r3, [r7, #14]
 800190c:	4313      	orrs	r3, r2
 800190e:	b2db      	uxtb	r3, r3
 8001910:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8001912:	f107 030f 	add.w	r3, r7, #15
 8001916:	2201      	movs	r2, #1
 8001918:	2130      	movs	r1, #48	; 0x30
 800191a:	4618      	mov	r0, r3
 800191c:	f000 fbfe 	bl	800211c <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8001920:	f107 030e 	add.w	r3, r7, #14
 8001924:	2201      	movs	r2, #1
 8001926:	2122      	movs	r1, #34	; 0x22
 8001928:	4618      	mov	r0, r3
 800192a:	f000 fbf7 	bl	800211c <GYRO_IO_Write>
}
 800192e:	bf00      	nop
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 8001936:	b580      	push	{r7, lr}
 8001938:	b084      	sub	sp, #16
 800193a:	af00      	add	r7, sp, #0
 800193c:	4603      	mov	r3, r0
 800193e:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001940:	f107 030f 	add.w	r3, r7, #15
 8001944:	2201      	movs	r2, #1
 8001946:	2122      	movs	r1, #34	; 0x22
 8001948:	4618      	mov	r0, r3
 800194a:	f000 fc19 	bl	8002180 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 800194e:	79fb      	ldrb	r3, [r7, #7]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d10a      	bne.n	800196a <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 8001954:	7bfb      	ldrb	r3, [r7, #15]
 8001956:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800195a:	b2db      	uxtb	r3, r3
 800195c:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 800195e:	7bfb      	ldrb	r3, [r7, #15]
 8001960:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001964:	b2db      	uxtb	r3, r3
 8001966:	73fb      	strb	r3, [r7, #15]
 8001968:	e00c      	b.n	8001984 <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d109      	bne.n	8001984 <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8001970:	7bfb      	ldrb	r3, [r7, #15]
 8001972:	f023 0308 	bic.w	r3, r3, #8
 8001976:	b2db      	uxtb	r3, r3
 8001978:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 800197a:	7bfb      	ldrb	r3, [r7, #15]
 800197c:	f043 0308 	orr.w	r3, r3, #8
 8001980:	b2db      	uxtb	r3, r3
 8001982:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8001984:	f107 030f 	add.w	r3, r7, #15
 8001988:	2201      	movs	r2, #1
 800198a:	2122      	movs	r1, #34	; 0x22
 800198c:	4618      	mov	r0, r3
 800198e:	f000 fbc5 	bl	800211c <GYRO_IO_Write>
}
 8001992:	bf00      	nop
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 800199a:	b580      	push	{r7, lr}
 800199c:	b084      	sub	sp, #16
 800199e:	af00      	add	r7, sp, #0
 80019a0:	4603      	mov	r3, r0
 80019a2:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80019a4:	f107 030f 	add.w	r3, r7, #15
 80019a8:	2201      	movs	r2, #1
 80019aa:	2122      	movs	r1, #34	; 0x22
 80019ac:	4618      	mov	r0, r3
 80019ae:	f000 fbe7 	bl	8002180 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 80019b2:	79fb      	ldrb	r3, [r7, #7]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d107      	bne.n	80019c8 <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 80019b8:	7bfb      	ldrb	r3, [r7, #15]
 80019ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 80019c2:	7bfb      	ldrb	r3, [r7, #15]
 80019c4:	73fb      	strb	r3, [r7, #15]
 80019c6:	e009      	b.n	80019dc <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 80019c8:	79fb      	ldrb	r3, [r7, #7]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d106      	bne.n	80019dc <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 80019ce:	7bfb      	ldrb	r3, [r7, #15]
 80019d0:	f023 0308 	bic.w	r3, r3, #8
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 80019d8:	7bfb      	ldrb	r3, [r7, #15]
 80019da:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 80019dc:	f107 030f 	add.w	r3, r7, #15
 80019e0:	2201      	movs	r2, #1
 80019e2:	2122      	movs	r1, #34	; 0x22
 80019e4:	4618      	mov	r0, r3
 80019e6:	f000 fb99 	bl	800211c <GYRO_IO_Write>
}
 80019ea:	bf00      	nop
 80019ec:	3710      	adds	r7, #16
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b084      	sub	sp, #16
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	4603      	mov	r3, r0
 80019fa:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80019fc:	f107 030f 	add.w	r3, r7, #15
 8001a00:	2201      	movs	r2, #1
 8001a02:	2121      	movs	r1, #33	; 0x21
 8001a04:	4618      	mov	r0, r3
 8001a06:	f000 fbbb 	bl	8002180 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 8001a0a:	7bfb      	ldrb	r3, [r7, #15]
 8001a0c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8001a14:	7bfa      	ldrb	r2, [r7, #15]
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8001a1e:	f107 030f 	add.w	r3, r7, #15
 8001a22:	2201      	movs	r2, #1
 8001a24:	2121      	movs	r1, #33	; 0x21
 8001a26:	4618      	mov	r0, r3
 8001a28:	f000 fb78 	bl	800211c <GYRO_IO_Write>
}
 8001a2c:	bf00      	nop
 8001a2e:	3710      	adds	r7, #16
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001a3e:	f107 030f 	add.w	r3, r7, #15
 8001a42:	2201      	movs	r2, #1
 8001a44:	2124      	movs	r1, #36	; 0x24
 8001a46:	4618      	mov	r0, r3
 8001a48:	f000 fb9a 	bl	8002180 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 8001a4c:	7bfb      	ldrb	r3, [r7, #15]
 8001a4e:	f023 0310 	bic.w	r3, r3, #16
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8001a56:	7bfa      	ldrb	r2, [r7, #15]
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8001a60:	f107 030f 	add.w	r3, r7, #15
 8001a64:	2201      	movs	r2, #1
 8001a66:	2124      	movs	r1, #36	; 0x24
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f000 fb57 	bl	800211c <GYRO_IO_Write>
}
 8001a6e:	bf00      	nop
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
	...

08001a78 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b090      	sub	sp, #64	; 0x40
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
	uint8_t tmpbuffer[6] ={0};
 8001a80:	2300      	movs	r3, #0
 8001a82:	633b      	str	r3, [r7, #48]	; 0x30
 8001a84:	2300      	movs	r3, #0
 8001a86:	86bb      	strh	r3, [r7, #52]	; 0x34
	int16_t RawData[3] = {0};
 8001a88:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	809a      	strh	r2, [r3, #4]
	uint8_t tmpreg = 0;
 8001a92:	2300      	movs	r3, #0
 8001a94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	float sensitivity = 0;
 8001a98:	f04f 0300 	mov.w	r3, #0
 8001a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
	int i =0;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	63bb      	str	r3, [r7, #56]	; 0x38
	float tem[3] = {0};
 8001aa2:	f107 0318 	add.w	r3, r7, #24
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	605a      	str	r2, [r3, #4]
 8001aac:	609a      	str	r2, [r3, #8]
	float S[3] = {0};
 8001aae:	f107 030c 	add.w	r3, r7, #12
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	605a      	str	r2, [r3, #4]
 8001ab8:	609a      	str	r2, [r3, #8]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8001aba:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8001abe:	2201      	movs	r2, #1
 8001ac0:	2123      	movs	r1, #35	; 0x23
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f000 fb5c 	bl	8002180 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8001ac8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001acc:	2206      	movs	r2, #6
 8001ace:	2128      	movs	r1, #40	; 0x28
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f000 fb55 	bl	8002180 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8001ad6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d123      	bne.n	8001b2a <L3GD20_ReadXYZAngRate+0xb2>
  {
    for(i=0; i<3; i++)
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ae6:	e01c      	b.n	8001b22 <L3GD20_ReadXYZAngRate+0xaa>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8001ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	3301      	adds	r3, #1
 8001aee:	3340      	adds	r3, #64	; 0x40
 8001af0:	443b      	add	r3, r7
 8001af2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	021b      	lsls	r3, r3, #8
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	3340      	adds	r3, #64	; 0x40
 8001b02:	443b      	add	r3, r7
 8001b04:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	4413      	add	r3, r2
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	b21a      	sxth	r2, r3
 8001b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	3340      	adds	r3, #64	; 0x40
 8001b16:	443b      	add	r3, r7
 8001b18:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8001b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b1e:	3301      	adds	r3, #1
 8001b20:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	dddf      	ble.n	8001ae8 <L3GD20_ReadXYZAngRate+0x70>
 8001b28:	e022      	b.n	8001b70 <L3GD20_ReadXYZAngRate+0xf8>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b2e:	e01c      	b.n	8001b6a <L3GD20_ReadXYZAngRate+0xf2>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 8001b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	3340      	adds	r3, #64	; 0x40
 8001b36:	443b      	add	r3, r7
 8001b38:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	021b      	lsls	r3, r3, #8
 8001b40:	b29a      	uxth	r2, r3
 8001b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	3301      	adds	r3, #1
 8001b48:	3340      	adds	r3, #64	; 0x40
 8001b4a:	443b      	add	r3, r7
 8001b4c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	4413      	add	r3, r2
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	b21a      	sxth	r2, r3
 8001b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	3340      	adds	r3, #64	; 0x40
 8001b5e:	443b      	add	r3, r7
 8001b60:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8001b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b66:	3301      	adds	r3, #1
 8001b68:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	dddf      	ble.n	8001b30 <L3GD20_ReadXYZAngRate+0xb8>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8001b70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b74:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001b78:	2b20      	cmp	r3, #32
 8001b7a:	d00c      	beq.n	8001b96 <L3GD20_ReadXYZAngRate+0x11e>
 8001b7c:	2b20      	cmp	r3, #32
 8001b7e:	dc0d      	bgt.n	8001b9c <L3GD20_ReadXYZAngRate+0x124>
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d002      	beq.n	8001b8a <L3GD20_ReadXYZAngRate+0x112>
 8001b84:	2b10      	cmp	r3, #16
 8001b86:	d003      	beq.n	8001b90 <L3GD20_ReadXYZAngRate+0x118>
 8001b88:	e008      	b.n	8001b9c <L3GD20_ReadXYZAngRate+0x124>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 8001b8a:	4b4f      	ldr	r3, [pc, #316]	; (8001cc8 <L3GD20_ReadXYZAngRate+0x250>)
 8001b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
    break;
 8001b8e:	e005      	b.n	8001b9c <L3GD20_ReadXYZAngRate+0x124>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 8001b90:	4b4e      	ldr	r3, [pc, #312]	; (8001ccc <L3GD20_ReadXYZAngRate+0x254>)
 8001b92:	63fb      	str	r3, [r7, #60]	; 0x3c
    break;
 8001b94:	e002      	b.n	8001b9c <L3GD20_ReadXYZAngRate+0x124>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8001b96:	4b4e      	ldr	r3, [pc, #312]	; (8001cd0 <L3GD20_ReadXYZAngRate+0x258>)
 8001b98:	63fb      	str	r3, [r7, #60]	; 0x3c
    break;
 8001b9a:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ba0:	e085      	b.n	8001cae <L3GD20_ReadXYZAngRate+0x236>
  {
	  S[i] = tem[i];
 8001ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	3340      	adds	r3, #64	; 0x40
 8001ba8:	443b      	add	r3, r7
 8001baa:	3b28      	subs	r3, #40	; 0x28
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	3340      	adds	r3, #64	; 0x40
 8001bb4:	443b      	add	r3, r7
 8001bb6:	3b34      	subs	r3, #52	; 0x34
 8001bb8:	601a      	str	r2, [r3, #0]
	  tem[i] = (float)(RawData[i] * sensitivity * 0.001);
 8001bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	3340      	adds	r3, #64	; 0x40
 8001bc0:	443b      	add	r3, r7
 8001bc2:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 8001bc6:	ee07 3a90 	vmov	s15, r3
 8001bca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bce:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bd6:	ee17 0a90 	vmov	r0, s15
 8001bda:	f7fe fdef 	bl	80007bc <__aeabi_f2d>
 8001bde:	a338      	add	r3, pc, #224	; (adr r3, 8001cc0 <L3GD20_ReadXYZAngRate+0x248>)
 8001be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be4:	f7fe fb5c 	bl	80002a0 <__aeabi_dmul>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	4610      	mov	r0, r2
 8001bee:	4619      	mov	r1, r3
 8001bf0:	f7fe fe3c 	bl	800086c <__aeabi_d2f>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	3340      	adds	r3, #64	; 0x40
 8001bfc:	443b      	add	r3, r7
 8001bfe:	3b28      	subs	r3, #40	; 0x28
 8001c00:	601a      	str	r2, [r3, #0]
	  if ((tem[i] < 1 && tem[i] > 0) || (tem[i] > -1 && tem[i] < 0)) {
 8001c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	3340      	adds	r3, #64	; 0x40
 8001c08:	443b      	add	r3, r7
 8001c0a:	3b28      	subs	r3, #40	; 0x28
 8001c0c:	edd3 7a00 	vldr	s15, [r3]
 8001c10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c1c:	d50b      	bpl.n	8001c36 <L3GD20_ReadXYZAngRate+0x1be>
 8001c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	3340      	adds	r3, #64	; 0x40
 8001c24:	443b      	add	r3, r7
 8001c26:	3b28      	subs	r3, #40	; 0x28
 8001c28:	edd3 7a00 	vldr	s15, [r3]
 8001c2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c34:	dc19      	bgt.n	8001c6a <L3GD20_ReadXYZAngRate+0x1f2>
 8001c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	3340      	adds	r3, #64	; 0x40
 8001c3c:	443b      	add	r3, r7
 8001c3e:	3b28      	subs	r3, #40	; 0x28
 8001c40:	edd3 7a00 	vldr	s15, [r3]
 8001c44:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001c48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c50:	dd14      	ble.n	8001c7c <L3GD20_ReadXYZAngRate+0x204>
 8001c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	3340      	adds	r3, #64	; 0x40
 8001c58:	443b      	add	r3, r7
 8001c5a:	3b28      	subs	r3, #40	; 0x28
 8001c5c:	edd3 7a00 	vldr	s15, [r3]
 8001c60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c68:	d508      	bpl.n	8001c7c <L3GD20_ReadXYZAngRate+0x204>
	      tem[i] = 0;
 8001c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	3340      	adds	r3, #64	; 0x40
 8001c70:	443b      	add	r3, r7
 8001c72:	3b28      	subs	r3, #40	; 0x28
 8001c74:	f04f 0200 	mov.w	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
 8001c7a:	e015      	b.n	8001ca8 <L3GD20_ReadXYZAngRate+0x230>
	  }
	  else {
		  pfData[i] = S[i] + tem[i];
 8001c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	3340      	adds	r3, #64	; 0x40
 8001c82:	443b      	add	r3, r7
 8001c84:	3b34      	subs	r3, #52	; 0x34
 8001c86:	ed93 7a00 	vldr	s14, [r3]
 8001c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	3340      	adds	r3, #64	; 0x40
 8001c90:	443b      	add	r3, r7
 8001c92:	3b28      	subs	r3, #40	; 0x28
 8001c94:	edd3 7a00 	vldr	s15, [r3]
 8001c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ca4:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8001ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001caa:	3301      	adds	r3, #1
 8001cac:	63bb      	str	r3, [r7, #56]	; 0x38
 8001cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	f77f af76 	ble.w	8001ba2 <L3GD20_ReadXYZAngRate+0x12a>
	  }
  }
}
 8001cb6:	bf00      	nop
 8001cb8:	bf00      	nop
 8001cba:	3740      	adds	r7, #64	; 0x40
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	d2f1a9fc 	.word	0xd2f1a9fc
 8001cc4:	3f50624d 	.word	0x3f50624d
 8001cc8:	410c0000 	.word	0x410c0000
 8001ccc:	418c0000 	.word	0x418c0000
 8001cd0:	428c0000 	.word	0x428c0000

08001cd4 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001cd8:	4819      	ldr	r0, [pc, #100]	; (8001d40 <SPIx_Init+0x6c>)
 8001cda:	f005 fcd1 	bl	8007680 <HAL_SPI_GetState>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d12b      	bne.n	8001d3c <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8001ce4:	4b16      	ldr	r3, [pc, #88]	; (8001d40 <SPIx_Init+0x6c>)
 8001ce6:	4a17      	ldr	r2, [pc, #92]	; (8001d44 <SPIx_Init+0x70>)
 8001ce8:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001cea:	4b15      	ldr	r3, [pc, #84]	; (8001d40 <SPIx_Init+0x6c>)
 8001cec:	2218      	movs	r2, #24
 8001cee:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001cf0:	4b13      	ldr	r3, [pc, #76]	; (8001d40 <SPIx_Init+0x6c>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001cf6:	4b12      	ldr	r3, [pc, #72]	; (8001d40 <SPIx_Init+0x6c>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001cfc:	4b10      	ldr	r3, [pc, #64]	; (8001d40 <SPIx_Init+0x6c>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001d02:	4b0f      	ldr	r3, [pc, #60]	; (8001d40 <SPIx_Init+0x6c>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001d08:	4b0d      	ldr	r3, [pc, #52]	; (8001d40 <SPIx_Init+0x6c>)
 8001d0a:	2207      	movs	r2, #7
 8001d0c:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001d0e:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <SPIx_Init+0x6c>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001d14:	4b0a      	ldr	r3, [pc, #40]	; (8001d40 <SPIx_Init+0x6c>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001d1a:	4b09      	ldr	r3, [pc, #36]	; (8001d40 <SPIx_Init+0x6c>)
 8001d1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d20:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001d22:	4b07      	ldr	r3, [pc, #28]	; (8001d40 <SPIx_Init+0x6c>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001d28:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <SPIx_Init+0x6c>)
 8001d2a:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d2e:	605a      	str	r2, [r3, #4]
  
    SPIx_MspInit(&SpiHandle);
 8001d30:	4803      	ldr	r0, [pc, #12]	; (8001d40 <SPIx_Init+0x6c>)
 8001d32:	f000 f873 	bl	8001e1c <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001d36:	4802      	ldr	r0, [pc, #8]	; (8001d40 <SPIx_Init+0x6c>)
 8001d38:	f004 fef7 	bl	8006b2a <HAL_SPI_Init>
  } 
}
 8001d3c:	bf00      	nop
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	20000500 	.word	0x20000500
 8001d44:	40015000 	.word	0x40015000

08001d48 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8001d52:	2300      	movs	r3, #0
 8001d54:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;
  
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8001d56:	79fb      	ldrb	r3, [r7, #7]
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <SPIx_Read+0x38>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f107 0108 	add.w	r1, r7, #8
 8001d62:	4808      	ldr	r0, [pc, #32]	; (8001d84 <SPIx_Read+0x3c>)
 8001d64:	f005 f8ce 	bl	8006f04 <HAL_SPI_Receive>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001d6c:	7bfb      	ldrb	r3, [r7, #15]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001d72:	f000 f847 	bl	8001e04 <SPIx_Error>
  }
  
  return readvalue;
 8001d76:	68bb      	ldr	r3, [r7, #8]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3710      	adds	r7, #16
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	20000070 	.word	0x20000070
 8001d84:	20000500 	.word	0x20000500

08001d88 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001d92:	2300      	movs	r3, #0
 8001d94:	73fb      	strb	r3, [r7, #15]
  
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8001d96:	4b09      	ldr	r3, [pc, #36]	; (8001dbc <SPIx_Write+0x34>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	1db9      	adds	r1, r7, #6
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	4808      	ldr	r0, [pc, #32]	; (8001dc0 <SPIx_Write+0x38>)
 8001da0:	f004 ff74 	bl	8006c8c <HAL_SPI_Transmit>
 8001da4:	4603      	mov	r3, r0
 8001da6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8001da8:	7bfb      	ldrb	r3, [r7, #15]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001dae:	f000 f829 	bl	8001e04 <SPIx_Error>
  }
}
 8001db2:	bf00      	nop
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	20000070 	.word	0x20000070
 8001dc0:	20000500 	.word	0x20000500

08001dc4 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte: Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af02      	add	r7, sp, #8
 8001dca:	4603      	mov	r3, r0
 8001dcc:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8001dd2:	4b0a      	ldr	r3, [pc, #40]	; (8001dfc <SPIx_WriteRead+0x38>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f107 020f 	add.w	r2, r7, #15
 8001dda:	1df9      	adds	r1, r7, #7
 8001ddc:	9300      	str	r3, [sp, #0]
 8001dde:	2301      	movs	r3, #1
 8001de0:	4807      	ldr	r0, [pc, #28]	; (8001e00 <SPIx_WriteRead+0x3c>)
 8001de2:	f005 f9a0 	bl	8007126 <HAL_SPI_TransmitReceive>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8001dec:	f000 f80a 	bl	8001e04 <SPIx_Error>
  }
  
  return receivedbyte;
 8001df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	20000070 	.word	0x20000070
 8001e00:	20000500 	.word	0x20000500

08001e04 <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001e08:	4803      	ldr	r0, [pc, #12]	; (8001e18 <SPIx_Error+0x14>)
 8001e0a:	f004 ff17 	bl	8006c3c <HAL_SPI_DeInit>
  
  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8001e0e:	f7ff ff61 	bl	8001cd4 <SPIx_Init>
}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20000500 	.word	0x20000500

08001e1c <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b08a      	sub	sp, #40	; 0x28
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8001e24:	2300      	movs	r3, #0
 8001e26:	613b      	str	r3, [r7, #16]
 8001e28:	4b17      	ldr	r3, [pc, #92]	; (8001e88 <SPIx_MspInit+0x6c>)
 8001e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2c:	4a16      	ldr	r2, [pc, #88]	; (8001e88 <SPIx_MspInit+0x6c>)
 8001e2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e32:	6453      	str	r3, [r2, #68]	; 0x44
 8001e34:	4b14      	ldr	r3, [pc, #80]	; (8001e88 <SPIx_MspInit+0x6c>)
 8001e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e3c:	613b      	str	r3, [r7, #16]
 8001e3e:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001e40:	2300      	movs	r3, #0
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	4b10      	ldr	r3, [pc, #64]	; (8001e88 <SPIx_MspInit+0x6c>)
 8001e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e48:	4a0f      	ldr	r2, [pc, #60]	; (8001e88 <SPIx_MspInit+0x6c>)
 8001e4a:	f043 0320 	orr.w	r3, r3, #32
 8001e4e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e50:	4b0d      	ldr	r3, [pc, #52]	; (8001e88 <SPIx_MspInit+0x6c>)
 8001e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e54:	f003 0320 	and.w	r3, r3, #32
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8001e5c:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001e60:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001e62:	2302      	movs	r3, #2
 8001e64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001e66:	2302      	movs	r3, #2
 8001e68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001e6e:	2305      	movs	r3, #5
 8001e70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8001e72:	f107 0314 	add.w	r3, r7, #20
 8001e76:	4619      	mov	r1, r3
 8001e78:	4804      	ldr	r0, [pc, #16]	; (8001e8c <SPIx_MspInit+0x70>)
 8001e7a:	f001 ff1d 	bl	8003cb8 <HAL_GPIO_Init>
}
 8001e7e:	bf00      	nop
 8001e80:	3728      	adds	r7, #40	; 0x28
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	40021400 	.word	0x40021400

08001e90 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b088      	sub	sp, #32
 8001e94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8001e96:	4b36      	ldr	r3, [pc, #216]	; (8001f70 <LCD_IO_Init+0xe0>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d164      	bne.n	8001f68 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1; 
 8001e9e:	4b34      	ldr	r3, [pc, #208]	; (8001f70 <LCD_IO_Init+0xe0>)
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	701a      	strb	r2, [r3, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	60bb      	str	r3, [r7, #8]
 8001ea8:	4b32      	ldr	r3, [pc, #200]	; (8001f74 <LCD_IO_Init+0xe4>)
 8001eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eac:	4a31      	ldr	r2, [pc, #196]	; (8001f74 <LCD_IO_Init+0xe4>)
 8001eae:	f043 0308 	orr.w	r3, r3, #8
 8001eb2:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb4:	4b2f      	ldr	r3, [pc, #188]	; (8001f74 <LCD_IO_Init+0xe4>)
 8001eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb8:	f003 0308 	and.w	r3, r3, #8
 8001ebc:	60bb      	str	r3, [r7, #8]
 8001ebe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001ec0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ec4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001ece:	2302      	movs	r3, #2
 8001ed0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001ed2:	f107 030c 	add.w	r3, r7, #12
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4827      	ldr	r0, [pc, #156]	; (8001f78 <LCD_IO_Init+0xe8>)
 8001eda:	f001 feed 	bl	8003cb8 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	607b      	str	r3, [r7, #4]
 8001ee2:	4b24      	ldr	r3, [pc, #144]	; (8001f74 <LCD_IO_Init+0xe4>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	4a23      	ldr	r2, [pc, #140]	; (8001f74 <LCD_IO_Init+0xe4>)
 8001ee8:	f043 0308 	orr.w	r3, r3, #8
 8001eec:	6313      	str	r3, [r2, #48]	; 0x30
 8001eee:	4b21      	ldr	r3, [pc, #132]	; (8001f74 <LCD_IO_Init+0xe4>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	f003 0308 	and.w	r3, r3, #8
 8001ef6:	607b      	str	r3, [r7, #4]
 8001ef8:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001efa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001efe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001f00:	2301      	movs	r3, #1
 8001f02:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001f08:	2302      	movs	r3, #2
 8001f0a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001f0c:	f107 030c 	add.w	r3, r7, #12
 8001f10:	4619      	mov	r1, r3
 8001f12:	4819      	ldr	r0, [pc, #100]	; (8001f78 <LCD_IO_Init+0xe8>)
 8001f14:	f001 fed0 	bl	8003cb8 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001f18:	2300      	movs	r3, #0
 8001f1a:	603b      	str	r3, [r7, #0]
 8001f1c:	4b15      	ldr	r3, [pc, #84]	; (8001f74 <LCD_IO_Init+0xe4>)
 8001f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f20:	4a14      	ldr	r2, [pc, #80]	; (8001f74 <LCD_IO_Init+0xe4>)
 8001f22:	f043 0304 	orr.w	r3, r3, #4
 8001f26:	6313      	str	r3, [r2, #48]	; 0x30
 8001f28:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <LCD_IO_Init+0xe4>)
 8001f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2c:	f003 0304 	and.w	r3, r3, #4
 8001f30:	603b      	str	r3, [r7, #0]
 8001f32:	683b      	ldr	r3, [r7, #0]
    
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001f34:	2304      	movs	r3, #4
 8001f36:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001f40:	2302      	movs	r3, #2
 8001f42:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001f44:	f107 030c 	add.w	r3, r7, #12
 8001f48:	4619      	mov	r1, r3
 8001f4a:	480c      	ldr	r0, [pc, #48]	; (8001f7c <LCD_IO_Init+0xec>)
 8001f4c:	f001 feb4 	bl	8003cb8 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001f50:	2200      	movs	r2, #0
 8001f52:	2104      	movs	r1, #4
 8001f54:	4809      	ldr	r0, [pc, #36]	; (8001f7c <LCD_IO_Init+0xec>)
 8001f56:	f002 f967 	bl	8004228 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	2104      	movs	r1, #4
 8001f5e:	4807      	ldr	r0, [pc, #28]	; (8001f7c <LCD_IO_Init+0xec>)
 8001f60:	f002 f962 	bl	8004228 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8001f64:	f7ff feb6 	bl	8001cd4 <SPIx_Init>
  }
}
 8001f68:	bf00      	nop
 8001f6a:	3720      	adds	r7, #32
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	20000558 	.word	0x20000558
 8001f74:	40023800 	.word	0x40023800
 8001f78:	40020c00 	.word	0x40020c00
 8001f7c:	40020800 	.word	0x40020800

08001f80 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f90:	480a      	ldr	r0, [pc, #40]	; (8001fbc <LCD_IO_WriteData+0x3c>)
 8001f92:	f002 f949 	bl	8004228 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8001f96:	2200      	movs	r2, #0
 8001f98:	2104      	movs	r1, #4
 8001f9a:	4809      	ldr	r0, [pc, #36]	; (8001fc0 <LCD_IO_WriteData+0x40>)
 8001f9c:	f002 f944 	bl	8004228 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8001fa0:	88fb      	ldrh	r3, [r7, #6]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff fef0 	bl	8001d88 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001fa8:	2201      	movs	r2, #1
 8001faa:	2104      	movs	r1, #4
 8001fac:	4804      	ldr	r0, [pc, #16]	; (8001fc0 <LCD_IO_WriteData+0x40>)
 8001fae:	f002 f93b 	bl	8004228 <HAL_GPIO_WritePin>
}
 8001fb2:	bf00      	nop
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40020c00 	.word	0x40020c00
 8001fc0:	40020800 	.word	0x40020800

08001fc4 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001fce:	2200      	movs	r2, #0
 8001fd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fd4:	480a      	ldr	r0, [pc, #40]	; (8002000 <LCD_IO_WriteReg+0x3c>)
 8001fd6:	f002 f927 	bl	8004228 <HAL_GPIO_WritePin>
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001fda:	2200      	movs	r2, #0
 8001fdc:	2104      	movs	r1, #4
 8001fde:	4809      	ldr	r0, [pc, #36]	; (8002004 <LCD_IO_WriteReg+0x40>)
 8001fe0:	f002 f922 	bl	8004228 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8001fe4:	79fb      	ldrb	r3, [r7, #7]
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff fecd 	bl	8001d88 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001fee:	2201      	movs	r2, #1
 8001ff0:	2104      	movs	r1, #4
 8001ff2:	4804      	ldr	r0, [pc, #16]	; (8002004 <LCD_IO_WriteReg+0x40>)
 8001ff4:	f002 f918 	bl	8004228 <HAL_GPIO_WritePin>
}
 8001ff8:	bf00      	nop
 8001ffa:	3708      	adds	r7, #8
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40020c00 	.word	0x40020c00
 8002004:	40020800 	.word	0x40020800

08002008 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	4603      	mov	r3, r0
 8002010:	460a      	mov	r2, r1
 8002012:	80fb      	strh	r3, [r7, #6]
 8002014:	4613      	mov	r3, r2
 8002016:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8002018:	2300      	movs	r3, #0
 800201a:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 800201c:	2200      	movs	r2, #0
 800201e:	2104      	movs	r1, #4
 8002020:	4810      	ldr	r0, [pc, #64]	; (8002064 <LCD_IO_ReadData+0x5c>)
 8002022:	f002 f901 	bl	8004228 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002026:	2200      	movs	r2, #0
 8002028:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800202c:	480e      	ldr	r0, [pc, #56]	; (8002068 <LCD_IO_ReadData+0x60>)
 800202e:	f002 f8fb 	bl	8004228 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8002032:	88fb      	ldrh	r3, [r7, #6]
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff fea7 	bl	8001d88 <SPIx_Write>
  
  readvalue = SPIx_Read(ReadSize);
 800203a:	797b      	ldrb	r3, [r7, #5]
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff fe83 	bl	8001d48 <SPIx_Read>
 8002042:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002044:	2201      	movs	r2, #1
 8002046:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800204a:	4807      	ldr	r0, [pc, #28]	; (8002068 <LCD_IO_ReadData+0x60>)
 800204c:	f002 f8ec 	bl	8004228 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002050:	2201      	movs	r2, #1
 8002052:	2104      	movs	r1, #4
 8002054:	4803      	ldr	r0, [pc, #12]	; (8002064 <LCD_IO_ReadData+0x5c>)
 8002056:	f002 f8e7 	bl	8004228 <HAL_GPIO_WritePin>
  
  return readvalue;
 800205a:	68fb      	ldr	r3, [r7, #12]
}
 800205c:	4618      	mov	r0, r3
 800205e:	3710      	adds	r7, #16
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40020800 	.word	0x40020800
 8002068:	40020c00 	.word	0x40020c00

0800206c <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f001 f871 	bl	800315c <HAL_Delay>
}
 800207a:	bf00      	nop
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
	...

08002084 <GYRO_IO_Init>:

/**
  * @brief  Configures the Gyroscope SPI interface.
  */
void GYRO_IO_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b088      	sub	sp, #32
 8002088:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------*/
  /* Enable CS GPIO clock and Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 800208a:	2300      	movs	r3, #0
 800208c:	60bb      	str	r3, [r7, #8]
 800208e:	4b20      	ldr	r3, [pc, #128]	; (8002110 <GYRO_IO_Init+0x8c>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	4a1f      	ldr	r2, [pc, #124]	; (8002110 <GYRO_IO_Init+0x8c>)
 8002094:	f043 0304 	orr.w	r3, r3, #4
 8002098:	6313      	str	r3, [r2, #48]	; 0x30
 800209a:	4b1d      	ldr	r3, [pc, #116]	; (8002110 <GYRO_IO_Init+0x8c>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	f003 0304 	and.w	r3, r3, #4
 80020a2:	60bb      	str	r3, [r7, #8]
 80020a4:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 80020a6:	2302      	movs	r3, #2
 80020a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80020aa:	2301      	movs	r3, #1
 80020ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80020ae:	2300      	movs	r3, #0
 80020b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 80020b2:	2301      	movs	r3, #1
 80020b4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 80020b6:	f107 030c 	add.w	r3, r7, #12
 80020ba:	4619      	mov	r1, r3
 80020bc:	4815      	ldr	r0, [pc, #84]	; (8002114 <GYRO_IO_Init+0x90>)
 80020be:	f001 fdfb 	bl	8003cb8 <HAL_GPIO_Init>
  
  /* Deselect: Chip Select high */
  GYRO_CS_HIGH();
 80020c2:	2201      	movs	r2, #1
 80020c4:	2102      	movs	r1, #2
 80020c6:	4813      	ldr	r0, [pc, #76]	; (8002114 <GYRO_IO_Init+0x90>)
 80020c8:	f002 f8ae 	bl	8004228 <HAL_GPIO_WritePin>
  
  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 80020cc:	2300      	movs	r3, #0
 80020ce:	607b      	str	r3, [r7, #4]
 80020d0:	4b0f      	ldr	r3, [pc, #60]	; (8002110 <GYRO_IO_Init+0x8c>)
 80020d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d4:	4a0e      	ldr	r2, [pc, #56]	; (8002110 <GYRO_IO_Init+0x8c>)
 80020d6:	f043 0301 	orr.w	r3, r3, #1
 80020da:	6313      	str	r3, [r2, #48]	; 0x30
 80020dc:	4b0c      	ldr	r3, [pc, #48]	; (8002110 <GYRO_IO_Init+0x8c>)
 80020de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e0:	f003 0301 	and.w	r3, r3, #1
 80020e4:	607b      	str	r3, [r7, #4]
 80020e6:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 80020e8:	2306      	movs	r3, #6
 80020ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 80020ec:	2300      	movs	r3, #0
 80020ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80020f0:	2302      	movs	r3, #2
 80020f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 80020f8:	f107 030c 	add.w	r3, r7, #12
 80020fc:	4619      	mov	r1, r3
 80020fe:	4806      	ldr	r0, [pc, #24]	; (8002118 <GYRO_IO_Init+0x94>)
 8002100:	f001 fdda 	bl	8003cb8 <HAL_GPIO_Init>

  SPIx_Init();
 8002104:	f7ff fde6 	bl	8001cd4 <SPIx_Init>
}
 8002108:	bf00      	nop
 800210a:	3720      	adds	r7, #32
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40023800 	.word	0x40023800
 8002114:	40020800 	.word	0x40020800
 8002118:	40020000 	.word	0x40020000

0800211c <GYRO_IO_Write>:
  * @param  pBuffer: Pointer to the buffer containing the data to be written to the Gyroscope.
  * @param  WriteAddr: Gyroscope's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	460b      	mov	r3, r1
 8002126:	70fb      	strb	r3, [r7, #3]
 8002128:	4613      	mov	r3, r2
 800212a:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 800212c:	883b      	ldrh	r3, [r7, #0]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d903      	bls.n	800213a <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8002132:	78fb      	ldrb	r3, [r7, #3]
 8002134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002138:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 800213a:	2200      	movs	r2, #0
 800213c:	2102      	movs	r1, #2
 800213e:	480f      	ldr	r0, [pc, #60]	; (800217c <GYRO_IO_Write+0x60>)
 8002140:	f002 f872 	bl	8004228 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8002144:	78fb      	ldrb	r3, [r7, #3]
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff fe3c 	bl	8001dc4 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 800214c:	e00a      	b.n	8002164 <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff fe36 	bl	8001dc4 <SPIx_WriteRead>
    NumByteToWrite--;
 8002158:	883b      	ldrh	r3, [r7, #0]
 800215a:	3b01      	subs	r3, #1
 800215c:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	3301      	adds	r3, #1
 8002162:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 8002164:	883b      	ldrh	r3, [r7, #0]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1f1      	bne.n	800214e <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 800216a:	2201      	movs	r2, #1
 800216c:	2102      	movs	r1, #2
 800216e:	4803      	ldr	r0, [pc, #12]	; (800217c <GYRO_IO_Write+0x60>)
 8002170:	f002 f85a 	bl	8004228 <HAL_GPIO_WritePin>
}
 8002174:	bf00      	nop
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40020800 	.word	0x40020800

08002180 <GYRO_IO_Read>:
  * @param  pBuffer: Pointer to the buffer that receives the data read from the Gyroscope.
  * @param  ReadAddr: Gyroscope's internal address to read from.
  * @param  NumByteToRead: Number of bytes to read from the Gyroscope.
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	460b      	mov	r3, r1
 800218a:	70fb      	strb	r3, [r7, #3]
 800218c:	4613      	mov	r3, r2
 800218e:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8002190:	883b      	ldrh	r3, [r7, #0]
 8002192:	2b01      	cmp	r3, #1
 8002194:	d904      	bls.n	80021a0 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8002196:	78fb      	ldrb	r3, [r7, #3]
 8002198:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800219c:	70fb      	strb	r3, [r7, #3]
 800219e:	e003      	b.n	80021a8 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 80021a0:	78fb      	ldrb	r3, [r7, #3]
 80021a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80021a6:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 80021a8:	2200      	movs	r2, #0
 80021aa:	2102      	movs	r1, #2
 80021ac:	4810      	ldr	r0, [pc, #64]	; (80021f0 <GYRO_IO_Read+0x70>)
 80021ae:	f002 f83b 	bl	8004228 <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 80021b2:	78fb      	ldrb	r3, [r7, #3]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff fe05 	bl	8001dc4 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 80021ba:	e00c      	b.n	80021d6 <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to Gyroscope (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 80021bc:	2000      	movs	r0, #0
 80021be:	f7ff fe01 	bl	8001dc4 <SPIx_WriteRead>
 80021c2:	4603      	mov	r3, r0
 80021c4:	461a      	mov	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 80021ca:	883b      	ldrh	r3, [r7, #0]
 80021cc:	3b01      	subs	r3, #1
 80021ce:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3301      	adds	r3, #1
 80021d4:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 80021d6:	883b      	ldrh	r3, [r7, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1ef      	bne.n	80021bc <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 80021dc:	2201      	movs	r2, #1
 80021de:	2102      	movs	r1, #2
 80021e0:	4803      	ldr	r0, [pc, #12]	; (80021f0 <GYRO_IO_Read+0x70>)
 80021e2:	f002 f821 	bl	8004228 <HAL_GPIO_WritePin>
}  
 80021e6:	bf00      	nop
 80021e8:	3708      	adds	r7, #8
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40020800 	.word	0x40020800

080021f4 <BSP_GYRO_Init>:
/**
  * @brief  Set gyroscope Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{  
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80021fe:	2300      	movs	r3, #0
 8002200:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef         Gyro_InitStructure;
  GYRO_FilterConfigTypeDef Gyro_FilterStructure = {0,0};
 8002202:	2300      	movs	r3, #0
 8002204:	703b      	strb	r3, [r7, #0]
 8002206:	2300      	movs	r3, #0
 8002208:	707b      	strb	r3, [r7, #1]

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 800220a:	4b2b      	ldr	r3, [pc, #172]	; (80022b8 <BSP_GYRO_Init+0xc4>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	4798      	blx	r3
 8002210:	4603      	mov	r3, r0
 8002212:	2bd4      	cmp	r3, #212	; 0xd4
 8002214:	d005      	beq.n	8002222 <BSP_GYRO_Init+0x2e>
 8002216:	4b28      	ldr	r3, [pc, #160]	; (80022b8 <BSP_GYRO_Init+0xc4>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	4798      	blx	r3
 800221c:	4603      	mov	r3, r0
 800221e:	2bd5      	cmp	r3, #213	; 0xd5
 8002220:	d145      	bne.n	80022ae <BSP_GYRO_Init+0xba>
  {	
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 8002222:	4b26      	ldr	r3, [pc, #152]	; (80022bc <BSP_GYRO_Init+0xc8>)
 8002224:	4a24      	ldr	r2, [pc, #144]	; (80022b8 <BSP_GYRO_Init+0xc4>)
 8002226:	601a      	str	r2, [r3, #0]

    /* MEMS configuration ----------------------------------------------------*/
    /* Fill the gyroscope structure */
    Gyro_InitStructure.Power_Mode       = L3GD20_MODE_ACTIVE;
 8002228:	2308      	movs	r3, #8
 800222a:	713b      	strb	r3, [r7, #4]
    Gyro_InitStructure.Output_DataRate  = L3GD20_OUTPUT_DATARATE_1;
 800222c:	2300      	movs	r3, #0
 800222e:	717b      	strb	r3, [r7, #5]
    Gyro_InitStructure.Axes_Enable      = L3GD20_AXES_ENABLE;
 8002230:	2307      	movs	r3, #7
 8002232:	71bb      	strb	r3, [r7, #6]
    Gyro_InitStructure.Band_Width       = L3GD20_BANDWIDTH_4;
 8002234:	2330      	movs	r3, #48	; 0x30
 8002236:	71fb      	strb	r3, [r7, #7]
    Gyro_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8002238:	2300      	movs	r3, #0
 800223a:	723b      	strb	r3, [r7, #8]
    Gyro_InitStructure.Endianness       = L3GD20_BLE_LSB;
 800223c:	2300      	movs	r3, #0
 800223e:	727b      	strb	r3, [r7, #9]
    Gyro_InitStructure.Full_Scale       = L3GD20_FULLSCALE_500;
 8002240:	2310      	movs	r3, #16
 8002242:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8002244:	793a      	ldrb	r2, [r7, #4]
 8002246:	797b      	ldrb	r3, [r7, #5]
 8002248:	4313      	orrs	r3, r2
 800224a:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 800224c:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 800224e:	4313      	orrs	r3, r2
 8002250:	b2da      	uxtb	r2, r3
                       Gyro_InitStructure.Axes_Enable | Gyro_InitStructure.Band_Width);
 8002252:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (Gyro_InitStructure.Power_Mode  | Gyro_InitStructure.Output_DataRate | \
 8002254:	4313      	orrs	r3, r2
 8002256:	b2db      	uxtb	r3, r3
 8002258:	81bb      	strh	r3, [r7, #12]

    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 800225a:	7a3a      	ldrb	r2, [r7, #8]
 800225c:	7a7b      	ldrb	r3, [r7, #9]
 800225e:	4313      	orrs	r3, r2
 8002260:	b2da      	uxtb	r2, r3
                         Gyro_InitStructure.Full_Scale) << 8);
 8002262:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((Gyro_InitStructure.BlockData_Update | Gyro_InitStructure.Endianness | \
 8002264:	4313      	orrs	r3, r2
 8002266:	b2db      	uxtb	r3, r3
 8002268:	b29b      	uxth	r3, r3
 800226a:	021b      	lsls	r3, r3, #8
 800226c:	b29a      	uxth	r2, r3
 800226e:	89bb      	ldrh	r3, [r7, #12]
 8002270:	4313      	orrs	r3, r2
 8002272:	81bb      	strh	r3, [r7, #12]
    
    /* Initialize the gyroscope */
    GyroscopeDrv->Init(ctrl);
 8002274:	4b11      	ldr	r3, [pc, #68]	; (80022bc <BSP_GYRO_Init+0xc8>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	89ba      	ldrh	r2, [r7, #12]
 800227c:	4610      	mov	r0, r2
 800227e:	4798      	blx	r3

    Gyro_FilterStructure.HighPassFilter_Mode_Selection   = L3GD20_HPM_NORMAL_MODE_RES;
 8002280:	2300      	movs	r3, #0
 8002282:	703b      	strb	r3, [r7, #0]
    Gyro_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 8002284:	2300      	movs	r3, #0
 8002286:	707b      	strb	r3, [r7, #1]

    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 8002288:	783a      	ldrb	r2, [r7, #0]
                       Gyro_FilterStructure.HighPassFilter_CutOff_Frequency));
 800228a:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((Gyro_FilterStructure.HighPassFilter_Mode_Selection |\
 800228c:	4313      	orrs	r3, r2
 800228e:	b2db      	uxtb	r3, r3
 8002290:	81bb      	strh	r3, [r7, #12]

    /* Configure the gyroscope main parameters */
    GyroscopeDrv->FilterConfig(ctrl) ;
 8002292:	4b0a      	ldr	r3, [pc, #40]	; (80022bc <BSP_GYRO_Init+0xc8>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002298:	89ba      	ldrh	r2, [r7, #12]
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	4610      	mov	r0, r2
 800229e:	4798      	blx	r3

    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 80022a0:	4b06      	ldr	r3, [pc, #24]	; (80022bc <BSP_GYRO_Init+0xc8>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a6:	2010      	movs	r0, #16
 80022a8:	4798      	blx	r3

    ret = GYRO_OK;
 80022aa:	2300      	movs	r3, #0
 80022ac:	73fb      	strb	r3, [r7, #15]
    GyroscopeDrv->FilterCmd(I3G4250D_HIGHPASSFILTER_ENABLE);

    ret = GYRO_OK;
  }
#endif /* USE_STM32F429I_DISCOVERY_REVD */
  return ret;
 80022ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	2000003c 	.word	0x2000003c
 80022bc:	2000055c 	.word	0x2000055c

080022c0 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float *pfData)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv->GetXYZ!= NULL)
 80022c8:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <BSP_GYRO_GetXYZ+0x24>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d004      	beq.n	80022dc <BSP_GYRO_GetXYZ+0x1c>
  {
    GyroscopeDrv->GetXYZ(pfData);
 80022d2:	4b04      	ldr	r3, [pc, #16]	; (80022e4 <BSP_GYRO_GetXYZ+0x24>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	4798      	blx	r3
  }
}
 80022dc:	bf00      	nop
 80022de:	3708      	adds	r7, #8
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	2000055c 	.word	0x2000055c

080022e8 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/  
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

    /* LTDC Configuration ----------------------------------------------------*/
    LtdcHandler.Instance = LTDC;
 80022ec:	4b2d      	ldr	r3, [pc, #180]	; (80023a4 <BSP_LCD_Init+0xbc>)
 80022ee:	4a2e      	ldr	r2, [pc, #184]	; (80023a8 <BSP_LCD_Init+0xc0>)
 80022f0:	601a      	str	r2, [r3, #0]
          ActiveH=320 (323-2-2+1)
          VFP=4 (327-320-2-2+1)
      */
    
    /* Configure horizontal synchronization width */
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 80022f2:	4b2c      	ldr	r3, [pc, #176]	; (80023a4 <BSP_LCD_Init+0xbc>)
 80022f4:	2209      	movs	r2, #9
 80022f6:	615a      	str	r2, [r3, #20]
    /* Configure vertical synchronization height */
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 80022f8:	4b2a      	ldr	r3, [pc, #168]	; (80023a4 <BSP_LCD_Init+0xbc>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	619a      	str	r2, [r3, #24]
    /* Configure accumulated horizontal back porch */
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 80022fe:	4b29      	ldr	r3, [pc, #164]	; (80023a4 <BSP_LCD_Init+0xbc>)
 8002300:	221d      	movs	r2, #29
 8002302:	61da      	str	r2, [r3, #28]
    /* Configure accumulated vertical back porch */
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8002304:	4b27      	ldr	r3, [pc, #156]	; (80023a4 <BSP_LCD_Init+0xbc>)
 8002306:	2203      	movs	r2, #3
 8002308:	621a      	str	r2, [r3, #32]
    /* Configure accumulated active width */
    LtdcHandler.Init.AccumulatedActiveW = 269;
 800230a:	4b26      	ldr	r3, [pc, #152]	; (80023a4 <BSP_LCD_Init+0xbc>)
 800230c:	f240 120d 	movw	r2, #269	; 0x10d
 8002310:	625a      	str	r2, [r3, #36]	; 0x24
    /* Configure accumulated active height */
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8002312:	4b24      	ldr	r3, [pc, #144]	; (80023a4 <BSP_LCD_Init+0xbc>)
 8002314:	f240 1243 	movw	r2, #323	; 0x143
 8002318:	629a      	str	r2, [r3, #40]	; 0x28
    /* Configure total width */
    LtdcHandler.Init.TotalWidth = 279;
 800231a:	4b22      	ldr	r3, [pc, #136]	; (80023a4 <BSP_LCD_Init+0xbc>)
 800231c:	f240 1217 	movw	r2, #279	; 0x117
 8002320:	62da      	str	r2, [r3, #44]	; 0x2c
    /* Configure total height */
    LtdcHandler.Init.TotalHeigh = 327;
 8002322:	4b20      	ldr	r3, [pc, #128]	; (80023a4 <BSP_LCD_Init+0xbc>)
 8002324:	f240 1247 	movw	r2, #327	; 0x147
 8002328:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Configure R,G,B component values for LCD background color */
    LtdcHandler.Init.Backcolor.Red= 0;
 800232a:	4b1e      	ldr	r3, [pc, #120]	; (80023a4 <BSP_LCD_Init+0xbc>)
 800232c:	2200      	movs	r2, #0
 800232e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 8002332:	4b1c      	ldr	r3, [pc, #112]	; (80023a4 <BSP_LCD_Init+0xbc>)
 8002334:	2200      	movs	r2, #0
 8002336:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 800233a:	4b1a      	ldr	r3, [pc, #104]	; (80023a4 <BSP_LCD_Init+0xbc>)
 800233c:	2200      	movs	r2, #0
 800233e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    /* LCD clock configuration */
    /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
    /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
    /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
    /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002342:	4b1a      	ldr	r3, [pc, #104]	; (80023ac <BSP_LCD_Init+0xc4>)
 8002344:	2208      	movs	r2, #8
 8002346:	601a      	str	r2, [r3, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002348:	4b18      	ldr	r3, [pc, #96]	; (80023ac <BSP_LCD_Init+0xc4>)
 800234a:	22c0      	movs	r2, #192	; 0xc0
 800234c:	611a      	str	r2, [r3, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800234e:	4b17      	ldr	r3, [pc, #92]	; (80023ac <BSP_LCD_Init+0xc4>)
 8002350:	2204      	movs	r2, #4
 8002352:	619a      	str	r2, [r3, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8002354:	4b15      	ldr	r3, [pc, #84]	; (80023ac <BSP_LCD_Init+0xc4>)
 8002356:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800235a:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 800235c:	4813      	ldr	r0, [pc, #76]	; (80023ac <BSP_LCD_Init+0xc4>)
 800235e:	f004 f989 	bl	8006674 <HAL_RCCEx_PeriphCLKConfig>
    
    /* Polarity */
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002362:	4b10      	ldr	r3, [pc, #64]	; (80023a4 <BSP_LCD_Init+0xbc>)
 8002364:	2200      	movs	r2, #0
 8002366:	605a      	str	r2, [r3, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002368:	4b0e      	ldr	r3, [pc, #56]	; (80023a4 <BSP_LCD_Init+0xbc>)
 800236a:	2200      	movs	r2, #0
 800236c:	609a      	str	r2, [r3, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800236e:	4b0d      	ldr	r3, [pc, #52]	; (80023a4 <BSP_LCD_Init+0xbc>)
 8002370:	2200      	movs	r2, #0
 8002372:	60da      	str	r2, [r3, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002374:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <BSP_LCD_Init+0xbc>)
 8002376:	2200      	movs	r2, #0
 8002378:	611a      	str	r2, [r3, #16]
    
    BSP_LCD_MspInit();
 800237a:	f000 fbaf 	bl	8002adc <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 800237e:	4809      	ldr	r0, [pc, #36]	; (80023a4 <BSP_LCD_Init+0xbc>)
 8002380:	f001 ff6c 	bl	800425c <HAL_LTDC_Init>
    
    /* Select the device */
    LcdDrv = &ili9341_drv;
 8002384:	4b0a      	ldr	r3, [pc, #40]	; (80023b0 <BSP_LCD_Init+0xc8>)
 8002386:	4a0b      	ldr	r2, [pc, #44]	; (80023b4 <BSP_LCD_Init+0xcc>)
 8002388:	601a      	str	r2, [r3, #0]

    /* LCD Init */	 
    LcdDrv->Init();
 800238a:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <BSP_LCD_Init+0xc8>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4798      	blx	r3

    /* Initialize the SDRAM */
    BSP_SDRAM_Init();
 8002392:	f000 fcd7 	bl	8002d44 <BSP_SDRAM_Init>

    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002396:	4808      	ldr	r0, [pc, #32]	; (80023b8 <BSP_LCD_Init+0xd0>)
 8002398:	f000 f8ce 	bl	8002538 <BSP_LCD_SetFont>

  return LCD_OK;
 800239c:	2300      	movs	r3, #0
}  
 800239e:	4618      	mov	r0, r3
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	20000560 	.word	0x20000560
 80023a8:	40016800 	.word	0x40016800
 80023ac:	20000648 	.word	0x20000648
 80023b0:	20000694 	.word	0x20000694
 80023b4:	20000004 	.word	0x20000004
 80023b8:	20000074 	.word	0x20000074

080023bc <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.  
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 80023c0:	4b03      	ldr	r3, [pc, #12]	; (80023d0 <BSP_LCD_GetXSize+0x14>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023c6:	4798      	blx	r3
 80023c8:	4603      	mov	r3, r0
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	20000694 	.word	0x20000694

080023d4 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.  
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 80023d8:	4b03      	ldr	r3, [pc, #12]	; (80023e8 <BSP_LCD_GetYSize+0x14>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023de:	4798      	blx	r3
 80023e0:	4603      	mov	r3, r0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	20000694 	.word	0x20000694

080023ec <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background. 
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b090      	sub	sp, #64	; 0x40
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	4603      	mov	r3, r0
 80023f4:	6039      	str	r1, [r7, #0]
 80023f6:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

 /* Layer Init */
  Layercfg.WindowX0 = 0;
 80023f8:	2300      	movs	r3, #0
 80023fa:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 80023fc:	f7ff ffde 	bl	80023bc <BSP_LCD_GetXSize>
 8002400:	4603      	mov	r3, r0
 8002402:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8002404:	2300      	movs	r3, #0
 8002406:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002408:	f7ff ffe4 	bl	80023d4 <BSP_LCD_GetYSize>
 800240c:	4603      	mov	r3, r0
 800240e:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002410:	2300      	movs	r3, #0
 8002412:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	633b      	str	r3, [r7, #48]	; 0x30
  Layercfg.Alpha = 255;
 8002418:	23ff      	movs	r3, #255	; 0xff
 800241a:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 800241c:	2300      	movs	r3, #0
 800241e:	627b      	str	r3, [r7, #36]	; 0x24
  Layercfg.Backcolor.Blue = 0;
 8002420:	2300      	movs	r3, #0
 8002422:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  Layercfg.Backcolor.Green = 0;
 8002426:	2300      	movs	r3, #0
 8002428:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  Layercfg.Backcolor.Red = 0;
 800242c:	2300      	movs	r3, #0
 800242e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002432:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002436:	62bb      	str	r3, [r7, #40]	; 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002438:	2307      	movs	r3, #7
 800243a:	62fb      	str	r3, [r7, #44]	; 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 800243c:	f7ff ffbe 	bl	80023bc <BSP_LCD_GetXSize>
 8002440:	4603      	mov	r3, r0
 8002442:	637b      	str	r3, [r7, #52]	; 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8002444:	f7ff ffc6 	bl	80023d4 <BSP_LCD_GetYSize>
 8002448:	4603      	mov	r3, r0
 800244a:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 800244c:	88fa      	ldrh	r2, [r7, #6]
 800244e:	f107 030c 	add.w	r3, r7, #12
 8002452:	4619      	mov	r1, r3
 8002454:	4814      	ldr	r0, [pc, #80]	; (80024a8 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002456:	f001 ffdb 	bl	8004410 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800245a:	88fa      	ldrh	r2, [r7, #6]
 800245c:	4913      	ldr	r1, [pc, #76]	; (80024ac <BSP_LCD_LayerDefaultInit+0xc0>)
 800245e:	4613      	mov	r3, r2
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	4413      	add	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	440b      	add	r3, r1
 8002468:	3304      	adds	r3, #4
 800246a:	f04f 32ff 	mov.w	r2, #4294967295
 800246e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002470:	88fa      	ldrh	r2, [r7, #6]
 8002472:	490e      	ldr	r1, [pc, #56]	; (80024ac <BSP_LCD_LayerDefaultInit+0xc0>)
 8002474:	4613      	mov	r3, r2
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	4413      	add	r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	440b      	add	r3, r1
 800247e:	3308      	adds	r3, #8
 8002480:	4a0b      	ldr	r2, [pc, #44]	; (80024b0 <BSP_LCD_LayerDefaultInit+0xc4>)
 8002482:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002484:	88fa      	ldrh	r2, [r7, #6]
 8002486:	4909      	ldr	r1, [pc, #36]	; (80024ac <BSP_LCD_LayerDefaultInit+0xc0>)
 8002488:	4613      	mov	r3, r2
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	4413      	add	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	440b      	add	r3, r1
 8002492:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002496:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8002498:	4803      	ldr	r0, [pc, #12]	; (80024a8 <BSP_LCD_LayerDefaultInit+0xbc>)
 800249a:	f001 fff7 	bl	800448c <HAL_LTDC_EnableDither>
}
 800249e:	bf00      	nop
 80024a0:	3740      	adds	r7, #64	; 0x40
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	20000560 	.word	0x20000560
 80024ac:	2000067c 	.word	0x2000067c
 80024b0:	20000074 	.word	0x20000074

080024b4 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80024bc:	4a04      	ldr	r2, [pc, #16]	; (80024d0 <BSP_LCD_SelectLayer+0x1c>)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6013      	str	r3, [r2, #0]
}
 80024c2:	bf00      	nop
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	20000678 	.word	0x20000678

080024d4 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the Text color.
  * @param  Color: the Text color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80024dc:	4b07      	ldr	r3, [pc, #28]	; (80024fc <BSP_LCD_SetTextColor+0x28>)
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	4907      	ldr	r1, [pc, #28]	; (8002500 <BSP_LCD_SetTextColor+0x2c>)
 80024e2:	4613      	mov	r3, r2
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	4413      	add	r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	440b      	add	r3, r1
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	601a      	str	r2, [r3, #0]
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	20000678 	.word	0x20000678
 8002500:	2000067c 	.word	0x2000067c

08002504 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the Background color.
  * @param  Color: the layer Background color code ARGB(8-8-8-8)
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 800250c:	4b08      	ldr	r3, [pc, #32]	; (8002530 <BSP_LCD_SetBackColor+0x2c>)
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	4908      	ldr	r1, [pc, #32]	; (8002534 <BSP_LCD_SetBackColor+0x30>)
 8002512:	4613      	mov	r3, r2
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	4413      	add	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	440b      	add	r3, r1
 800251c:	3304      	adds	r3, #4
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	601a      	str	r2, [r3, #0]
}
 8002522:	bf00      	nop
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	20000678 	.word	0x20000678
 8002534:	2000067c 	.word	0x2000067c

08002538 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 8002540:	4b08      	ldr	r3, [pc, #32]	; (8002564 <BSP_LCD_SetFont+0x2c>)
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	4908      	ldr	r1, [pc, #32]	; (8002568 <BSP_LCD_SetFont+0x30>)
 8002546:	4613      	mov	r3, r2
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	4413      	add	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	440b      	add	r3, r1
 8002550:	3308      	adds	r3, #8
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	601a      	str	r2, [r3, #0]
}
 8002556:	bf00      	nop
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	20000678 	.word	0x20000678
 8002568:	2000067c 	.word	0x2000067c

0800256c <BSP_LCD_GetFont>:
/**
  * @brief  Gets the Text Font.
  * @retval Layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8002570:	4b07      	ldr	r3, [pc, #28]	; (8002590 <BSP_LCD_GetFont+0x24>)
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	4907      	ldr	r1, [pc, #28]	; (8002594 <BSP_LCD_GetFont+0x28>)
 8002576:	4613      	mov	r3, r2
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	4413      	add	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	440b      	add	r3, r1
 8002580:	3308      	adds	r3, #8
 8002582:	681b      	ldr	r3, [r3, #0]
}
 8002584:	4618      	mov	r0, r3
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	20000678 	.word	0x20000678
 8002594:	2000067c 	.word	0x2000067c

08002598 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800259a:	b085      	sub	sp, #20
 800259c:	af02      	add	r7, sp, #8
 800259e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80025a0:	4b0f      	ldr	r3, [pc, #60]	; (80025e0 <BSP_LCD_Clear+0x48>)
 80025a2:	681c      	ldr	r4, [r3, #0]
 80025a4:	4b0e      	ldr	r3, [pc, #56]	; (80025e0 <BSP_LCD_Clear+0x48>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a0e      	ldr	r2, [pc, #56]	; (80025e4 <BSP_LCD_Clear+0x4c>)
 80025aa:	2134      	movs	r1, #52	; 0x34
 80025ac:	fb01 f303 	mul.w	r3, r1, r3
 80025b0:	4413      	add	r3, r2
 80025b2:	335c      	adds	r3, #92	; 0x5c
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	461e      	mov	r6, r3
 80025b8:	f7ff ff00 	bl	80023bc <BSP_LCD_GetXSize>
 80025bc:	4605      	mov	r5, r0
 80025be:	f7ff ff09 	bl	80023d4 <BSP_LCD_GetYSize>
 80025c2:	4602      	mov	r2, r0
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	9301      	str	r3, [sp, #4]
 80025c8:	2300      	movs	r3, #0
 80025ca:	9300      	str	r3, [sp, #0]
 80025cc:	4613      	mov	r3, r2
 80025ce:	462a      	mov	r2, r5
 80025d0:	4631      	mov	r1, r6
 80025d2:	4620      	mov	r0, r4
 80025d4:	f000 fb7e 	bl	8002cd4 <FillBuffer>
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025e0:	20000678 	.word	0x20000678
 80025e4:	20000560 	.word	0x20000560

080025e8 <BSP_LCD_DrawLine>:
  * @param  Y1: the point 1 Y position
  * @param  X2: the point 2 X position
  * @param  Y2: the point 2 Y position
  */
void BSP_LCD_DrawLine(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80025e8:	b590      	push	{r4, r7, lr}
 80025ea:	b08b      	sub	sp, #44	; 0x2c
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	4604      	mov	r4, r0
 80025f0:	4608      	mov	r0, r1
 80025f2:	4611      	mov	r1, r2
 80025f4:	461a      	mov	r2, r3
 80025f6:	4623      	mov	r3, r4
 80025f8:	80fb      	strh	r3, [r7, #6]
 80025fa:	4603      	mov	r3, r0
 80025fc:	80bb      	strh	r3, [r7, #4]
 80025fe:	460b      	mov	r3, r1
 8002600:	807b      	strh	r3, [r7, #2]
 8002602:	4613      	mov	r3, r2
 8002604:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8002606:	2300      	movs	r3, #0
 8002608:	823b      	strh	r3, [r7, #16]
 800260a:	2300      	movs	r3, #0
 800260c:	81fb      	strh	r3, [r7, #14]
 800260e:	2300      	movs	r3, #0
 8002610:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002612:	2300      	movs	r3, #0
 8002614:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002616:	2300      	movs	r3, #0
 8002618:	847b      	strh	r3, [r7, #34]	; 0x22
 800261a:	2300      	movs	r3, #0
 800261c:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 800261e:	2300      	movs	r3, #0
 8002620:	83fb      	strh	r3, [r7, #30]
 8002622:	2300      	movs	r3, #0
 8002624:	83bb      	strh	r3, [r7, #28]
 8002626:	2300      	movs	r3, #0
 8002628:	837b      	strh	r3, [r7, #26]
 800262a:	2300      	movs	r3, #0
 800262c:	833b      	strh	r3, [r7, #24]
 800262e:	2300      	movs	r3, #0
 8002630:	82fb      	strh	r3, [r7, #22]
 8002632:	2300      	movs	r3, #0
 8002634:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8002636:	2300      	movs	r3, #0
 8002638:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 800263a:	887a      	ldrh	r2, [r7, #2]
 800263c:	88fb      	ldrh	r3, [r7, #6]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b00      	cmp	r3, #0
 8002642:	bfb8      	it	lt
 8002644:	425b      	neglt	r3, r3
 8002646:	823b      	strh	r3, [r7, #16]
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 8002648:	883a      	ldrh	r2, [r7, #0]
 800264a:	88bb      	ldrh	r3, [r7, #4]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	bfb8      	it	lt
 8002652:	425b      	neglt	r3, r3
 8002654:	81fb      	strh	r3, [r7, #14]
  x = X1;                       /* Start x off at the first pixel */
 8002656:	88fb      	ldrh	r3, [r7, #6]
 8002658:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = Y1;                       /* Start y off at the first pixel */
 800265a:	88bb      	ldrh	r3, [r7, #4]
 800265c:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (X2 >= X1)                 /* The x-values are increasing */
 800265e:	887a      	ldrh	r2, [r7, #2]
 8002660:	88fb      	ldrh	r3, [r7, #6]
 8002662:	429a      	cmp	r2, r3
 8002664:	d304      	bcc.n	8002670 <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 8002666:	2301      	movs	r3, #1
 8002668:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 800266a:	2301      	movs	r3, #1
 800266c:	843b      	strh	r3, [r7, #32]
 800266e:	e005      	b.n	800267c <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8002670:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002674:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8002676:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800267a:	843b      	strh	r3, [r7, #32]
  }
  
  if (Y2 >= Y1)                 /* The y-values are increasing */
 800267c:	883a      	ldrh	r2, [r7, #0]
 800267e:	88bb      	ldrh	r3, [r7, #4]
 8002680:	429a      	cmp	r2, r3
 8002682:	d304      	bcc.n	800268e <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 8002684:	2301      	movs	r3, #1
 8002686:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8002688:	2301      	movs	r3, #1
 800268a:	83bb      	strh	r3, [r7, #28]
 800268c:	e005      	b.n	800269a <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 800268e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002692:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8002694:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002698:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 800269a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800269e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026a2:	429a      	cmp	r2, r3
 80026a4:	db10      	blt.n	80026c8 <BSP_LCD_DrawLine+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 80026a6:	2300      	movs	r3, #0
 80026a8:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 80026aa:	2300      	movs	r3, #0
 80026ac:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 80026ae:	8a3b      	ldrh	r3, [r7, #16]
 80026b0:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 80026b2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80026b6:	0fda      	lsrs	r2, r3, #31
 80026b8:	4413      	add	r3, r2
 80026ba:	105b      	asrs	r3, r3, #1
 80026bc:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 80026be:	89fb      	ldrh	r3, [r7, #14]
 80026c0:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 80026c2:	8a3b      	ldrh	r3, [r7, #16]
 80026c4:	82bb      	strh	r3, [r7, #20]
 80026c6:	e00f      	b.n	80026e8 <BSP_LCD_DrawLine+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 80026c8:	2300      	movs	r3, #0
 80026ca:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 80026cc:	2300      	movs	r3, #0
 80026ce:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 80026d0:	89fb      	ldrh	r3, [r7, #14]
 80026d2:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 80026d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80026d8:	0fda      	lsrs	r2, r3, #31
 80026da:	4413      	add	r3, r2
 80026dc:	105b      	asrs	r3, r3, #1
 80026de:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 80026e0:	8a3b      	ldrh	r3, [r7, #16]
 80026e2:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 80026e4:	89fb      	ldrh	r3, [r7, #14]
 80026e6:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 80026e8:	2300      	movs	r3, #0
 80026ea:	827b      	strh	r3, [r7, #18]
 80026ec:	e037      	b.n	800275e <BSP_LCD_DrawLine+0x176>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 80026ee:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 80026f0:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80026f2:	4b20      	ldr	r3, [pc, #128]	; (8002774 <BSP_LCD_DrawLine+0x18c>)
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	4c20      	ldr	r4, [pc, #128]	; (8002778 <BSP_LCD_DrawLine+0x190>)
 80026f8:	4613      	mov	r3, r2
 80026fa:	005b      	lsls	r3, r3, #1
 80026fc:	4413      	add	r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	4423      	add	r3, r4
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	461a      	mov	r2, r3
 8002706:	f000 fabf 	bl	8002c88 <BSP_LCD_DrawPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 800270a:	8b3a      	ldrh	r2, [r7, #24]
 800270c:	8afb      	ldrh	r3, [r7, #22]
 800270e:	4413      	add	r3, r2
 8002710:	b29b      	uxth	r3, r3
 8002712:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8002714:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002718:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800271c:	429a      	cmp	r2, r3
 800271e:	db0e      	blt.n	800273e <BSP_LCD_DrawLine+0x156>
    {
      num -= den;                             /* Calculate the new numerator value */
 8002720:	8b3a      	ldrh	r2, [r7, #24]
 8002722:	8b7b      	ldrh	r3, [r7, #26]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	b29b      	uxth	r3, r3
 8002728:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 800272a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800272c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800272e:	4413      	add	r3, r2
 8002730:	b29b      	uxth	r3, r3
 8002732:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8002734:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002736:	8bfb      	ldrh	r3, [r7, #30]
 8002738:	4413      	add	r3, r2
 800273a:	b29b      	uxth	r3, r3
 800273c:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 800273e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002740:	8c3b      	ldrh	r3, [r7, #32]
 8002742:	4413      	add	r3, r2
 8002744:	b29b      	uxth	r3, r3
 8002746:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 8002748:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800274a:	8bbb      	ldrh	r3, [r7, #28]
 800274c:	4413      	add	r3, r2
 800274e:	b29b      	uxth	r3, r3
 8002750:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8002752:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002756:	b29b      	uxth	r3, r3
 8002758:	3301      	adds	r3, #1
 800275a:	b29b      	uxth	r3, r3
 800275c:	827b      	strh	r3, [r7, #18]
 800275e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002762:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002766:	429a      	cmp	r2, r3
 8002768:	ddc1      	ble.n	80026ee <BSP_LCD_DrawLine+0x106>
  }
}
 800276a:	bf00      	nop
 800276c:	bf00      	nop
 800276e:	372c      	adds	r7, #44	; 0x2c
 8002770:	46bd      	mov	sp, r7
 8002772:	bd90      	pop	{r4, r7, pc}
 8002774:	20000678 	.word	0x20000678
 8002778:	2000067c 	.word	0x2000067c

0800277c <BSP_LCD_FillTriangle>:
  * @param  Y2: the point 2 y position
  * @param  X3: the point 3 x position
  * @param  Y3: the point 3 y position
  */
void BSP_LCD_FillTriangle(uint16_t X1, uint16_t X2, uint16_t X3, uint16_t Y1, uint16_t Y2, uint16_t Y3)
{ 
 800277c:	b590      	push	{r4, r7, lr}
 800277e:	b08b      	sub	sp, #44	; 0x2c
 8002780:	af00      	add	r7, sp, #0
 8002782:	4604      	mov	r4, r0
 8002784:	4608      	mov	r0, r1
 8002786:	4611      	mov	r1, r2
 8002788:	461a      	mov	r2, r3
 800278a:	4623      	mov	r3, r4
 800278c:	80fb      	strh	r3, [r7, #6]
 800278e:	4603      	mov	r3, r0
 8002790:	80bb      	strh	r3, [r7, #4]
 8002792:	460b      	mov	r3, r1
 8002794:	807b      	strh	r3, [r7, #2]
 8002796:	4613      	mov	r3, r2
 8002798:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 800279a:	2300      	movs	r3, #0
 800279c:	823b      	strh	r3, [r7, #16]
 800279e:	2300      	movs	r3, #0
 80027a0:	81fb      	strh	r3, [r7, #14]
 80027a2:	2300      	movs	r3, #0
 80027a4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80027a6:	2300      	movs	r3, #0
 80027a8:	84bb      	strh	r3, [r7, #36]	; 0x24
 80027aa:	2300      	movs	r3, #0
 80027ac:	847b      	strh	r3, [r7, #34]	; 0x22
 80027ae:	2300      	movs	r3, #0
 80027b0:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 80027b2:	2300      	movs	r3, #0
 80027b4:	83fb      	strh	r3, [r7, #30]
 80027b6:	2300      	movs	r3, #0
 80027b8:	83bb      	strh	r3, [r7, #28]
 80027ba:	2300      	movs	r3, #0
 80027bc:	837b      	strh	r3, [r7, #26]
 80027be:	2300      	movs	r3, #0
 80027c0:	833b      	strh	r3, [r7, #24]
 80027c2:	2300      	movs	r3, #0
 80027c4:	82fb      	strh	r3, [r7, #22]
 80027c6:	2300      	movs	r3, #0
 80027c8:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 80027ca:	2300      	movs	r3, #0
 80027cc:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(X2 - X1);        /* The difference between the x's */
 80027ce:	88ba      	ldrh	r2, [r7, #4]
 80027d0:	88fb      	ldrh	r3, [r7, #6]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	bfb8      	it	lt
 80027d8:	425b      	neglt	r3, r3
 80027da:	823b      	strh	r3, [r7, #16]
  deltay = ABS(Y2 - Y1);        /* The difference between the y's */
 80027dc:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80027de:	883b      	ldrh	r3, [r7, #0]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	bfb8      	it	lt
 80027e6:	425b      	neglt	r3, r3
 80027e8:	81fb      	strh	r3, [r7, #14]
  x = X1;                       /* Start x off at the first pixel */
 80027ea:	88fb      	ldrh	r3, [r7, #6]
 80027ec:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = Y1;                       /* Start y off at the first pixel */
 80027ee:	883b      	ldrh	r3, [r7, #0]
 80027f0:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (X2 >= X1)                 /* The x-values are increasing */
 80027f2:	88ba      	ldrh	r2, [r7, #4]
 80027f4:	88fb      	ldrh	r3, [r7, #6]
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d304      	bcc.n	8002804 <BSP_LCD_FillTriangle+0x88>
  {
    xinc1 = 1;
 80027fa:	2301      	movs	r3, #1
 80027fc:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 80027fe:	2301      	movs	r3, #1
 8002800:	843b      	strh	r3, [r7, #32]
 8002802:	e005      	b.n	8002810 <BSP_LCD_FillTriangle+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8002804:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002808:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 800280a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800280e:	843b      	strh	r3, [r7, #32]
  }
  
  if (Y2 >= Y1)                 /* The y-values are increasing */
 8002810:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002812:	883b      	ldrh	r3, [r7, #0]
 8002814:	429a      	cmp	r2, r3
 8002816:	d304      	bcc.n	8002822 <BSP_LCD_FillTriangle+0xa6>
  {
    yinc1 = 1;
 8002818:	2301      	movs	r3, #1
 800281a:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 800281c:	2301      	movs	r3, #1
 800281e:	83bb      	strh	r3, [r7, #28]
 8002820:	e005      	b.n	800282e <BSP_LCD_FillTriangle+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8002822:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002826:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8002828:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800282c:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 800282e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002832:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002836:	429a      	cmp	r2, r3
 8002838:	db10      	blt.n	800285c <BSP_LCD_FillTriangle+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 800283a:	2300      	movs	r3, #0
 800283c:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 800283e:	2300      	movs	r3, #0
 8002840:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8002842:	8a3b      	ldrh	r3, [r7, #16]
 8002844:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8002846:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800284a:	0fda      	lsrs	r2, r3, #31
 800284c:	4413      	add	r3, r2
 800284e:	105b      	asrs	r3, r3, #1
 8002850:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 8002852:	89fb      	ldrh	r3, [r7, #14]
 8002854:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 8002856:	8a3b      	ldrh	r3, [r7, #16]
 8002858:	82bb      	strh	r3, [r7, #20]
 800285a:	e00f      	b.n	800287c <BSP_LCD_FillTriangle+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 800285c:	2300      	movs	r3, #0
 800285e:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8002860:	2300      	movs	r3, #0
 8002862:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8002864:	89fb      	ldrh	r3, [r7, #14]
 8002866:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8002868:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800286c:	0fda      	lsrs	r2, r3, #31
 800286e:	4413      	add	r3, r2
 8002870:	105b      	asrs	r3, r3, #1
 8002872:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 8002874:	8a3b      	ldrh	r3, [r7, #16]
 8002876:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 8002878:	89fb      	ldrh	r3, [r7, #14]
 800287a:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 800287c:	2300      	movs	r3, #0
 800287e:	827b      	strh	r3, [r7, #18]
 8002880:	e02f      	b.n	80028e2 <BSP_LCD_FillTriangle+0x166>
  {
    BSP_LCD_DrawLine(x, y, X3, Y3);
 8002882:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8002884:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8002886:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002888:	887a      	ldrh	r2, [r7, #2]
 800288a:	f7ff fead 	bl	80025e8 <BSP_LCD_DrawLine>
    
    num += numadd;              /* Increase the numerator by the top of the fraction */
 800288e:	8b3a      	ldrh	r2, [r7, #24]
 8002890:	8afb      	ldrh	r3, [r7, #22]
 8002892:	4413      	add	r3, r2
 8002894:	b29b      	uxth	r3, r3
 8002896:	833b      	strh	r3, [r7, #24]
    if (num >= den)             /* Check if numerator >= denominator */
 8002898:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800289c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	db0e      	blt.n	80028c2 <BSP_LCD_FillTriangle+0x146>
    {
      num -= den;               /* Calculate the new numerator value */
 80028a4:	8b3a      	ldrh	r2, [r7, #24]
 80028a6:	8b7b      	ldrh	r3, [r7, #26]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	b29b      	uxth	r3, r3
 80028ac:	833b      	strh	r3, [r7, #24]
      x += xinc1;               /* Change the x as appropriate */
 80028ae:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80028b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80028b2:	4413      	add	r3, r2
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;               /* Change the y as appropriate */
 80028b8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80028ba:	8bfb      	ldrh	r3, [r7, #30]
 80028bc:	4413      	add	r3, r2
 80028be:	b29b      	uxth	r3, r3
 80028c0:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                 /* Change the x as appropriate */
 80028c2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80028c4:	8c3b      	ldrh	r3, [r7, #32]
 80028c6:	4413      	add	r3, r2
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                 /* Change the y as appropriate */
 80028cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80028ce:	8bbb      	ldrh	r3, [r7, #28]
 80028d0:	4413      	add	r3, r2
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 80028d6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80028da:	b29b      	uxth	r3, r3
 80028dc:	3301      	adds	r3, #1
 80028de:	b29b      	uxth	r3, r3
 80028e0:	827b      	strh	r3, [r7, #18]
 80028e2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80028e6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	ddc9      	ble.n	8002882 <BSP_LCD_FillTriangle+0x106>
  } 
}
 80028ee:	bf00      	nop
 80028f0:	bf00      	nop
 80028f2:	372c      	adds	r7, #44	; 0x2c
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd90      	pop	{r4, r7, pc}

080028f8 <BSP_LCD_FillPolygon>:
  * @brief  Displays a full poly-line (between many points).
  * @param  Points: pointer to the points array
  * @param  PointCount: Number of points
  */
void BSP_LCD_FillPolygon(pPoint Points, uint16_t PointCount)
{
 80028f8:	b5b0      	push	{r4, r5, r7, lr}
 80028fa:	b08c      	sub	sp, #48	; 0x30
 80028fc:	af02      	add	r7, sp, #8
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	460b      	mov	r3, r1
 8002902:	807b      	strh	r3, [r7, #2]
  
  int16_t x = 0, y = 0, x2 = 0, y2 = 0, xcenter = 0, ycenter = 0, xfirst = 0, yfirst = 0, pixelx = 0, pixely = 0, counter = 0;
 8002904:	2300      	movs	r3, #0
 8002906:	833b      	strh	r3, [r7, #24]
 8002908:	2300      	movs	r3, #0
 800290a:	82fb      	strh	r3, [r7, #22]
 800290c:	2300      	movs	r3, #0
 800290e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002910:	2300      	movs	r3, #0
 8002912:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002914:	2300      	movs	r3, #0
 8002916:	82bb      	strh	r3, [r7, #20]
 8002918:	2300      	movs	r3, #0
 800291a:	827b      	strh	r3, [r7, #18]
 800291c:	2300      	movs	r3, #0
 800291e:	823b      	strh	r3, [r7, #16]
 8002920:	2300      	movs	r3, #0
 8002922:	81fb      	strh	r3, [r7, #14]
 8002924:	2300      	movs	r3, #0
 8002926:	81bb      	strh	r3, [r7, #12]
 8002928:	2300      	movs	r3, #0
 800292a:	817b      	strh	r3, [r7, #10]
 800292c:	2300      	movs	r3, #0
 800292e:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  imageleft = 0, imageright = 0, imagetop = 0, imagebottom = 0;  
 8002930:	2300      	movs	r3, #0
 8002932:	843b      	strh	r3, [r7, #32]
 8002934:	2300      	movs	r3, #0
 8002936:	83fb      	strh	r3, [r7, #30]
 8002938:	2300      	movs	r3, #0
 800293a:	83bb      	strh	r3, [r7, #28]
 800293c:	2300      	movs	r3, #0
 800293e:	837b      	strh	r3, [r7, #26]

  imageleft = imageright = Points->X;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002946:	83fb      	strh	r3, [r7, #30]
 8002948:	8bfb      	ldrh	r3, [r7, #30]
 800294a:	843b      	strh	r3, [r7, #32]
  imagetop= imagebottom = Points->Y;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002952:	837b      	strh	r3, [r7, #26]
 8002954:	8b7b      	ldrh	r3, [r7, #26]
 8002956:	83bb      	strh	r3, [r7, #28]

  for(counter = 1; counter < PointCount; counter++)
 8002958:	2301      	movs	r3, #1
 800295a:	847b      	strh	r3, [r7, #34]	; 0x22
 800295c:	e02f      	b.n	80029be <BSP_LCD_FillPolygon+0xc6>
  {
    pixelx = POLY_X(counter);
 800295e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	4413      	add	r3, r2
 8002968:	881b      	ldrh	r3, [r3, #0]
 800296a:	81bb      	strh	r3, [r7, #12]
    if(pixelx < imageleft)
 800296c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002970:	8c3b      	ldrh	r3, [r7, #32]
 8002972:	429a      	cmp	r2, r3
 8002974:	da01      	bge.n	800297a <BSP_LCD_FillPolygon+0x82>
    {
      imageleft = pixelx;
 8002976:	89bb      	ldrh	r3, [r7, #12]
 8002978:	843b      	strh	r3, [r7, #32]
    }
    if(pixelx > imageright)
 800297a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800297e:	8bfb      	ldrh	r3, [r7, #30]
 8002980:	429a      	cmp	r2, r3
 8002982:	dd01      	ble.n	8002988 <BSP_LCD_FillPolygon+0x90>
    {
      imageright = pixelx;
 8002984:	89bb      	ldrh	r3, [r7, #12]
 8002986:	83fb      	strh	r3, [r7, #30]
    }

    pixely = POLY_Y(counter);
 8002988:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	4413      	add	r3, r2
 8002992:	885b      	ldrh	r3, [r3, #2]
 8002994:	817b      	strh	r3, [r7, #10]
    if(pixely < imagetop)
 8002996:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800299a:	8bbb      	ldrh	r3, [r7, #28]
 800299c:	429a      	cmp	r2, r3
 800299e:	da01      	bge.n	80029a4 <BSP_LCD_FillPolygon+0xac>
    { 
      imagetop = pixely;
 80029a0:	897b      	ldrh	r3, [r7, #10]
 80029a2:	83bb      	strh	r3, [r7, #28]
    }
    if(pixely > imagebottom)
 80029a4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80029a8:	8b7b      	ldrh	r3, [r7, #26]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	dd01      	ble.n	80029b2 <BSP_LCD_FillPolygon+0xba>
    {
      imagebottom = pixely;
 80029ae:	897b      	ldrh	r3, [r7, #10]
 80029b0:	837b      	strh	r3, [r7, #26]
  for(counter = 1; counter < PointCount; counter++)
 80029b2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	3301      	adds	r3, #1
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	847b      	strh	r3, [r7, #34]	; 0x22
 80029be:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 80029c2:	887b      	ldrh	r3, [r7, #2]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	dbca      	blt.n	800295e <BSP_LCD_FillPolygon+0x66>
    }
  }  

  if(PointCount < 2)
 80029c8:	887b      	ldrh	r3, [r7, #2]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d972      	bls.n	8002ab4 <BSP_LCD_FillPolygon+0x1bc>
  {
    return;
  }

  xcenter = (imageleft + imageright)/2;
 80029ce:	8c3a      	ldrh	r2, [r7, #32]
 80029d0:	8bfb      	ldrh	r3, [r7, #30]
 80029d2:	4413      	add	r3, r2
 80029d4:	0fda      	lsrs	r2, r3, #31
 80029d6:	4413      	add	r3, r2
 80029d8:	105b      	asrs	r3, r3, #1
 80029da:	82bb      	strh	r3, [r7, #20]
  ycenter = (imagebottom + imagetop)/2;
 80029dc:	8b7a      	ldrh	r2, [r7, #26]
 80029de:	8bbb      	ldrh	r3, [r7, #28]
 80029e0:	4413      	add	r3, r2
 80029e2:	0fda      	lsrs	r2, r3, #31
 80029e4:	4413      	add	r3, r2
 80029e6:	105b      	asrs	r3, r3, #1
 80029e8:	827b      	strh	r3, [r7, #18]
 
  xfirst = Points->X;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	881b      	ldrh	r3, [r3, #0]
 80029ee:	823b      	strh	r3, [r7, #16]
  yfirst = Points->Y;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	885b      	ldrh	r3, [r3, #2]
 80029f4:	81fb      	strh	r3, [r7, #14]

  while(--PointCount)
 80029f6:	e032      	b.n	8002a5e <BSP_LCD_FillPolygon+0x166>
  {
    x = Points->X;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	881b      	ldrh	r3, [r3, #0]
 80029fc:	833b      	strh	r3, [r7, #24]
    y = Points->Y;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	885b      	ldrh	r3, [r3, #2]
 8002a02:	82fb      	strh	r3, [r7, #22]
    Points++;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	3304      	adds	r3, #4
 8002a08:	607b      	str	r3, [r7, #4]
    x2 = Points->X;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	881b      	ldrh	r3, [r3, #0]
 8002a0e:	84fb      	strh	r3, [r7, #38]	; 0x26
    y2 = Points->Y;    
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	885b      	ldrh	r3, [r3, #2]
 8002a14:	84bb      	strh	r3, [r7, #36]	; 0x24
  
    BSP_LCD_FillTriangle(x, x2, xcenter, y, y2, ycenter);
 8002a16:	8b38      	ldrh	r0, [r7, #24]
 8002a18:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8002a1a:	8abc      	ldrh	r4, [r7, #20]
 8002a1c:	8afd      	ldrh	r5, [r7, #22]
 8002a1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a20:	8a7a      	ldrh	r2, [r7, #18]
 8002a22:	9201      	str	r2, [sp, #4]
 8002a24:	9300      	str	r3, [sp, #0]
 8002a26:	462b      	mov	r3, r5
 8002a28:	4622      	mov	r2, r4
 8002a2a:	f7ff fea7 	bl	800277c <BSP_LCD_FillTriangle>
    BSP_LCD_FillTriangle(x, xcenter, x2, y, ycenter, y2);
 8002a2e:	8b38      	ldrh	r0, [r7, #24]
 8002a30:	8ab9      	ldrh	r1, [r7, #20]
 8002a32:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8002a34:	8afd      	ldrh	r5, [r7, #22]
 8002a36:	8a7b      	ldrh	r3, [r7, #18]
 8002a38:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a3a:	9201      	str	r2, [sp, #4]
 8002a3c:	9300      	str	r3, [sp, #0]
 8002a3e:	462b      	mov	r3, r5
 8002a40:	4622      	mov	r2, r4
 8002a42:	f7ff fe9b 	bl	800277c <BSP_LCD_FillTriangle>
    BSP_LCD_FillTriangle(xcenter, x2, x, ycenter, y2, y);   
 8002a46:	8ab8      	ldrh	r0, [r7, #20]
 8002a48:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8002a4a:	8b3c      	ldrh	r4, [r7, #24]
 8002a4c:	8a7d      	ldrh	r5, [r7, #18]
 8002a4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a50:	8afa      	ldrh	r2, [r7, #22]
 8002a52:	9201      	str	r2, [sp, #4]
 8002a54:	9300      	str	r3, [sp, #0]
 8002a56:	462b      	mov	r3, r5
 8002a58:	4622      	mov	r2, r4
 8002a5a:	f7ff fe8f 	bl	800277c <BSP_LCD_FillTriangle>
  while(--PointCount)
 8002a5e:	887b      	ldrh	r3, [r7, #2]
 8002a60:	3b01      	subs	r3, #1
 8002a62:	807b      	strh	r3, [r7, #2]
 8002a64:	887b      	ldrh	r3, [r7, #2]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1c6      	bne.n	80029f8 <BSP_LCD_FillPolygon+0x100>
  }
  
  BSP_LCD_FillTriangle(xfirst, x2, xcenter, yfirst, y2, ycenter);
 8002a6a:	8a38      	ldrh	r0, [r7, #16]
 8002a6c:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8002a6e:	8abc      	ldrh	r4, [r7, #20]
 8002a70:	89fd      	ldrh	r5, [r7, #14]
 8002a72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a74:	8a7a      	ldrh	r2, [r7, #18]
 8002a76:	9201      	str	r2, [sp, #4]
 8002a78:	9300      	str	r3, [sp, #0]
 8002a7a:	462b      	mov	r3, r5
 8002a7c:	4622      	mov	r2, r4
 8002a7e:	f7ff fe7d 	bl	800277c <BSP_LCD_FillTriangle>
  BSP_LCD_FillTriangle(xfirst, xcenter, x2, yfirst, ycenter, y2);
 8002a82:	8a38      	ldrh	r0, [r7, #16]
 8002a84:	8ab9      	ldrh	r1, [r7, #20]
 8002a86:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8002a88:	89fd      	ldrh	r5, [r7, #14]
 8002a8a:	8a7b      	ldrh	r3, [r7, #18]
 8002a8c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a8e:	9201      	str	r2, [sp, #4]
 8002a90:	9300      	str	r3, [sp, #0]
 8002a92:	462b      	mov	r3, r5
 8002a94:	4622      	mov	r2, r4
 8002a96:	f7ff fe71 	bl	800277c <BSP_LCD_FillTriangle>
  BSP_LCD_FillTriangle(xcenter, x2, xfirst, ycenter, y2, yfirst);   
 8002a9a:	8ab8      	ldrh	r0, [r7, #20]
 8002a9c:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8002a9e:	8a3c      	ldrh	r4, [r7, #16]
 8002aa0:	8a7d      	ldrh	r5, [r7, #18]
 8002aa2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002aa4:	89fa      	ldrh	r2, [r7, #14]
 8002aa6:	9201      	str	r2, [sp, #4]
 8002aa8:	9300      	str	r3, [sp, #0]
 8002aaa:	462b      	mov	r3, r5
 8002aac:	4622      	mov	r2, r4
 8002aae:	f7ff fe65 	bl	800277c <BSP_LCD_FillTriangle>
 8002ab2:	e000      	b.n	8002ab6 <BSP_LCD_FillPolygon+0x1be>
    return;
 8002ab4:	bf00      	nop
}
 8002ab6:	3728      	adds	r7, #40	; 0x28
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bdb0      	pop	{r4, r5, r7, pc}

08002abc <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
  if(LcdDrv->DisplayOn != NULL)
 8002ac0:	4b05      	ldr	r3, [pc, #20]	; (8002ad8 <BSP_LCD_DisplayOn+0x1c>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8002aca:	4b03      	ldr	r3, [pc, #12]	; (8002ad8 <BSP_LCD_DisplayOn+0x1c>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	4798      	blx	r3
  }
}
 8002ad2:	bf00      	nop
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	20000694 	.word	0x20000694

08002adc <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b08e      	sub	sp, #56	; 0x38
 8002ae0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	623b      	str	r3, [r7, #32]
 8002ae6:	4b61      	ldr	r3, [pc, #388]	; (8002c6c <BSP_LCD_MspInit+0x190>)
 8002ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aea:	4a60      	ldr	r2, [pc, #384]	; (8002c6c <BSP_LCD_MspInit+0x190>)
 8002aec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002af0:	6453      	str	r3, [r2, #68]	; 0x44
 8002af2:	4b5e      	ldr	r3, [pc, #376]	; (8002c6c <BSP_LCD_MspInit+0x190>)
 8002af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002af6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002afa:	623b      	str	r3, [r7, #32]
 8002afc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 8002afe:	2300      	movs	r3, #0
 8002b00:	61fb      	str	r3, [r7, #28]
 8002b02:	4b5a      	ldr	r3, [pc, #360]	; (8002c6c <BSP_LCD_MspInit+0x190>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b06:	4a59      	ldr	r2, [pc, #356]	; (8002c6c <BSP_LCD_MspInit+0x190>)
 8002b08:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b0e:	4b57      	ldr	r3, [pc, #348]	; (8002c6c <BSP_LCD_MspInit+0x190>)
 8002b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b16:	61fb      	str	r3, [r7, #28]
 8002b18:	69fb      	ldr	r3, [r7, #28]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	61bb      	str	r3, [r7, #24]
 8002b1e:	4b53      	ldr	r3, [pc, #332]	; (8002c6c <BSP_LCD_MspInit+0x190>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b22:	4a52      	ldr	r2, [pc, #328]	; (8002c6c <BSP_LCD_MspInit+0x190>)
 8002b24:	f043 0301 	orr.w	r3, r3, #1
 8002b28:	6313      	str	r3, [r2, #48]	; 0x30
 8002b2a:	4b50      	ldr	r3, [pc, #320]	; (8002c6c <BSP_LCD_MspInit+0x190>)
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2e:	f003 0301 	and.w	r3, r3, #1
 8002b32:	61bb      	str	r3, [r7, #24]
 8002b34:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b36:	2300      	movs	r3, #0
 8002b38:	617b      	str	r3, [r7, #20]
 8002b3a:	4b4c      	ldr	r3, [pc, #304]	; (8002c6c <BSP_LCD_MspInit+0x190>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	4a4b      	ldr	r2, [pc, #300]	; (8002c6c <BSP_LCD_MspInit+0x190>)
 8002b40:	f043 0302 	orr.w	r3, r3, #2
 8002b44:	6313      	str	r3, [r2, #48]	; 0x30
 8002b46:	4b49      	ldr	r3, [pc, #292]	; (8002c6c <BSP_LCD_MspInit+0x190>)
 8002b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	617b      	str	r3, [r7, #20]
 8002b50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b52:	2300      	movs	r3, #0
 8002b54:	613b      	str	r3, [r7, #16]
 8002b56:	4b45      	ldr	r3, [pc, #276]	; (8002c6c <BSP_LCD_MspInit+0x190>)
 8002b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5a:	4a44      	ldr	r2, [pc, #272]	; (8002c6c <BSP_LCD_MspInit+0x190>)
 8002b5c:	f043 0304 	orr.w	r3, r3, #4
 8002b60:	6313      	str	r3, [r2, #48]	; 0x30
 8002b62:	4b42      	ldr	r3, [pc, #264]	; (8002c6c <BSP_LCD_MspInit+0x190>)
 8002b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b66:	f003 0304 	and.w	r3, r3, #4
 8002b6a:	613b      	str	r3, [r7, #16]
 8002b6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b6e:	2300      	movs	r3, #0
 8002b70:	60fb      	str	r3, [r7, #12]
 8002b72:	4b3e      	ldr	r3, [pc, #248]	; (8002c6c <BSP_LCD_MspInit+0x190>)
 8002b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b76:	4a3d      	ldr	r2, [pc, #244]	; (8002c6c <BSP_LCD_MspInit+0x190>)
 8002b78:	f043 0308 	orr.w	r3, r3, #8
 8002b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b7e:	4b3b      	ldr	r3, [pc, #236]	; (8002c6c <BSP_LCD_MspInit+0x190>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	f003 0308 	and.w	r3, r3, #8
 8002b86:	60fb      	str	r3, [r7, #12]
 8002b88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	60bb      	str	r3, [r7, #8]
 8002b8e:	4b37      	ldr	r3, [pc, #220]	; (8002c6c <BSP_LCD_MspInit+0x190>)
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b92:	4a36      	ldr	r2, [pc, #216]	; (8002c6c <BSP_LCD_MspInit+0x190>)
 8002b94:	f043 0320 	orr.w	r3, r3, #32
 8002b98:	6313      	str	r3, [r2, #48]	; 0x30
 8002b9a:	4b34      	ldr	r3, [pc, #208]	; (8002c6c <BSP_LCD_MspInit+0x190>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	f003 0320 	and.w	r3, r3, #32
 8002ba2:	60bb      	str	r3, [r7, #8]
 8002ba4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	607b      	str	r3, [r7, #4]
 8002baa:	4b30      	ldr	r3, [pc, #192]	; (8002c6c <BSP_LCD_MspInit+0x190>)
 8002bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bae:	4a2f      	ldr	r2, [pc, #188]	; (8002c6c <BSP_LCD_MspInit+0x190>)
 8002bb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bb6:	4b2d      	ldr	r3, [pc, #180]	; (8002c6c <BSP_LCD_MspInit+0x190>)
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bbe:	607b      	str	r3, [r7, #4]
 8002bc0:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8002bc2:	f641 0358 	movw	r3, #6232	; 0x1858
 8002bc6:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002bc8:	2302      	movs	r3, #2
 8002bca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8002bd4:	230e      	movs	r3, #14
 8002bd6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002bd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bdc:	4619      	mov	r1, r3
 8002bde:	4824      	ldr	r0, [pc, #144]	; (8002c70 <BSP_LCD_MspInit+0x194>)
 8002be0:	f001 f86a 	bl	8003cb8 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8002be4:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002be8:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002bea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bee:	4619      	mov	r1, r3
 8002bf0:	4820      	ldr	r0, [pc, #128]	; (8002c74 <BSP_LCD_MspInit+0x198>)
 8002bf2:	f001 f861 	bl	8003cb8 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8002bf6:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002bfa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002bfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c00:	4619      	mov	r1, r3
 8002c02:	481d      	ldr	r0, [pc, #116]	; (8002c78 <BSP_LCD_MspInit+0x19c>)
 8002c04:	f001 f858 	bl	8003cb8 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8002c08:	2348      	movs	r3, #72	; 0x48
 8002c0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002c0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c10:	4619      	mov	r1, r3
 8002c12:	481a      	ldr	r0, [pc, #104]	; (8002c7c <BSP_LCD_MspInit+0x1a0>)
 8002c14:	f001 f850 	bl	8003cb8 <HAL_GPIO_Init>
  
 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8002c18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8002c1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c22:	4619      	mov	r1, r3
 8002c24:	4816      	ldr	r0, [pc, #88]	; (8002c80 <BSP_LCD_MspInit+0x1a4>)
 8002c26:	f001 f847 	bl	8003cb8 <HAL_GPIO_Init>

 /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8002c2a:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8002c2e:	627b      	str	r3, [r7, #36]	; 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c34:	4619      	mov	r1, r3
 8002c36:	4813      	ldr	r0, [pc, #76]	; (8002c84 <BSP_LCD_MspInit+0x1a8>)
 8002c38:	f001 f83e 	bl	8003cb8 <HAL_GPIO_Init>
 
  /* GPIOB configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8002c40:	2309      	movs	r3, #9
 8002c42:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c48:	4619      	mov	r1, r3
 8002c4a:	480a      	ldr	r0, [pc, #40]	; (8002c74 <BSP_LCD_MspInit+0x198>)
 8002c4c:	f001 f834 	bl	8003cb8 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8002c50:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002c54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002c56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	4809      	ldr	r0, [pc, #36]	; (8002c84 <BSP_LCD_MspInit+0x1a8>)
 8002c5e:	f001 f82b 	bl	8003cb8 <HAL_GPIO_Init>
}
 8002c62:	bf00      	nop
 8002c64:	3738      	adds	r7, #56	; 0x38
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	40023800 	.word	0x40023800
 8002c70:	40020000 	.word	0x40020000
 8002c74:	40020400 	.word	0x40020400
 8002c78:	40020800 	.word	0x40020800
 8002c7c:	40020c00 	.word	0x40020c00
 8002c80:	40021400 	.word	0x40021400
 8002c84:	40021800 	.word	0x40021800

08002c88 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002c88:	b5b0      	push	{r4, r5, r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	4603      	mov	r3, r0
 8002c90:	603a      	str	r2, [r7, #0]
 8002c92:	80fb      	strh	r3, [r7, #6]
 8002c94:	460b      	mov	r3, r1
 8002c96:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002c98:	4b0c      	ldr	r3, [pc, #48]	; (8002ccc <BSP_LCD_DrawPixel+0x44>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a0c      	ldr	r2, [pc, #48]	; (8002cd0 <BSP_LCD_DrawPixel+0x48>)
 8002c9e:	2134      	movs	r1, #52	; 0x34
 8002ca0:	fb01 f303 	mul.w	r3, r1, r3
 8002ca4:	4413      	add	r3, r2
 8002ca6:	335c      	adds	r3, #92	; 0x5c
 8002ca8:	681c      	ldr	r4, [r3, #0]
 8002caa:	88bd      	ldrh	r5, [r7, #4]
 8002cac:	f7ff fb86 	bl	80023bc <BSP_LCD_GetXSize>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	fb03 f205 	mul.w	r2, r3, r5
 8002cb6:	88fb      	ldrh	r3, [r7, #6]
 8002cb8:	4413      	add	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	4423      	add	r3, r4
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	6013      	str	r3, [r2, #0]
}
 8002cc4:	bf00      	nop
 8002cc6:	3708      	adds	r7, #8
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bdb0      	pop	{r4, r5, r7, pc}
 8002ccc:	20000678 	.word	0x20000678
 8002cd0:	20000560 	.word	0x20000560

08002cd4 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af02      	add	r7, sp, #8
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
 8002ce0:	603b      	str	r3, [r7, #0]
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8002ce2:	4b16      	ldr	r3, [pc, #88]	; (8002d3c <FillBuffer+0x68>)
 8002ce4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002ce8:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8002cea:	4b14      	ldr	r3, [pc, #80]	; (8002d3c <FillBuffer+0x68>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8002cf0:	4a12      	ldr	r2, [pc, #72]	; (8002d3c <FillBuffer+0x68>)
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	60d3      	str	r3, [r2, #12]
  
  Dma2dHandler.Instance = DMA2D; 
 8002cf6:	4b11      	ldr	r3, [pc, #68]	; (8002d3c <FillBuffer+0x68>)
 8002cf8:	4a11      	ldr	r2, [pc, #68]	; (8002d40 <FillBuffer+0x6c>)
 8002cfa:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8002cfc:	480f      	ldr	r0, [pc, #60]	; (8002d3c <FillBuffer+0x68>)
 8002cfe:	f000 fd45 	bl	800378c <HAL_DMA2D_Init>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d115      	bne.n	8002d34 <FillBuffer+0x60>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8002d08:	68f9      	ldr	r1, [r7, #12]
 8002d0a:	480c      	ldr	r0, [pc, #48]	; (8002d3c <FillBuffer+0x68>)
 8002d0c:	f000 fea6 	bl	8003a5c <HAL_DMA2D_ConfigLayer>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10e      	bne.n	8002d34 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002d16:	68ba      	ldr	r2, [r7, #8]
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	9300      	str	r3, [sp, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	69f9      	ldr	r1, [r7, #28]
 8002d20:	4806      	ldr	r0, [pc, #24]	; (8002d3c <FillBuffer+0x68>)
 8002d22:	f000 fd86 	bl	8003832 <HAL_DMA2D_Start>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d103      	bne.n	8002d34 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8002d2c:	210a      	movs	r1, #10
 8002d2e:	4803      	ldr	r0, [pc, #12]	; (8002d3c <FillBuffer+0x68>)
 8002d30:	f000 fdaa 	bl	8003888 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8002d34:	bf00      	nop
 8002d36:	3710      	adds	r7, #16
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	20000608 	.word	0x20000608
 8002d40:	4002b000 	.word	0x4002b000

08002d44 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002d48:	4b29      	ldr	r3, [pc, #164]	; (8002df0 <BSP_SDRAM_Init+0xac>)
 8002d4a:	4a2a      	ldr	r2, [pc, #168]	; (8002df4 <BSP_SDRAM_Init+0xb0>)
 8002d4c:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 8002d4e:	4b2a      	ldr	r3, [pc, #168]	; (8002df8 <BSP_SDRAM_Init+0xb4>)
 8002d50:	2202      	movs	r2, #2
 8002d52:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8002d54:	4b28      	ldr	r3, [pc, #160]	; (8002df8 <BSP_SDRAM_Init+0xb4>)
 8002d56:	2207      	movs	r2, #7
 8002d58:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8002d5a:	4b27      	ldr	r3, [pc, #156]	; (8002df8 <BSP_SDRAM_Init+0xb4>)
 8002d5c:	2204      	movs	r2, #4
 8002d5e:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 8002d60:	4b25      	ldr	r3, [pc, #148]	; (8002df8 <BSP_SDRAM_Init+0xb4>)
 8002d62:	2207      	movs	r2, #7
 8002d64:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8002d66:	4b24      	ldr	r3, [pc, #144]	; (8002df8 <BSP_SDRAM_Init+0xb4>)
 8002d68:	2202      	movs	r2, #2
 8002d6a:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8002d6c:	4b22      	ldr	r3, [pc, #136]	; (8002df8 <BSP_SDRAM_Init+0xb4>)
 8002d6e:	2202      	movs	r2, #2
 8002d70:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 8002d72:	4b21      	ldr	r3, [pc, #132]	; (8002df8 <BSP_SDRAM_Init+0xb4>)
 8002d74:	2202      	movs	r2, #2
 8002d76:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8002d78:	4b1d      	ldr	r3, [pc, #116]	; (8002df0 <BSP_SDRAM_Init+0xac>)
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002d7e:	4b1c      	ldr	r3, [pc, #112]	; (8002df0 <BSP_SDRAM_Init+0xac>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002d84:	4b1a      	ldr	r3, [pc, #104]	; (8002df0 <BSP_SDRAM_Init+0xac>)
 8002d86:	2204      	movs	r2, #4
 8002d88:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002d8a:	4b19      	ldr	r3, [pc, #100]	; (8002df0 <BSP_SDRAM_Init+0xac>)
 8002d8c:	2210      	movs	r2, #16
 8002d8e:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002d90:	4b17      	ldr	r3, [pc, #92]	; (8002df0 <BSP_SDRAM_Init+0xac>)
 8002d92:	2240      	movs	r2, #64	; 0x40
 8002d94:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8002d96:	4b16      	ldr	r3, [pc, #88]	; (8002df0 <BSP_SDRAM_Init+0xac>)
 8002d98:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002d9c:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002d9e:	4b14      	ldr	r3, [pc, #80]	; (8002df0 <BSP_SDRAM_Init+0xac>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002da4:	4b12      	ldr	r3, [pc, #72]	; (8002df0 <BSP_SDRAM_Init+0xac>)
 8002da6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002daa:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8002dac:	4b10      	ldr	r3, [pc, #64]	; (8002df0 <BSP_SDRAM_Init+0xac>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8002db2:	4b0f      	ldr	r3, [pc, #60]	; (8002df0 <BSP_SDRAM_Init+0xac>)
 8002db4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002db8:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8002dba:	2100      	movs	r1, #0
 8002dbc:	480c      	ldr	r0, [pc, #48]	; (8002df0 <BSP_SDRAM_Init+0xac>)
 8002dbe:	f000 f87f 	bl	8002ec0 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8002dc2:	490d      	ldr	r1, [pc, #52]	; (8002df8 <BSP_SDRAM_Init+0xb4>)
 8002dc4:	480a      	ldr	r0, [pc, #40]	; (8002df0 <BSP_SDRAM_Init+0xac>)
 8002dc6:	f003 fe15 	bl	80069f4 <HAL_SDRAM_Init>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d003      	beq.n	8002dd8 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8002dd0:	4b0a      	ldr	r3, [pc, #40]	; (8002dfc <BSP_SDRAM_Init+0xb8>)
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	701a      	strb	r2, [r3, #0]
 8002dd6:	e002      	b.n	8002dde <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8002dd8:	4b08      	ldr	r3, [pc, #32]	; (8002dfc <BSP_SDRAM_Init+0xb8>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002dde:	f240 506a 	movw	r0, #1386	; 0x56a
 8002de2:	f000 f80d 	bl	8002e00 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8002de6:	4b05      	ldr	r3, [pc, #20]	; (8002dfc <BSP_SDRAM_Init+0xb8>)
 8002de8:	781b      	ldrb	r3, [r3, #0]
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	20000698 	.word	0x20000698
 8002df4:	a0000140 	.word	0xa0000140
 8002df8:	200006cc 	.word	0x200006cc
 8002dfc:	2000007c 	.word	0x2000007c

08002e00 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8002e0c:	4b2a      	ldr	r3, [pc, #168]	; (8002eb8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e0e:	2201      	movs	r2, #1
 8002e10:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002e12:	4b29      	ldr	r3, [pc, #164]	; (8002eb8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e14:	2208      	movs	r2, #8
 8002e16:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002e18:	4b27      	ldr	r3, [pc, #156]	; (8002eb8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002e1e:	4b26      	ldr	r3, [pc, #152]	; (8002eb8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002e24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e28:	4923      	ldr	r1, [pc, #140]	; (8002eb8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e2a:	4824      	ldr	r0, [pc, #144]	; (8002ebc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002e2c:	f003 fe20 	bl	8006a70 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8002e30:	2001      	movs	r0, #1
 8002e32:	f000 f993 	bl	800315c <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8002e36:	4b20      	ldr	r3, [pc, #128]	; (8002eb8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e38:	2202      	movs	r2, #2
 8002e3a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002e3c:	4b1e      	ldr	r3, [pc, #120]	; (8002eb8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e3e:	2208      	movs	r2, #8
 8002e40:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002e42:	4b1d      	ldr	r3, [pc, #116]	; (8002eb8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e44:	2201      	movs	r2, #1
 8002e46:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002e48:	4b1b      	ldr	r3, [pc, #108]	; (8002eb8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8002e4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e52:	4919      	ldr	r1, [pc, #100]	; (8002eb8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e54:	4819      	ldr	r0, [pc, #100]	; (8002ebc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002e56:	f003 fe0b 	bl	8006a70 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002e5a:	4b17      	ldr	r3, [pc, #92]	; (8002eb8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e5c:	2203      	movs	r2, #3
 8002e5e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002e60:	4b15      	ldr	r3, [pc, #84]	; (8002eb8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e62:	2208      	movs	r2, #8
 8002e64:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8002e66:	4b14      	ldr	r3, [pc, #80]	; (8002eb8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e68:	2204      	movs	r2, #4
 8002e6a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002e6c:	4b12      	ldr	r3, [pc, #72]	; (8002eb8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002e72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e76:	4910      	ldr	r1, [pc, #64]	; (8002eb8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e78:	4810      	ldr	r0, [pc, #64]	; (8002ebc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002e7a:	f003 fdf9 	bl	8006a70 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8002e7e:	f44f 730c 	mov.w	r3, #560	; 0x230
 8002e82:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8002e84:	4b0c      	ldr	r3, [pc, #48]	; (8002eb8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e86:	2204      	movs	r2, #4
 8002e88:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002e8a:	4b0b      	ldr	r3, [pc, #44]	; (8002eb8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e8c:	2208      	movs	r2, #8
 8002e8e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002e90:	4b09      	ldr	r3, [pc, #36]	; (8002eb8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e92:	2201      	movs	r2, #1
 8002e94:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	4a07      	ldr	r2, [pc, #28]	; (8002eb8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002e9a:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002e9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ea0:	4905      	ldr	r1, [pc, #20]	; (8002eb8 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002ea2:	4806      	ldr	r0, [pc, #24]	; (8002ebc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002ea4:	f003 fde4 	bl	8006a70 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8002ea8:	6879      	ldr	r1, [r7, #4]
 8002eaa:	4804      	ldr	r0, [pc, #16]	; (8002ebc <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002eac:	f003 fe15 	bl	8006ada <HAL_SDRAM_ProgramRefreshRate>
}
 8002eb0:	bf00      	nop
 8002eb2:	3710      	adds	r7, #16
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	200006e8 	.word	0x200006e8
 8002ebc:	20000698 	.word	0x20000698

08002ec0 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b090      	sub	sp, #64	; 0x40
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f000 80ec 	beq.w	80030aa <BSP_SDRAM_MspInit+0x1ea>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ed6:	4b77      	ldr	r3, [pc, #476]	; (80030b4 <BSP_SDRAM_MspInit+0x1f4>)
 8002ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eda:	4a76      	ldr	r2, [pc, #472]	; (80030b4 <BSP_SDRAM_MspInit+0x1f4>)
 8002edc:	f043 0301 	orr.w	r3, r3, #1
 8002ee0:	6393      	str	r3, [r2, #56]	; 0x38
 8002ee2:	4b74      	ldr	r3, [pc, #464]	; (80030b4 <BSP_SDRAM_MspInit+0x1f4>)
 8002ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee6:	f003 0301 	and.w	r3, r3, #1
 8002eea:	62bb      	str	r3, [r7, #40]	; 0x28
 8002eec:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8002eee:	2300      	movs	r3, #0
 8002ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ef2:	4b70      	ldr	r3, [pc, #448]	; (80030b4 <BSP_SDRAM_MspInit+0x1f4>)
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef6:	4a6f      	ldr	r2, [pc, #444]	; (80030b4 <BSP_SDRAM_MspInit+0x1f4>)
 8002ef8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002efc:	6313      	str	r3, [r2, #48]	; 0x30
 8002efe:	4b6d      	ldr	r3, [pc, #436]	; (80030b4 <BSP_SDRAM_MspInit+0x1f4>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f06:	627b      	str	r3, [r7, #36]	; 0x24
 8002f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	623b      	str	r3, [r7, #32]
 8002f0e:	4b69      	ldr	r3, [pc, #420]	; (80030b4 <BSP_SDRAM_MspInit+0x1f4>)
 8002f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f12:	4a68      	ldr	r2, [pc, #416]	; (80030b4 <BSP_SDRAM_MspInit+0x1f4>)
 8002f14:	f043 0302 	orr.w	r3, r3, #2
 8002f18:	6313      	str	r3, [r2, #48]	; 0x30
 8002f1a:	4b66      	ldr	r3, [pc, #408]	; (80030b4 <BSP_SDRAM_MspInit+0x1f4>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	623b      	str	r3, [r7, #32]
 8002f24:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f26:	2300      	movs	r3, #0
 8002f28:	61fb      	str	r3, [r7, #28]
 8002f2a:	4b62      	ldr	r3, [pc, #392]	; (80030b4 <BSP_SDRAM_MspInit+0x1f4>)
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2e:	4a61      	ldr	r2, [pc, #388]	; (80030b4 <BSP_SDRAM_MspInit+0x1f4>)
 8002f30:	f043 0304 	orr.w	r3, r3, #4
 8002f34:	6313      	str	r3, [r2, #48]	; 0x30
 8002f36:	4b5f      	ldr	r3, [pc, #380]	; (80030b4 <BSP_SDRAM_MspInit+0x1f4>)
 8002f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3a:	f003 0304 	and.w	r3, r3, #4
 8002f3e:	61fb      	str	r3, [r7, #28]
 8002f40:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f42:	2300      	movs	r3, #0
 8002f44:	61bb      	str	r3, [r7, #24]
 8002f46:	4b5b      	ldr	r3, [pc, #364]	; (80030b4 <BSP_SDRAM_MspInit+0x1f4>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	4a5a      	ldr	r2, [pc, #360]	; (80030b4 <BSP_SDRAM_MspInit+0x1f4>)
 8002f4c:	f043 0308 	orr.w	r3, r3, #8
 8002f50:	6313      	str	r3, [r2, #48]	; 0x30
 8002f52:	4b58      	ldr	r3, [pc, #352]	; (80030b4 <BSP_SDRAM_MspInit+0x1f4>)
 8002f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f56:	f003 0308 	and.w	r3, r3, #8
 8002f5a:	61bb      	str	r3, [r7, #24]
 8002f5c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f5e:	2300      	movs	r3, #0
 8002f60:	617b      	str	r3, [r7, #20]
 8002f62:	4b54      	ldr	r3, [pc, #336]	; (80030b4 <BSP_SDRAM_MspInit+0x1f4>)
 8002f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f66:	4a53      	ldr	r2, [pc, #332]	; (80030b4 <BSP_SDRAM_MspInit+0x1f4>)
 8002f68:	f043 0310 	orr.w	r3, r3, #16
 8002f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f6e:	4b51      	ldr	r3, [pc, #324]	; (80030b4 <BSP_SDRAM_MspInit+0x1f4>)
 8002f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f72:	f003 0310 	and.w	r3, r3, #16
 8002f76:	617b      	str	r3, [r7, #20]
 8002f78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	613b      	str	r3, [r7, #16]
 8002f7e:	4b4d      	ldr	r3, [pc, #308]	; (80030b4 <BSP_SDRAM_MspInit+0x1f4>)
 8002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f82:	4a4c      	ldr	r2, [pc, #304]	; (80030b4 <BSP_SDRAM_MspInit+0x1f4>)
 8002f84:	f043 0320 	orr.w	r3, r3, #32
 8002f88:	6313      	str	r3, [r2, #48]	; 0x30
 8002f8a:	4b4a      	ldr	r3, [pc, #296]	; (80030b4 <BSP_SDRAM_MspInit+0x1f4>)
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8e:	f003 0320 	and.w	r3, r3, #32
 8002f92:	613b      	str	r3, [r7, #16]
 8002f94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002f96:	2300      	movs	r3, #0
 8002f98:	60fb      	str	r3, [r7, #12]
 8002f9a:	4b46      	ldr	r3, [pc, #280]	; (80030b4 <BSP_SDRAM_MspInit+0x1f4>)
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9e:	4a45      	ldr	r2, [pc, #276]	; (80030b4 <BSP_SDRAM_MspInit+0x1f4>)
 8002fa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8002fa6:	4b43      	ldr	r3, [pc, #268]	; (80030b4 <BSP_SDRAM_MspInit+0x1f4>)
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fae:	60fb      	str	r3, [r7, #12]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8002fbe:	230c      	movs	r3, #12
 8002fc0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8002fc2:	2360      	movs	r3, #96	; 0x60
 8002fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8002fc6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fca:	4619      	mov	r1, r3
 8002fcc:	483a      	ldr	r0, [pc, #232]	; (80030b8 <BSP_SDRAM_MspInit+0x1f8>)
 8002fce:	f000 fe73 	bl	8003cb8 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8002fd6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fda:	4619      	mov	r1, r3
 8002fdc:	4837      	ldr	r0, [pc, #220]	; (80030bc <BSP_SDRAM_MspInit+0x1fc>)
 8002fde:	f000 fe6b 	bl	8003cb8 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8002fe2:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002fe8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fec:	4619      	mov	r1, r3
 8002fee:	4834      	ldr	r0, [pc, #208]	; (80030c0 <BSP_SDRAM_MspInit+0x200>)
 8002ff0:	f000 fe62 	bl	8003cb8 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8002ff4:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8002ffa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ffe:	4619      	mov	r1, r3
 8003000:	4830      	ldr	r0, [pc, #192]	; (80030c4 <BSP_SDRAM_MspInit+0x204>)
 8003002:	f000 fe59 	bl	8003cb8 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8003006:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800300a:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 800300c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003010:	4619      	mov	r1, r3
 8003012:	482d      	ldr	r0, [pc, #180]	; (80030c8 <BSP_SDRAM_MspInit+0x208>)
 8003014:	f000 fe50 	bl	8003cb8 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8003018:	f248 1333 	movw	r3, #33075	; 0x8133
 800301c:	62fb      	str	r3, [r7, #44]	; 0x2c
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800301e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003022:	4619      	mov	r1, r3
 8003024:	4829      	ldr	r0, [pc, #164]	; (80030cc <BSP_SDRAM_MspInit+0x20c>)
 8003026:	f000 fe47 	bl	8003cb8 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800302a:	4b29      	ldr	r3, [pc, #164]	; (80030d0 <BSP_SDRAM_MspInit+0x210>)
 800302c:	2200      	movs	r2, #0
 800302e:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003030:	4b27      	ldr	r3, [pc, #156]	; (80030d0 <BSP_SDRAM_MspInit+0x210>)
 8003032:	2280      	movs	r2, #128	; 0x80
 8003034:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003036:	4b26      	ldr	r3, [pc, #152]	; (80030d0 <BSP_SDRAM_MspInit+0x210>)
 8003038:	f44f 7200 	mov.w	r2, #512	; 0x200
 800303c:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 800303e:	4b24      	ldr	r3, [pc, #144]	; (80030d0 <BSP_SDRAM_MspInit+0x210>)
 8003040:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003044:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003046:	4b22      	ldr	r3, [pc, #136]	; (80030d0 <BSP_SDRAM_MspInit+0x210>)
 8003048:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800304c:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800304e:	4b20      	ldr	r3, [pc, #128]	; (80030d0 <BSP_SDRAM_MspInit+0x210>)
 8003050:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003054:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8003056:	4b1e      	ldr	r3, [pc, #120]	; (80030d0 <BSP_SDRAM_MspInit+0x210>)
 8003058:	2200      	movs	r2, #0
 800305a:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 800305c:	4b1c      	ldr	r3, [pc, #112]	; (80030d0 <BSP_SDRAM_MspInit+0x210>)
 800305e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003062:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8003064:	4b1a      	ldr	r3, [pc, #104]	; (80030d0 <BSP_SDRAM_MspInit+0x210>)
 8003066:	2200      	movs	r2, #0
 8003068:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800306a:	4b19      	ldr	r3, [pc, #100]	; (80030d0 <BSP_SDRAM_MspInit+0x210>)
 800306c:	2203      	movs	r2, #3
 800306e:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003070:	4b17      	ldr	r3, [pc, #92]	; (80030d0 <BSP_SDRAM_MspInit+0x210>)
 8003072:	2200      	movs	r2, #0
 8003074:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003076:	4b16      	ldr	r3, [pc, #88]	; (80030d0 <BSP_SDRAM_MspInit+0x210>)
 8003078:	2200      	movs	r2, #0
 800307a:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 800307c:	4b14      	ldr	r3, [pc, #80]	; (80030d0 <BSP_SDRAM_MspInit+0x210>)
 800307e:	4a15      	ldr	r2, [pc, #84]	; (80030d4 <BSP_SDRAM_MspInit+0x214>)
 8003080:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a12      	ldr	r2, [pc, #72]	; (80030d0 <BSP_SDRAM_MspInit+0x210>)
 8003086:	631a      	str	r2, [r3, #48]	; 0x30
 8003088:	4a11      	ldr	r2, [pc, #68]	; (80030d0 <BSP_SDRAM_MspInit+0x210>)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 800308e:	4810      	ldr	r0, [pc, #64]	; (80030d0 <BSP_SDRAM_MspInit+0x210>)
 8003090:	f000 fa4a 	bl	8003528 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8003094:	480e      	ldr	r0, [pc, #56]	; (80030d0 <BSP_SDRAM_MspInit+0x210>)
 8003096:	f000 f999 	bl	80033cc <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800309a:	2200      	movs	r2, #0
 800309c:	210f      	movs	r1, #15
 800309e:	2038      	movs	r0, #56	; 0x38
 80030a0:	f000 f95c 	bl	800335c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80030a4:	2038      	movs	r0, #56	; 0x38
 80030a6:	f000 f975 	bl	8003394 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 80030aa:	bf00      	nop
 80030ac:	3740      	adds	r7, #64	; 0x40
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	40023800 	.word	0x40023800
 80030b8:	40020400 	.word	0x40020400
 80030bc:	40020800 	.word	0x40020800
 80030c0:	40020c00 	.word	0x40020c00
 80030c4:	40021000 	.word	0x40021000
 80030c8:	40021400 	.word	0x40021400
 80030cc:	40021800 	.word	0x40021800
 80030d0:	200006f8 	.word	0x200006f8
 80030d4:	40026410 	.word	0x40026410

080030d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030dc:	4b0e      	ldr	r3, [pc, #56]	; (8003118 <HAL_Init+0x40>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a0d      	ldr	r2, [pc, #52]	; (8003118 <HAL_Init+0x40>)
 80030e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030e8:	4b0b      	ldr	r3, [pc, #44]	; (8003118 <HAL_Init+0x40>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a0a      	ldr	r2, [pc, #40]	; (8003118 <HAL_Init+0x40>)
 80030ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030f4:	4b08      	ldr	r3, [pc, #32]	; (8003118 <HAL_Init+0x40>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a07      	ldr	r2, [pc, #28]	; (8003118 <HAL_Init+0x40>)
 80030fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003100:	2003      	movs	r0, #3
 8003102:	f000 f920 	bl	8003346 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003106:	200f      	movs	r0, #15
 8003108:	f7fe f8a0 	bl	800124c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800310c:	f7fd fff8 	bl	8001100 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	40023c00 	.word	0x40023c00

0800311c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003120:	4b06      	ldr	r3, [pc, #24]	; (800313c <HAL_IncTick+0x20>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	461a      	mov	r2, r3
 8003126:	4b06      	ldr	r3, [pc, #24]	; (8003140 <HAL_IncTick+0x24>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4413      	add	r3, r2
 800312c:	4a04      	ldr	r2, [pc, #16]	; (8003140 <HAL_IncTick+0x24>)
 800312e:	6013      	str	r3, [r2, #0]
}
 8003130:	bf00      	nop
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	20000084 	.word	0x20000084
 8003140:	20000758 	.word	0x20000758

08003144 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  return uwTick;
 8003148:	4b03      	ldr	r3, [pc, #12]	; (8003158 <HAL_GetTick+0x14>)
 800314a:	681b      	ldr	r3, [r3, #0]
}
 800314c:	4618      	mov	r0, r3
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	20000758 	.word	0x20000758

0800315c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003164:	f7ff ffee 	bl	8003144 <HAL_GetTick>
 8003168:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003174:	d005      	beq.n	8003182 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003176:	4b0a      	ldr	r3, [pc, #40]	; (80031a0 <HAL_Delay+0x44>)
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	461a      	mov	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	4413      	add	r3, r2
 8003180:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003182:	bf00      	nop
 8003184:	f7ff ffde 	bl	8003144 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	429a      	cmp	r2, r3
 8003192:	d8f7      	bhi.n	8003184 <HAL_Delay+0x28>
  {
  }
}
 8003194:	bf00      	nop
 8003196:	bf00      	nop
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	20000084 	.word	0x20000084

080031a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f003 0307 	and.w	r3, r3, #7
 80031b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031b4:	4b0c      	ldr	r3, [pc, #48]	; (80031e8 <__NVIC_SetPriorityGrouping+0x44>)
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031ba:	68ba      	ldr	r2, [r7, #8]
 80031bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031c0:	4013      	ands	r3, r2
 80031c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80031d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031d6:	4a04      	ldr	r2, [pc, #16]	; (80031e8 <__NVIC_SetPriorityGrouping+0x44>)
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	60d3      	str	r3, [r2, #12]
}
 80031dc:	bf00      	nop
 80031de:	3714      	adds	r7, #20
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr
 80031e8:	e000ed00 	.word	0xe000ed00

080031ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031f0:	4b04      	ldr	r3, [pc, #16]	; (8003204 <__NVIC_GetPriorityGrouping+0x18>)
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	0a1b      	lsrs	r3, r3, #8
 80031f6:	f003 0307 	and.w	r3, r3, #7
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr
 8003204:	e000ed00 	.word	0xe000ed00

08003208 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	4603      	mov	r3, r0
 8003210:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003216:	2b00      	cmp	r3, #0
 8003218:	db0b      	blt.n	8003232 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800321a:	79fb      	ldrb	r3, [r7, #7]
 800321c:	f003 021f 	and.w	r2, r3, #31
 8003220:	4907      	ldr	r1, [pc, #28]	; (8003240 <__NVIC_EnableIRQ+0x38>)
 8003222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003226:	095b      	lsrs	r3, r3, #5
 8003228:	2001      	movs	r0, #1
 800322a:	fa00 f202 	lsl.w	r2, r0, r2
 800322e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003232:	bf00      	nop
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	e000e100 	.word	0xe000e100

08003244 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	4603      	mov	r3, r0
 800324c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800324e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003252:	2b00      	cmp	r3, #0
 8003254:	db12      	blt.n	800327c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003256:	79fb      	ldrb	r3, [r7, #7]
 8003258:	f003 021f 	and.w	r2, r3, #31
 800325c:	490a      	ldr	r1, [pc, #40]	; (8003288 <__NVIC_DisableIRQ+0x44>)
 800325e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003262:	095b      	lsrs	r3, r3, #5
 8003264:	2001      	movs	r0, #1
 8003266:	fa00 f202 	lsl.w	r2, r0, r2
 800326a:	3320      	adds	r3, #32
 800326c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003270:	f3bf 8f4f 	dsb	sy
}
 8003274:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003276:	f3bf 8f6f 	isb	sy
}
 800327a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr
 8003288:	e000e100 	.word	0xe000e100

0800328c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	4603      	mov	r3, r0
 8003294:	6039      	str	r1, [r7, #0]
 8003296:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329c:	2b00      	cmp	r3, #0
 800329e:	db0a      	blt.n	80032b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	b2da      	uxtb	r2, r3
 80032a4:	490c      	ldr	r1, [pc, #48]	; (80032d8 <__NVIC_SetPriority+0x4c>)
 80032a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032aa:	0112      	lsls	r2, r2, #4
 80032ac:	b2d2      	uxtb	r2, r2
 80032ae:	440b      	add	r3, r1
 80032b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032b4:	e00a      	b.n	80032cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	b2da      	uxtb	r2, r3
 80032ba:	4908      	ldr	r1, [pc, #32]	; (80032dc <__NVIC_SetPriority+0x50>)
 80032bc:	79fb      	ldrb	r3, [r7, #7]
 80032be:	f003 030f 	and.w	r3, r3, #15
 80032c2:	3b04      	subs	r3, #4
 80032c4:	0112      	lsls	r2, r2, #4
 80032c6:	b2d2      	uxtb	r2, r2
 80032c8:	440b      	add	r3, r1
 80032ca:	761a      	strb	r2, [r3, #24]
}
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr
 80032d8:	e000e100 	.word	0xe000e100
 80032dc:	e000ed00 	.word	0xe000ed00

080032e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b089      	sub	sp, #36	; 0x24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f003 0307 	and.w	r3, r3, #7
 80032f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	f1c3 0307 	rsb	r3, r3, #7
 80032fa:	2b04      	cmp	r3, #4
 80032fc:	bf28      	it	cs
 80032fe:	2304      	movcs	r3, #4
 8003300:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	3304      	adds	r3, #4
 8003306:	2b06      	cmp	r3, #6
 8003308:	d902      	bls.n	8003310 <NVIC_EncodePriority+0x30>
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	3b03      	subs	r3, #3
 800330e:	e000      	b.n	8003312 <NVIC_EncodePriority+0x32>
 8003310:	2300      	movs	r3, #0
 8003312:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003314:	f04f 32ff 	mov.w	r2, #4294967295
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	fa02 f303 	lsl.w	r3, r2, r3
 800331e:	43da      	mvns	r2, r3
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	401a      	ands	r2, r3
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003328:	f04f 31ff 	mov.w	r1, #4294967295
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	fa01 f303 	lsl.w	r3, r1, r3
 8003332:	43d9      	mvns	r1, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003338:	4313      	orrs	r3, r2
         );
}
 800333a:	4618      	mov	r0, r3
 800333c:	3724      	adds	r7, #36	; 0x24
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b082      	sub	sp, #8
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7ff ff28 	bl	80031a4 <__NVIC_SetPriorityGrouping>
}
 8003354:	bf00      	nop
 8003356:	3708      	adds	r7, #8
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af00      	add	r7, sp, #0
 8003362:	4603      	mov	r3, r0
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
 8003368:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800336a:	2300      	movs	r3, #0
 800336c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800336e:	f7ff ff3d 	bl	80031ec <__NVIC_GetPriorityGrouping>
 8003372:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	68b9      	ldr	r1, [r7, #8]
 8003378:	6978      	ldr	r0, [r7, #20]
 800337a:	f7ff ffb1 	bl	80032e0 <NVIC_EncodePriority>
 800337e:	4602      	mov	r2, r0
 8003380:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003384:	4611      	mov	r1, r2
 8003386:	4618      	mov	r0, r3
 8003388:	f7ff ff80 	bl	800328c <__NVIC_SetPriority>
}
 800338c:	bf00      	nop
 800338e:	3718      	adds	r7, #24
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	4603      	mov	r3, r0
 800339c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800339e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7ff ff30 	bl	8003208 <__NVIC_EnableIRQ>
}
 80033a8:	bf00      	nop
 80033aa:	3708      	adds	r7, #8
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	4603      	mov	r3, r0
 80033b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80033ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033be:	4618      	mov	r0, r3
 80033c0:	f7ff ff40 	bl	8003244 <__NVIC_DisableIRQ>
}
 80033c4:	bf00      	nop
 80033c6:	3708      	adds	r7, #8
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80033d4:	2300      	movs	r3, #0
 80033d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80033d8:	f7ff feb4 	bl	8003144 <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d101      	bne.n	80033e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e099      	b.n	800351c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2202      	movs	r2, #2
 80033ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f022 0201 	bic.w	r2, r2, #1
 8003406:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003408:	e00f      	b.n	800342a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800340a:	f7ff fe9b 	bl	8003144 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b05      	cmp	r3, #5
 8003416:	d908      	bls.n	800342a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2220      	movs	r2, #32
 800341c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2203      	movs	r2, #3
 8003422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e078      	b.n	800351c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1e8      	bne.n	800340a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	4b38      	ldr	r3, [pc, #224]	; (8003524 <HAL_DMA_Init+0x158>)
 8003444:	4013      	ands	r3, r2
 8003446:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003456:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003462:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800346e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a1b      	ldr	r3, [r3, #32]
 8003474:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	4313      	orrs	r3, r2
 800347a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003480:	2b04      	cmp	r3, #4
 8003482:	d107      	bne.n	8003494 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348c:	4313      	orrs	r3, r2
 800348e:	697a      	ldr	r2, [r7, #20]
 8003490:	4313      	orrs	r3, r2
 8003492:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	697a      	ldr	r2, [r7, #20]
 800349a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	f023 0307 	bic.w	r3, r3, #7
 80034aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ba:	2b04      	cmp	r3, #4
 80034bc:	d117      	bne.n	80034ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00e      	beq.n	80034ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 f8df 	bl	8003694 <DMA_CheckFifoParam>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d008      	beq.n	80034ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2240      	movs	r2, #64	; 0x40
 80034e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80034ea:	2301      	movs	r3, #1
 80034ec:	e016      	b.n	800351c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	697a      	ldr	r2, [r7, #20]
 80034f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f896 	bl	8003628 <DMA_CalcBaseAndBitshift>
 80034fc:	4603      	mov	r3, r0
 80034fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003504:	223f      	movs	r2, #63	; 0x3f
 8003506:	409a      	lsls	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3718      	adds	r7, #24
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	f010803f 	.word	0xf010803f

08003528 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e050      	b.n	80035dc <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d101      	bne.n	800354a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003546:	2302      	movs	r3, #2
 8003548:	e048      	b.n	80035dc <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f022 0201 	bic.w	r2, r2, #1
 8003558:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2200      	movs	r2, #0
 8003560:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2200      	movs	r2, #0
 8003568:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2200      	movs	r2, #0
 8003570:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2200      	movs	r2, #0
 8003578:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2200      	movs	r2, #0
 8003580:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2221      	movs	r2, #33	; 0x21
 8003588:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 f84c 	bl	8003628 <DMA_CalcBaseAndBitshift>
 8003590:	4603      	mov	r3, r0
 8003592:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035bc:	223f      	movs	r2, #63	; 0x3f
 80035be:	409a      	lsls	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d004      	beq.n	8003602 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2280      	movs	r2, #128	; 0x80
 80035fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e00c      	b.n	800361c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2205      	movs	r2, #5
 8003606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 0201 	bic.w	r2, r2, #1
 8003618:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	b2db      	uxtb	r3, r3
 8003636:	3b10      	subs	r3, #16
 8003638:	4a14      	ldr	r2, [pc, #80]	; (800368c <DMA_CalcBaseAndBitshift+0x64>)
 800363a:	fba2 2303 	umull	r2, r3, r2, r3
 800363e:	091b      	lsrs	r3, r3, #4
 8003640:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003642:	4a13      	ldr	r2, [pc, #76]	; (8003690 <DMA_CalcBaseAndBitshift+0x68>)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	4413      	add	r3, r2
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	461a      	mov	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2b03      	cmp	r3, #3
 8003654:	d909      	bls.n	800366a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800365e:	f023 0303 	bic.w	r3, r3, #3
 8003662:	1d1a      	adds	r2, r3, #4
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	659a      	str	r2, [r3, #88]	; 0x58
 8003668:	e007      	b.n	800367a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003672:	f023 0303 	bic.w	r3, r3, #3
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800367e:	4618      	mov	r0, r3
 8003680:	3714      	adds	r7, #20
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	aaaaaaab 	.word	0xaaaaaaab
 8003690:	080113d4 	.word	0x080113d4

08003694 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800369c:	2300      	movs	r3, #0
 800369e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d11f      	bne.n	80036ee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	2b03      	cmp	r3, #3
 80036b2:	d856      	bhi.n	8003762 <DMA_CheckFifoParam+0xce>
 80036b4:	a201      	add	r2, pc, #4	; (adr r2, 80036bc <DMA_CheckFifoParam+0x28>)
 80036b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ba:	bf00      	nop
 80036bc:	080036cd 	.word	0x080036cd
 80036c0:	080036df 	.word	0x080036df
 80036c4:	080036cd 	.word	0x080036cd
 80036c8:	08003763 	.word	0x08003763
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d046      	beq.n	8003766 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036dc:	e043      	b.n	8003766 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036e6:	d140      	bne.n	800376a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036ec:	e03d      	b.n	800376a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036f6:	d121      	bne.n	800373c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	2b03      	cmp	r3, #3
 80036fc:	d837      	bhi.n	800376e <DMA_CheckFifoParam+0xda>
 80036fe:	a201      	add	r2, pc, #4	; (adr r2, 8003704 <DMA_CheckFifoParam+0x70>)
 8003700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003704:	08003715 	.word	0x08003715
 8003708:	0800371b 	.word	0x0800371b
 800370c:	08003715 	.word	0x08003715
 8003710:	0800372d 	.word	0x0800372d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	73fb      	strb	r3, [r7, #15]
      break;
 8003718:	e030      	b.n	800377c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d025      	beq.n	8003772 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800372a:	e022      	b.n	8003772 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003730:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003734:	d11f      	bne.n	8003776 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800373a:	e01c      	b.n	8003776 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	2b02      	cmp	r3, #2
 8003740:	d903      	bls.n	800374a <DMA_CheckFifoParam+0xb6>
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	2b03      	cmp	r3, #3
 8003746:	d003      	beq.n	8003750 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003748:	e018      	b.n	800377c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	73fb      	strb	r3, [r7, #15]
      break;
 800374e:	e015      	b.n	800377c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003754:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00e      	beq.n	800377a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	73fb      	strb	r3, [r7, #15]
      break;
 8003760:	e00b      	b.n	800377a <DMA_CheckFifoParam+0xe6>
      break;
 8003762:	bf00      	nop
 8003764:	e00a      	b.n	800377c <DMA_CheckFifoParam+0xe8>
      break;
 8003766:	bf00      	nop
 8003768:	e008      	b.n	800377c <DMA_CheckFifoParam+0xe8>
      break;
 800376a:	bf00      	nop
 800376c:	e006      	b.n	800377c <DMA_CheckFifoParam+0xe8>
      break;
 800376e:	bf00      	nop
 8003770:	e004      	b.n	800377c <DMA_CheckFifoParam+0xe8>
      break;
 8003772:	bf00      	nop
 8003774:	e002      	b.n	800377c <DMA_CheckFifoParam+0xe8>
      break;   
 8003776:	bf00      	nop
 8003778:	e000      	b.n	800377c <DMA_CheckFifoParam+0xe8>
      break;
 800377a:	bf00      	nop
    }
  } 
  
  return status; 
 800377c:	7bfb      	ldrb	r3, [r7, #15]
}
 800377e:	4618      	mov	r0, r3
 8003780:	3714      	adds	r7, #20
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop

0800378c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e03b      	b.n	8003816 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d106      	bne.n	80037b8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f833 	bl	800381e <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2202      	movs	r2, #2
 80037bc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685a      	ldr	r2, [r3, #4]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037dc:	f023 0107 	bic.w	r1, r3, #7
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	430a      	orrs	r2, r1
 80037ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80037f6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	68d1      	ldr	r1, [r2, #12]
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	6812      	ldr	r2, [r2, #0]
 8003802:	430b      	orrs	r3, r1
 8003804:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 800381e:	b480      	push	{r7}
 8003820:	b083      	sub	sp, #12
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8003826:	bf00      	nop
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr

08003832 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b086      	sub	sp, #24
 8003836:	af02      	add	r7, sp, #8
 8003838:	60f8      	str	r0, [r7, #12]
 800383a:	60b9      	str	r1, [r7, #8]
 800383c:	607a      	str	r2, [r7, #4]
 800383e:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003846:	2b01      	cmp	r3, #1
 8003848:	d101      	bne.n	800384e <HAL_DMA2D_Start+0x1c>
 800384a:	2302      	movs	r3, #2
 800384c:	e018      	b.n	8003880 <HAL_DMA2D_Start+0x4e>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2202      	movs	r2, #2
 800385a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	9300      	str	r3, [sp, #0]
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	68b9      	ldr	r1, [r7, #8]
 8003868:	68f8      	ldr	r0, [r7, #12]
 800386a:	f000 f989 	bl	8003b80 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f042 0201 	orr.w	r2, r2, #1
 800387c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	3710      	adds	r7, #16
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8003892:	2300      	movs	r3, #0
 8003894:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0301 	and.w	r3, r3, #1
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d056      	beq.n	8003952 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80038a4:	f7ff fc4e 	bl	8003144 <HAL_GetTick>
 80038a8:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80038aa:	e04b      	b.n	8003944 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d023      	beq.n	8003906 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f003 0320 	and.w	r3, r3, #32
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d005      	beq.n	80038d4 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038cc:	f043 0202 	orr.w	r2, r3, #2
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d005      	beq.n	80038ea <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038e2:	f043 0201 	orr.w	r2, r3, #1
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2221      	movs	r2, #33	; 0x21
 80038f0:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2204      	movs	r2, #4
 80038f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e0a5      	b.n	8003a52 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800390c:	d01a      	beq.n	8003944 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800390e:	f7ff fc19 	bl	8003144 <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	683a      	ldr	r2, [r7, #0]
 800391a:	429a      	cmp	r2, r3
 800391c:	d302      	bcc.n	8003924 <HAL_DMA2D_PollForTransfer+0x9c>
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d10f      	bne.n	8003944 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003928:	f043 0220 	orr.w	r2, r3, #32
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2203      	movs	r2, #3
 8003934:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e086      	b.n	8003a52 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d0ac      	beq.n	80038ac <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	69db      	ldr	r3, [r3, #28]
 8003958:	f003 0320 	and.w	r3, r3, #32
 800395c:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003964:	f003 0320 	and.w	r3, r3, #32
 8003968:	693a      	ldr	r2, [r7, #16]
 800396a:	4313      	orrs	r3, r2
 800396c:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d061      	beq.n	8003a38 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8003974:	f7ff fbe6 	bl	8003144 <HAL_GetTick>
 8003978:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800397a:	e056      	b.n	8003a2a <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f003 0329 	and.w	r3, r3, #41	; 0x29
 800398a:	2b00      	cmp	r3, #0
 800398c:	d02e      	beq.n	80039ec <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f003 0308 	and.w	r3, r3, #8
 8003994:	2b00      	cmp	r3, #0
 8003996:	d005      	beq.n	80039a4 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800399c:	f043 0204 	orr.w	r2, r3, #4
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f003 0320 	and.w	r3, r3, #32
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d005      	beq.n	80039ba <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039b2:	f043 0202 	orr.w	r2, r3, #2
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d005      	beq.n	80039d0 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c8:	f043 0201 	orr.w	r2, r3, #1
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2229      	movs	r2, #41	; 0x29
 80039d6:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2204      	movs	r2, #4
 80039dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e032      	b.n	8003a52 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f2:	d01a      	beq.n	8003a2a <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80039f4:	f7ff fba6 	bl	8003144 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	683a      	ldr	r2, [r7, #0]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d302      	bcc.n	8003a0a <HAL_DMA2D_PollForTransfer+0x182>
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10f      	bne.n	8003a2a <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a0e:	f043 0220 	orr.w	r2, r3, #32
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2203      	movs	r2, #3
 8003a1a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e013      	b.n	8003a52 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f003 0310 	and.w	r3, r3, #16
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d0a1      	beq.n	800397c <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2212      	movs	r2, #18
 8003a3e:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3718      	adds	r7, #24
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
	...

08003a5c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b087      	sub	sp, #28
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d101      	bne.n	8003a7c <HAL_DMA2D_ConfigLayer+0x20>
 8003a78:	2302      	movs	r3, #2
 8003a7a:	e079      	b.n	8003b70 <HAL_DMA2D_ConfigLayer+0x114>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2202      	movs	r2, #2
 8003a88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	011b      	lsls	r3, r3, #4
 8003a90:	3318      	adds	r3, #24
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	4413      	add	r3, r2
 8003a96:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	685a      	ldr	r2, [r3, #4]
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	041b      	lsls	r3, r3, #16
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003aa6:	4b35      	ldr	r3, [pc, #212]	; (8003b7c <HAL_DMA2D_ConfigLayer+0x120>)
 8003aa8:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	2b0a      	cmp	r3, #10
 8003ab0:	d003      	beq.n	8003aba <HAL_DMA2D_ConfigLayer+0x5e>
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	2b09      	cmp	r3, #9
 8003ab8:	d107      	bne.n	8003aca <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	617b      	str	r3, [r7, #20]
 8003ac8:	e005      	b.n	8003ad6 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	061b      	lsls	r3, r3, #24
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d120      	bne.n	8003b1e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	43db      	mvns	r3, r3
 8003ae6:	ea02 0103 	and.w	r1, r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	430a      	orrs	r2, r1
 8003af2:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	6812      	ldr	r2, [r2, #0]
 8003afc:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	2b0a      	cmp	r3, #10
 8003b04:	d003      	beq.n	8003b0e <HAL_DMA2D_ConfigLayer+0xb2>
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	2b09      	cmp	r3, #9
 8003b0c:	d127      	bne.n	8003b5e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	68da      	ldr	r2, [r3, #12]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003b1a:	629a      	str	r2, [r3, #40]	; 0x28
 8003b1c:	e01f      	b.n	8003b5e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	69da      	ldr	r2, [r3, #28]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	43db      	mvns	r3, r3
 8003b28:	ea02 0103 	and.w	r1, r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	430a      	orrs	r2, r1
 8003b34:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	6812      	ldr	r2, [r2, #0]
 8003b3e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	2b0a      	cmp	r3, #10
 8003b46:	d003      	beq.n	8003b50 <HAL_DMA2D_ConfigLayer+0xf4>
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	2b09      	cmp	r3, #9
 8003b4e:	d106      	bne.n	8003b5e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	68da      	ldr	r2, [r3, #12]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003b5c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2201      	movs	r2, #1
 8003b62:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003b6e:	2300      	movs	r3, #0
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	371c      	adds	r7, #28
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr
 8003b7c:	ff03000f 	.word	0xff03000f

08003b80 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b08b      	sub	sp, #44	; 0x2c
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
 8003b8c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b94:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	041a      	lsls	r2, r3, #16
 8003b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003bb8:	d174      	bne.n	8003ca4 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003bc0:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003bc8:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003bd0:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d108      	bne.n	8003bf2 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8003be0:	69ba      	ldr	r2, [r7, #24]
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	431a      	orrs	r2, r3
 8003be6:	6a3b      	ldr	r3, [r7, #32]
 8003be8:	4313      	orrs	r3, r2
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	627b      	str	r3, [r7, #36]	; 0x24
 8003bf0:	e053      	b.n	8003c9a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d106      	bne.n	8003c08 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003bfa:	69ba      	ldr	r2, [r7, #24]
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	697a      	ldr	r2, [r7, #20]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	627b      	str	r3, [r7, #36]	; 0x24
 8003c06:	e048      	b.n	8003c9a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d111      	bne.n	8003c34 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	0cdb      	lsrs	r3, r3, #19
 8003c14:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	0a9b      	lsrs	r3, r3, #10
 8003c1a:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	08db      	lsrs	r3, r3, #3
 8003c20:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	015a      	lsls	r2, r3, #5
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	02db      	lsls	r3, r3, #11
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	697a      	ldr	r2, [r7, #20]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	627b      	str	r3, [r7, #36]	; 0x24
 8003c32:	e032      	b.n	8003c9a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	2b03      	cmp	r3, #3
 8003c3a:	d117      	bne.n	8003c6c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003c3c:	6a3b      	ldr	r3, [r7, #32]
 8003c3e:	0fdb      	lsrs	r3, r3, #31
 8003c40:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	0cdb      	lsrs	r3, r3, #19
 8003c46:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	0adb      	lsrs	r3, r3, #11
 8003c4c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	08db      	lsrs	r3, r3, #3
 8003c52:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	015a      	lsls	r2, r3, #5
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	029b      	lsls	r3, r3, #10
 8003c5c:	431a      	orrs	r2, r3
 8003c5e:	6a3b      	ldr	r3, [r7, #32]
 8003c60:	03db      	lsls	r3, r3, #15
 8003c62:	4313      	orrs	r3, r2
 8003c64:	697a      	ldr	r2, [r7, #20]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	627b      	str	r3, [r7, #36]	; 0x24
 8003c6a:	e016      	b.n	8003c9a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003c6c:	6a3b      	ldr	r3, [r7, #32]
 8003c6e:	0f1b      	lsrs	r3, r3, #28
 8003c70:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	0d1b      	lsrs	r3, r3, #20
 8003c76:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	0b1b      	lsrs	r3, r3, #12
 8003c7c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	091b      	lsrs	r3, r3, #4
 8003c82:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	011a      	lsls	r2, r3, #4
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	021b      	lsls	r3, r3, #8
 8003c8c:	431a      	orrs	r2, r3
 8003c8e:	6a3b      	ldr	r3, [r7, #32]
 8003c90:	031b      	lsls	r3, r3, #12
 8003c92:	4313      	orrs	r3, r2
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca0:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003ca2:	e003      	b.n	8003cac <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68ba      	ldr	r2, [r7, #8]
 8003caa:	60da      	str	r2, [r3, #12]
}
 8003cac:	bf00      	nop
 8003cae:	372c      	adds	r7, #44	; 0x2c
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b089      	sub	sp, #36	; 0x24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cce:	2300      	movs	r3, #0
 8003cd0:	61fb      	str	r3, [r7, #28]
 8003cd2:	e177      	b.n	8003fc4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	f040 8166 	bne.w	8003fbe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	f003 0303 	and.w	r3, r3, #3
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d005      	beq.n	8003d0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d130      	bne.n	8003d6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	005b      	lsls	r3, r3, #1
 8003d14:	2203      	movs	r2, #3
 8003d16:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1a:	43db      	mvns	r3, r3
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	4013      	ands	r3, r2
 8003d20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	68da      	ldr	r2, [r3, #12]
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	005b      	lsls	r3, r3, #1
 8003d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	69ba      	ldr	r2, [r7, #24]
 8003d38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d40:	2201      	movs	r2, #1
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	fa02 f303 	lsl.w	r3, r2, r3
 8003d48:	43db      	mvns	r3, r3
 8003d4a:	69ba      	ldr	r2, [r7, #24]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	091b      	lsrs	r3, r3, #4
 8003d56:	f003 0201 	and.w	r2, r3, #1
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	69ba      	ldr	r2, [r7, #24]
 8003d6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f003 0303 	and.w	r3, r3, #3
 8003d74:	2b03      	cmp	r3, #3
 8003d76:	d017      	beq.n	8003da8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	005b      	lsls	r3, r3, #1
 8003d82:	2203      	movs	r2, #3
 8003d84:	fa02 f303 	lsl.w	r3, r2, r3
 8003d88:	43db      	mvns	r3, r3
 8003d8a:	69ba      	ldr	r2, [r7, #24]
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	005b      	lsls	r3, r3, #1
 8003d98:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9c:	69ba      	ldr	r2, [r7, #24]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f003 0303 	and.w	r3, r3, #3
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d123      	bne.n	8003dfc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	08da      	lsrs	r2, r3, #3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	3208      	adds	r2, #8
 8003dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	f003 0307 	and.w	r3, r3, #7
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	220f      	movs	r2, #15
 8003dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd0:	43db      	mvns	r3, r3
 8003dd2:	69ba      	ldr	r2, [r7, #24]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	691a      	ldr	r2, [r3, #16]
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	f003 0307 	and.w	r3, r3, #7
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	fa02 f303 	lsl.w	r3, r2, r3
 8003de8:	69ba      	ldr	r2, [r7, #24]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	08da      	lsrs	r2, r3, #3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	3208      	adds	r2, #8
 8003df6:	69b9      	ldr	r1, [r7, #24]
 8003df8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e02:	69fb      	ldr	r3, [r7, #28]
 8003e04:	005b      	lsls	r3, r3, #1
 8003e06:	2203      	movs	r2, #3
 8003e08:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0c:	43db      	mvns	r3, r3
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	4013      	ands	r3, r2
 8003e12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f003 0203 	and.w	r2, r3, #3
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	005b      	lsls	r3, r3, #1
 8003e20:	fa02 f303 	lsl.w	r3, r2, r3
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	69ba      	ldr	r2, [r7, #24]
 8003e2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f000 80c0 	beq.w	8003fbe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e3e:	2300      	movs	r3, #0
 8003e40:	60fb      	str	r3, [r7, #12]
 8003e42:	4b66      	ldr	r3, [pc, #408]	; (8003fdc <HAL_GPIO_Init+0x324>)
 8003e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e46:	4a65      	ldr	r2, [pc, #404]	; (8003fdc <HAL_GPIO_Init+0x324>)
 8003e48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8003e4e:	4b63      	ldr	r3, [pc, #396]	; (8003fdc <HAL_GPIO_Init+0x324>)
 8003e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e56:	60fb      	str	r3, [r7, #12]
 8003e58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e5a:	4a61      	ldr	r2, [pc, #388]	; (8003fe0 <HAL_GPIO_Init+0x328>)
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	089b      	lsrs	r3, r3, #2
 8003e60:	3302      	adds	r3, #2
 8003e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	f003 0303 	and.w	r3, r3, #3
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	220f      	movs	r2, #15
 8003e72:	fa02 f303 	lsl.w	r3, r2, r3
 8003e76:	43db      	mvns	r3, r3
 8003e78:	69ba      	ldr	r2, [r7, #24]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a58      	ldr	r2, [pc, #352]	; (8003fe4 <HAL_GPIO_Init+0x32c>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d037      	beq.n	8003ef6 <HAL_GPIO_Init+0x23e>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a57      	ldr	r2, [pc, #348]	; (8003fe8 <HAL_GPIO_Init+0x330>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d031      	beq.n	8003ef2 <HAL_GPIO_Init+0x23a>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a56      	ldr	r2, [pc, #344]	; (8003fec <HAL_GPIO_Init+0x334>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d02b      	beq.n	8003eee <HAL_GPIO_Init+0x236>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a55      	ldr	r2, [pc, #340]	; (8003ff0 <HAL_GPIO_Init+0x338>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d025      	beq.n	8003eea <HAL_GPIO_Init+0x232>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a54      	ldr	r2, [pc, #336]	; (8003ff4 <HAL_GPIO_Init+0x33c>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d01f      	beq.n	8003ee6 <HAL_GPIO_Init+0x22e>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a53      	ldr	r2, [pc, #332]	; (8003ff8 <HAL_GPIO_Init+0x340>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d019      	beq.n	8003ee2 <HAL_GPIO_Init+0x22a>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a52      	ldr	r2, [pc, #328]	; (8003ffc <HAL_GPIO_Init+0x344>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d013      	beq.n	8003ede <HAL_GPIO_Init+0x226>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a51      	ldr	r2, [pc, #324]	; (8004000 <HAL_GPIO_Init+0x348>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d00d      	beq.n	8003eda <HAL_GPIO_Init+0x222>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a50      	ldr	r2, [pc, #320]	; (8004004 <HAL_GPIO_Init+0x34c>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d007      	beq.n	8003ed6 <HAL_GPIO_Init+0x21e>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a4f      	ldr	r2, [pc, #316]	; (8004008 <HAL_GPIO_Init+0x350>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d101      	bne.n	8003ed2 <HAL_GPIO_Init+0x21a>
 8003ece:	2309      	movs	r3, #9
 8003ed0:	e012      	b.n	8003ef8 <HAL_GPIO_Init+0x240>
 8003ed2:	230a      	movs	r3, #10
 8003ed4:	e010      	b.n	8003ef8 <HAL_GPIO_Init+0x240>
 8003ed6:	2308      	movs	r3, #8
 8003ed8:	e00e      	b.n	8003ef8 <HAL_GPIO_Init+0x240>
 8003eda:	2307      	movs	r3, #7
 8003edc:	e00c      	b.n	8003ef8 <HAL_GPIO_Init+0x240>
 8003ede:	2306      	movs	r3, #6
 8003ee0:	e00a      	b.n	8003ef8 <HAL_GPIO_Init+0x240>
 8003ee2:	2305      	movs	r3, #5
 8003ee4:	e008      	b.n	8003ef8 <HAL_GPIO_Init+0x240>
 8003ee6:	2304      	movs	r3, #4
 8003ee8:	e006      	b.n	8003ef8 <HAL_GPIO_Init+0x240>
 8003eea:	2303      	movs	r3, #3
 8003eec:	e004      	b.n	8003ef8 <HAL_GPIO_Init+0x240>
 8003eee:	2302      	movs	r3, #2
 8003ef0:	e002      	b.n	8003ef8 <HAL_GPIO_Init+0x240>
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e000      	b.n	8003ef8 <HAL_GPIO_Init+0x240>
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	69fa      	ldr	r2, [r7, #28]
 8003efa:	f002 0203 	and.w	r2, r2, #3
 8003efe:	0092      	lsls	r2, r2, #2
 8003f00:	4093      	lsls	r3, r2
 8003f02:	69ba      	ldr	r2, [r7, #24]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f08:	4935      	ldr	r1, [pc, #212]	; (8003fe0 <HAL_GPIO_Init+0x328>)
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	089b      	lsrs	r3, r3, #2
 8003f0e:	3302      	adds	r3, #2
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f16:	4b3d      	ldr	r3, [pc, #244]	; (800400c <HAL_GPIO_Init+0x354>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	43db      	mvns	r3, r3
 8003f20:	69ba      	ldr	r2, [r7, #24]
 8003f22:	4013      	ands	r3, r2
 8003f24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d003      	beq.n	8003f3a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003f32:	69ba      	ldr	r2, [r7, #24]
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f3a:	4a34      	ldr	r2, [pc, #208]	; (800400c <HAL_GPIO_Init+0x354>)
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f40:	4b32      	ldr	r3, [pc, #200]	; (800400c <HAL_GPIO_Init+0x354>)
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	43db      	mvns	r3, r3
 8003f4a:	69ba      	ldr	r2, [r7, #24]
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d003      	beq.n	8003f64 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f64:	4a29      	ldr	r2, [pc, #164]	; (800400c <HAL_GPIO_Init+0x354>)
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f6a:	4b28      	ldr	r3, [pc, #160]	; (800400c <HAL_GPIO_Init+0x354>)
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	43db      	mvns	r3, r3
 8003f74:	69ba      	ldr	r2, [r7, #24]
 8003f76:	4013      	ands	r3, r2
 8003f78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003f86:	69ba      	ldr	r2, [r7, #24]
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f8e:	4a1f      	ldr	r2, [pc, #124]	; (800400c <HAL_GPIO_Init+0x354>)
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f94:	4b1d      	ldr	r3, [pc, #116]	; (800400c <HAL_GPIO_Init+0x354>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	43db      	mvns	r3, r3
 8003f9e:	69ba      	ldr	r2, [r7, #24]
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d003      	beq.n	8003fb8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003fb0:	69ba      	ldr	r2, [r7, #24]
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003fb8:	4a14      	ldr	r2, [pc, #80]	; (800400c <HAL_GPIO_Init+0x354>)
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	61fb      	str	r3, [r7, #28]
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	2b0f      	cmp	r3, #15
 8003fc8:	f67f ae84 	bls.w	8003cd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003fcc:	bf00      	nop
 8003fce:	bf00      	nop
 8003fd0:	3724      	adds	r7, #36	; 0x24
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	40023800 	.word	0x40023800
 8003fe0:	40013800 	.word	0x40013800
 8003fe4:	40020000 	.word	0x40020000
 8003fe8:	40020400 	.word	0x40020400
 8003fec:	40020800 	.word	0x40020800
 8003ff0:	40020c00 	.word	0x40020c00
 8003ff4:	40021000 	.word	0x40021000
 8003ff8:	40021400 	.word	0x40021400
 8003ffc:	40021800 	.word	0x40021800
 8004000:	40021c00 	.word	0x40021c00
 8004004:	40022000 	.word	0x40022000
 8004008:	40022400 	.word	0x40022400
 800400c:	40013c00 	.word	0x40013c00

08004010 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004010:	b480      	push	{r7}
 8004012:	b087      	sub	sp, #28
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800401a:	2300      	movs	r3, #0
 800401c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800401e:	2300      	movs	r3, #0
 8004020:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004022:	2300      	movs	r3, #0
 8004024:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004026:	2300      	movs	r3, #0
 8004028:	617b      	str	r3, [r7, #20]
 800402a:	e0d9      	b.n	80041e0 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800402c:	2201      	movs	r2, #1
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	fa02 f303 	lsl.w	r3, r2, r3
 8004034:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004036:	683a      	ldr	r2, [r7, #0]
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	4013      	ands	r3, r2
 800403c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	429a      	cmp	r2, r3
 8004044:	f040 80c9 	bne.w	80041da <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004048:	4a6b      	ldr	r2, [pc, #428]	; (80041f8 <HAL_GPIO_DeInit+0x1e8>)
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	089b      	lsrs	r3, r3, #2
 800404e:	3302      	adds	r3, #2
 8004050:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004054:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	f003 0303 	and.w	r3, r3, #3
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	220f      	movs	r2, #15
 8004060:	fa02 f303 	lsl.w	r3, r2, r3
 8004064:	68ba      	ldr	r2, [r7, #8]
 8004066:	4013      	ands	r3, r2
 8004068:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a63      	ldr	r2, [pc, #396]	; (80041fc <HAL_GPIO_DeInit+0x1ec>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d037      	beq.n	80040e2 <HAL_GPIO_DeInit+0xd2>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a62      	ldr	r2, [pc, #392]	; (8004200 <HAL_GPIO_DeInit+0x1f0>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d031      	beq.n	80040de <HAL_GPIO_DeInit+0xce>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a61      	ldr	r2, [pc, #388]	; (8004204 <HAL_GPIO_DeInit+0x1f4>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d02b      	beq.n	80040da <HAL_GPIO_DeInit+0xca>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a60      	ldr	r2, [pc, #384]	; (8004208 <HAL_GPIO_DeInit+0x1f8>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d025      	beq.n	80040d6 <HAL_GPIO_DeInit+0xc6>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a5f      	ldr	r2, [pc, #380]	; (800420c <HAL_GPIO_DeInit+0x1fc>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d01f      	beq.n	80040d2 <HAL_GPIO_DeInit+0xc2>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a5e      	ldr	r2, [pc, #376]	; (8004210 <HAL_GPIO_DeInit+0x200>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d019      	beq.n	80040ce <HAL_GPIO_DeInit+0xbe>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a5d      	ldr	r2, [pc, #372]	; (8004214 <HAL_GPIO_DeInit+0x204>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d013      	beq.n	80040ca <HAL_GPIO_DeInit+0xba>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a5c      	ldr	r2, [pc, #368]	; (8004218 <HAL_GPIO_DeInit+0x208>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d00d      	beq.n	80040c6 <HAL_GPIO_DeInit+0xb6>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a5b      	ldr	r2, [pc, #364]	; (800421c <HAL_GPIO_DeInit+0x20c>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d007      	beq.n	80040c2 <HAL_GPIO_DeInit+0xb2>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a5a      	ldr	r2, [pc, #360]	; (8004220 <HAL_GPIO_DeInit+0x210>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d101      	bne.n	80040be <HAL_GPIO_DeInit+0xae>
 80040ba:	2309      	movs	r3, #9
 80040bc:	e012      	b.n	80040e4 <HAL_GPIO_DeInit+0xd4>
 80040be:	230a      	movs	r3, #10
 80040c0:	e010      	b.n	80040e4 <HAL_GPIO_DeInit+0xd4>
 80040c2:	2308      	movs	r3, #8
 80040c4:	e00e      	b.n	80040e4 <HAL_GPIO_DeInit+0xd4>
 80040c6:	2307      	movs	r3, #7
 80040c8:	e00c      	b.n	80040e4 <HAL_GPIO_DeInit+0xd4>
 80040ca:	2306      	movs	r3, #6
 80040cc:	e00a      	b.n	80040e4 <HAL_GPIO_DeInit+0xd4>
 80040ce:	2305      	movs	r3, #5
 80040d0:	e008      	b.n	80040e4 <HAL_GPIO_DeInit+0xd4>
 80040d2:	2304      	movs	r3, #4
 80040d4:	e006      	b.n	80040e4 <HAL_GPIO_DeInit+0xd4>
 80040d6:	2303      	movs	r3, #3
 80040d8:	e004      	b.n	80040e4 <HAL_GPIO_DeInit+0xd4>
 80040da:	2302      	movs	r3, #2
 80040dc:	e002      	b.n	80040e4 <HAL_GPIO_DeInit+0xd4>
 80040de:	2301      	movs	r3, #1
 80040e0:	e000      	b.n	80040e4 <HAL_GPIO_DeInit+0xd4>
 80040e2:	2300      	movs	r3, #0
 80040e4:	697a      	ldr	r2, [r7, #20]
 80040e6:	f002 0203 	and.w	r2, r2, #3
 80040ea:	0092      	lsls	r2, r2, #2
 80040ec:	4093      	lsls	r3, r2
 80040ee:	68ba      	ldr	r2, [r7, #8]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d132      	bne.n	800415a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80040f4:	4b4b      	ldr	r3, [pc, #300]	; (8004224 <HAL_GPIO_DeInit+0x214>)
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	43db      	mvns	r3, r3
 80040fc:	4949      	ldr	r1, [pc, #292]	; (8004224 <HAL_GPIO_DeInit+0x214>)
 80040fe:	4013      	ands	r3, r2
 8004100:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004102:	4b48      	ldr	r3, [pc, #288]	; (8004224 <HAL_GPIO_DeInit+0x214>)
 8004104:	685a      	ldr	r2, [r3, #4]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	43db      	mvns	r3, r3
 800410a:	4946      	ldr	r1, [pc, #280]	; (8004224 <HAL_GPIO_DeInit+0x214>)
 800410c:	4013      	ands	r3, r2
 800410e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004110:	4b44      	ldr	r3, [pc, #272]	; (8004224 <HAL_GPIO_DeInit+0x214>)
 8004112:	68da      	ldr	r2, [r3, #12]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	43db      	mvns	r3, r3
 8004118:	4942      	ldr	r1, [pc, #264]	; (8004224 <HAL_GPIO_DeInit+0x214>)
 800411a:	4013      	ands	r3, r2
 800411c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800411e:	4b41      	ldr	r3, [pc, #260]	; (8004224 <HAL_GPIO_DeInit+0x214>)
 8004120:	689a      	ldr	r2, [r3, #8]
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	43db      	mvns	r3, r3
 8004126:	493f      	ldr	r1, [pc, #252]	; (8004224 <HAL_GPIO_DeInit+0x214>)
 8004128:	4013      	ands	r3, r2
 800412a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	f003 0303 	and.w	r3, r3, #3
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	220f      	movs	r2, #15
 8004136:	fa02 f303 	lsl.w	r3, r2, r3
 800413a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800413c:	4a2e      	ldr	r2, [pc, #184]	; (80041f8 <HAL_GPIO_DeInit+0x1e8>)
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	089b      	lsrs	r3, r3, #2
 8004142:	3302      	adds	r3, #2
 8004144:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	43da      	mvns	r2, r3
 800414c:	482a      	ldr	r0, [pc, #168]	; (80041f8 <HAL_GPIO_DeInit+0x1e8>)
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	089b      	lsrs	r3, r3, #2
 8004152:	400a      	ands	r2, r1
 8004154:	3302      	adds	r3, #2
 8004156:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	005b      	lsls	r3, r3, #1
 8004162:	2103      	movs	r1, #3
 8004164:	fa01 f303 	lsl.w	r3, r1, r3
 8004168:	43db      	mvns	r3, r3
 800416a:	401a      	ands	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	08da      	lsrs	r2, r3, #3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	3208      	adds	r2, #8
 8004178:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	f003 0307 	and.w	r3, r3, #7
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	220f      	movs	r2, #15
 8004186:	fa02 f303 	lsl.w	r3, r2, r3
 800418a:	43db      	mvns	r3, r3
 800418c:	697a      	ldr	r2, [r7, #20]
 800418e:	08d2      	lsrs	r2, r2, #3
 8004190:	4019      	ands	r1, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	3208      	adds	r2, #8
 8004196:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	68da      	ldr	r2, [r3, #12]
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	005b      	lsls	r3, r3, #1
 80041a2:	2103      	movs	r1, #3
 80041a4:	fa01 f303 	lsl.w	r3, r1, r3
 80041a8:	43db      	mvns	r3, r3
 80041aa:	401a      	ands	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685a      	ldr	r2, [r3, #4]
 80041b4:	2101      	movs	r1, #1
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	fa01 f303 	lsl.w	r3, r1, r3
 80041bc:	43db      	mvns	r3, r3
 80041be:	401a      	ands	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	689a      	ldr	r2, [r3, #8]
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	005b      	lsls	r3, r3, #1
 80041cc:	2103      	movs	r1, #3
 80041ce:	fa01 f303 	lsl.w	r3, r1, r3
 80041d2:	43db      	mvns	r3, r3
 80041d4:	401a      	ands	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	3301      	adds	r3, #1
 80041de:	617b      	str	r3, [r7, #20]
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	2b0f      	cmp	r3, #15
 80041e4:	f67f af22 	bls.w	800402c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80041e8:	bf00      	nop
 80041ea:	bf00      	nop
 80041ec:	371c      	adds	r7, #28
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	40013800 	.word	0x40013800
 80041fc:	40020000 	.word	0x40020000
 8004200:	40020400 	.word	0x40020400
 8004204:	40020800 	.word	0x40020800
 8004208:	40020c00 	.word	0x40020c00
 800420c:	40021000 	.word	0x40021000
 8004210:	40021400 	.word	0x40021400
 8004214:	40021800 	.word	0x40021800
 8004218:	40021c00 	.word	0x40021c00
 800421c:	40022000 	.word	0x40022000
 8004220:	40022400 	.word	0x40022400
 8004224:	40013c00 	.word	0x40013c00

08004228 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	460b      	mov	r3, r1
 8004232:	807b      	strh	r3, [r7, #2]
 8004234:	4613      	mov	r3, r2
 8004236:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004238:	787b      	ldrb	r3, [r7, #1]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d003      	beq.n	8004246 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800423e:	887a      	ldrh	r2, [r7, #2]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004244:	e003      	b.n	800424e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004246:	887b      	ldrh	r3, [r7, #2]
 8004248:	041a      	lsls	r2, r3, #16
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	619a      	str	r2, [r3, #24]
}
 800424e:	bf00      	nop
 8004250:	370c      	adds	r7, #12
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
	...

0800425c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d101      	bne.n	800426e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e0bf      	b.n	80043ee <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8004274:	b2db      	uxtb	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d106      	bne.n	8004288 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f8ba 	bl	80043fc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2202      	movs	r2, #2
 800428c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	699a      	ldr	r2, [r3, #24]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800429e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	6999      	ldr	r1, [r3, #24]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685a      	ldr	r2, [r3, #4]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80042b4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	430a      	orrs	r2, r1
 80042c2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	6899      	ldr	r1, [r3, #8]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	4b4a      	ldr	r3, [pc, #296]	; (80043f8 <HAL_LTDC_Init+0x19c>)
 80042d0:	400b      	ands	r3, r1
 80042d2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	695b      	ldr	r3, [r3, #20]
 80042d8:	041b      	lsls	r3, r3, #16
 80042da:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	6899      	ldr	r1, [r3, #8]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	699a      	ldr	r2, [r3, #24]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	431a      	orrs	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	430a      	orrs	r2, r1
 80042f0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68d9      	ldr	r1, [r3, #12]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	4b3e      	ldr	r3, [pc, #248]	; (80043f8 <HAL_LTDC_Init+0x19c>)
 80042fe:	400b      	ands	r3, r1
 8004300:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	69db      	ldr	r3, [r3, #28]
 8004306:	041b      	lsls	r3, r3, #16
 8004308:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68d9      	ldr	r1, [r3, #12]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a1a      	ldr	r2, [r3, #32]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	431a      	orrs	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	430a      	orrs	r2, r1
 800431e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	6919      	ldr	r1, [r3, #16]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	4b33      	ldr	r3, [pc, #204]	; (80043f8 <HAL_LTDC_Init+0x19c>)
 800432c:	400b      	ands	r3, r1
 800432e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004334:	041b      	lsls	r3, r3, #16
 8004336:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	6919      	ldr	r1, [r3, #16]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	431a      	orrs	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	430a      	orrs	r2, r1
 800434c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	6959      	ldr	r1, [r3, #20]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	4b27      	ldr	r3, [pc, #156]	; (80043f8 <HAL_LTDC_Init+0x19c>)
 800435a:	400b      	ands	r3, r1
 800435c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004362:	041b      	lsls	r3, r3, #16
 8004364:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	6959      	ldr	r1, [r3, #20]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	431a      	orrs	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	430a      	orrs	r2, r1
 800437a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004382:	021b      	lsls	r3, r3, #8
 8004384:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800438c:	041b      	lsls	r3, r3, #16
 800438e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800439e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80043a6:	68ba      	ldr	r2, [r7, #8]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80043b2:	431a      	orrs	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	430a      	orrs	r2, r1
 80043ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f042 0206 	orr.w	r2, r2, #6
 80043ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	699a      	ldr	r2, [r3, #24]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f042 0201 	orr.w	r2, r2, #1
 80043da:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80043ec:	2300      	movs	r3, #0
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	f000f800 	.word	0xf000f800

080043fc <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8004404:	bf00      	nop
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004410:	b5b0      	push	{r4, r5, r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004422:	2b01      	cmp	r3, #1
 8004424:	d101      	bne.n	800442a <HAL_LTDC_ConfigLayer+0x1a>
 8004426:	2302      	movs	r3, #2
 8004428:	e02c      	b.n	8004484 <HAL_LTDC_ConfigLayer+0x74>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2201      	movs	r2, #1
 800442e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2202      	movs	r2, #2
 8004436:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2134      	movs	r1, #52	; 0x34
 8004440:	fb01 f303 	mul.w	r3, r1, r3
 8004444:	4413      	add	r3, r2
 8004446:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	4614      	mov	r4, r2
 800444e:	461d      	mov	r5, r3
 8004450:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004452:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004454:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004456:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004458:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800445a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800445c:	682b      	ldr	r3, [r5, #0]
 800445e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	68b9      	ldr	r1, [r7, #8]
 8004464:	68f8      	ldr	r0, [r7, #12]
 8004466:	f000 f83b 	bl	80044e0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2201      	movs	r2, #1
 8004470:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2201      	movs	r2, #1
 8004476:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3710      	adds	r7, #16
 8004488:	46bd      	mov	sp, r7
 800448a:	bdb0      	pop	{r4, r5, r7, pc}

0800448c <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800449a:	2b01      	cmp	r3, #1
 800449c:	d101      	bne.n	80044a2 <HAL_LTDC_EnableDither+0x16>
 800449e:	2302      	movs	r3, #2
 80044a0:	e016      	b.n	80044d0 <HAL_LTDC_EnableDither+0x44>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2201      	movs	r2, #1
 80044a6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2202      	movs	r2, #2
 80044ae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 80044b2:	4b0a      	ldr	r3, [pc, #40]	; (80044dc <HAL_LTDC_EnableDither+0x50>)
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	4a09      	ldr	r2, [pc, #36]	; (80044dc <HAL_LTDC_EnableDither+0x50>)
 80044b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044bc:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr
 80044dc:	40016800 	.word	0x40016800

080044e0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b089      	sub	sp, #36	; 0x24
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	685a      	ldr	r2, [r3, #4]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	0c1b      	lsrs	r3, r3, #16
 80044f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044fc:	4413      	add	r3, r2
 80044fe:	041b      	lsls	r3, r3, #16
 8004500:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	461a      	mov	r2, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	01db      	lsls	r3, r3, #7
 800450c:	4413      	add	r3, r2
 800450e:	3384      	adds	r3, #132	; 0x84
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	6812      	ldr	r2, [r2, #0]
 8004516:	4611      	mov	r1, r2
 8004518:	687a      	ldr	r2, [r7, #4]
 800451a:	01d2      	lsls	r2, r2, #7
 800451c:	440a      	add	r2, r1
 800451e:	3284      	adds	r2, #132	; 0x84
 8004520:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004524:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	0c1b      	lsrs	r3, r3, #16
 8004532:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004536:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004538:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4619      	mov	r1, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	01db      	lsls	r3, r3, #7
 8004544:	440b      	add	r3, r1
 8004546:	3384      	adds	r3, #132	; 0x84
 8004548:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800454e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	68da      	ldr	r2, [r3, #12]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800455e:	4413      	add	r3, r2
 8004560:	041b      	lsls	r3, r3, #16
 8004562:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	461a      	mov	r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	01db      	lsls	r3, r3, #7
 800456e:	4413      	add	r3, r2
 8004570:	3384      	adds	r3, #132	; 0x84
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	6812      	ldr	r2, [r2, #0]
 8004578:	4611      	mov	r1, r2
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	01d2      	lsls	r2, r2, #7
 800457e:	440a      	add	r2, r1
 8004580:	3284      	adds	r2, #132	; 0x84
 8004582:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004586:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	689a      	ldr	r2, [r3, #8]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004596:	4413      	add	r3, r2
 8004598:	1c5a      	adds	r2, r3, #1
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4619      	mov	r1, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	01db      	lsls	r3, r3, #7
 80045a4:	440b      	add	r3, r1
 80045a6:	3384      	adds	r3, #132	; 0x84
 80045a8:	4619      	mov	r1, r3
 80045aa:	69fb      	ldr	r3, [r7, #28]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	461a      	mov	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	01db      	lsls	r3, r3, #7
 80045ba:	4413      	add	r3, r2
 80045bc:	3384      	adds	r3, #132	; 0x84
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	6812      	ldr	r2, [r2, #0]
 80045c4:	4611      	mov	r1, r2
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	01d2      	lsls	r2, r2, #7
 80045ca:	440a      	add	r2, r1
 80045cc:	3284      	adds	r2, #132	; 0x84
 80045ce:	f023 0307 	bic.w	r3, r3, #7
 80045d2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	461a      	mov	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	01db      	lsls	r3, r3, #7
 80045de:	4413      	add	r3, r2
 80045e0:	3384      	adds	r3, #132	; 0x84
 80045e2:	461a      	mov	r2, r3
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80045f0:	021b      	lsls	r3, r3, #8
 80045f2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80045fa:	041b      	lsls	r3, r3, #16
 80045fc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	699b      	ldr	r3, [r3, #24]
 8004602:	061b      	lsls	r3, r3, #24
 8004604:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	461a      	mov	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	01db      	lsls	r3, r3, #7
 8004610:	4413      	add	r3, r2
 8004612:	3384      	adds	r3, #132	; 0x84
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	461a      	mov	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	01db      	lsls	r3, r3, #7
 8004620:	4413      	add	r3, r2
 8004622:	3384      	adds	r3, #132	; 0x84
 8004624:	461a      	mov	r2, r3
 8004626:	2300      	movs	r3, #0
 8004628:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004630:	461a      	mov	r2, r3
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	431a      	orrs	r2, r3
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	431a      	orrs	r2, r3
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4619      	mov	r1, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	01db      	lsls	r3, r3, #7
 8004644:	440b      	add	r3, r1
 8004646:	3384      	adds	r3, #132	; 0x84
 8004648:	4619      	mov	r1, r3
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	4313      	orrs	r3, r2
 800464e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	461a      	mov	r2, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	01db      	lsls	r3, r3, #7
 800465a:	4413      	add	r3, r2
 800465c:	3384      	adds	r3, #132	; 0x84
 800465e:	695b      	ldr	r3, [r3, #20]
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	6812      	ldr	r2, [r2, #0]
 8004664:	4611      	mov	r1, r2
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	01d2      	lsls	r2, r2, #7
 800466a:	440a      	add	r2, r1
 800466c:	3284      	adds	r2, #132	; 0x84
 800466e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004672:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	461a      	mov	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	01db      	lsls	r3, r3, #7
 800467e:	4413      	add	r3, r2
 8004680:	3384      	adds	r3, #132	; 0x84
 8004682:	461a      	mov	r2, r3
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	695b      	ldr	r3, [r3, #20]
 8004688:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	461a      	mov	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	01db      	lsls	r3, r3, #7
 8004694:	4413      	add	r3, r2
 8004696:	3384      	adds	r3, #132	; 0x84
 8004698:	69db      	ldr	r3, [r3, #28]
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	6812      	ldr	r2, [r2, #0]
 800469e:	4611      	mov	r1, r2
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	01d2      	lsls	r2, r2, #7
 80046a4:	440a      	add	r2, r1
 80046a6:	3284      	adds	r2, #132	; 0x84
 80046a8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80046ac:	f023 0307 	bic.w	r3, r3, #7
 80046b0:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	69da      	ldr	r2, [r3, #28]
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	6a1b      	ldr	r3, [r3, #32]
 80046ba:	68f9      	ldr	r1, [r7, #12]
 80046bc:	6809      	ldr	r1, [r1, #0]
 80046be:	4608      	mov	r0, r1
 80046c0:	6879      	ldr	r1, [r7, #4]
 80046c2:	01c9      	lsls	r1, r1, #7
 80046c4:	4401      	add	r1, r0
 80046c6:	3184      	adds	r1, #132	; 0x84
 80046c8:	4313      	orrs	r3, r2
 80046ca:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	461a      	mov	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	01db      	lsls	r3, r3, #7
 80046d6:	4413      	add	r3, r2
 80046d8:	3384      	adds	r3, #132	; 0x84
 80046da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	461a      	mov	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	01db      	lsls	r3, r3, #7
 80046e6:	4413      	add	r3, r2
 80046e8:	3384      	adds	r3, #132	; 0x84
 80046ea:	461a      	mov	r2, r3
 80046ec:	2300      	movs	r3, #0
 80046ee:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	461a      	mov	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	01db      	lsls	r3, r3, #7
 80046fa:	4413      	add	r3, r2
 80046fc:	3384      	adds	r3, #132	; 0x84
 80046fe:	461a      	mov	r2, r3
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004704:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d102      	bne.n	8004714 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 800470e:	2304      	movs	r3, #4
 8004710:	61fb      	str	r3, [r7, #28]
 8004712:	e01b      	b.n	800474c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	2b01      	cmp	r3, #1
 800471a:	d102      	bne.n	8004722 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 800471c:	2303      	movs	r3, #3
 800471e:	61fb      	str	r3, [r7, #28]
 8004720:	e014      	b.n	800474c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	2b04      	cmp	r3, #4
 8004728:	d00b      	beq.n	8004742 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800472e:	2b02      	cmp	r3, #2
 8004730:	d007      	beq.n	8004742 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004736:	2b03      	cmp	r3, #3
 8004738:	d003      	beq.n	8004742 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800473e:	2b07      	cmp	r3, #7
 8004740:	d102      	bne.n	8004748 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004742:	2302      	movs	r3, #2
 8004744:	61fb      	str	r3, [r7, #28]
 8004746:	e001      	b.n	800474c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004748:	2301      	movs	r3, #1
 800474a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	461a      	mov	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	01db      	lsls	r3, r3, #7
 8004756:	4413      	add	r3, r2
 8004758:	3384      	adds	r3, #132	; 0x84
 800475a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475c:	68fa      	ldr	r2, [r7, #12]
 800475e:	6812      	ldr	r2, [r2, #0]
 8004760:	4611      	mov	r1, r2
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	01d2      	lsls	r2, r2, #7
 8004766:	440a      	add	r2, r1
 8004768:	3284      	adds	r2, #132	; 0x84
 800476a:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800476e:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004774:	69fa      	ldr	r2, [r7, #28]
 8004776:	fb02 f303 	mul.w	r3, r2, r3
 800477a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	6859      	ldr	r1, [r3, #4]
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	1acb      	subs	r3, r1, r3
 8004786:	69f9      	ldr	r1, [r7, #28]
 8004788:	fb01 f303 	mul.w	r3, r1, r3
 800478c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800478e:	68f9      	ldr	r1, [r7, #12]
 8004790:	6809      	ldr	r1, [r1, #0]
 8004792:	4608      	mov	r0, r1
 8004794:	6879      	ldr	r1, [r7, #4]
 8004796:	01c9      	lsls	r1, r1, #7
 8004798:	4401      	add	r1, r0
 800479a:	3184      	adds	r1, #132	; 0x84
 800479c:	4313      	orrs	r3, r2
 800479e:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	461a      	mov	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	01db      	lsls	r3, r3, #7
 80047aa:	4413      	add	r3, r2
 80047ac:	3384      	adds	r3, #132	; 0x84
 80047ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	6812      	ldr	r2, [r2, #0]
 80047b4:	4611      	mov	r1, r2
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	01d2      	lsls	r2, r2, #7
 80047ba:	440a      	add	r2, r1
 80047bc:	3284      	adds	r2, #132	; 0x84
 80047be:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80047c2:	f023 0307 	bic.w	r3, r3, #7
 80047c6:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	461a      	mov	r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	01db      	lsls	r3, r3, #7
 80047d2:	4413      	add	r3, r2
 80047d4:	3384      	adds	r3, #132	; 0x84
 80047d6:	461a      	mov	r2, r3
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047dc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	461a      	mov	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	01db      	lsls	r3, r3, #7
 80047e8:	4413      	add	r3, r2
 80047ea:	3384      	adds	r3, #132	; 0x84
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	6812      	ldr	r2, [r2, #0]
 80047f2:	4611      	mov	r1, r2
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	01d2      	lsls	r2, r2, #7
 80047f8:	440a      	add	r2, r1
 80047fa:	3284      	adds	r2, #132	; 0x84
 80047fc:	f043 0301 	orr.w	r3, r3, #1
 8004800:	6013      	str	r3, [r2, #0]
}
 8004802:	bf00      	nop
 8004804:	3724      	adds	r7, #36	; 0x24
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr

0800480e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800480e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004810:	b08f      	sub	sp, #60	; 0x3c
 8004812:	af0a      	add	r7, sp, #40	; 0x28
 8004814:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d101      	bne.n	8004820 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e10f      	b.n	8004a40 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800482c:	b2db      	uxtb	r3, r3
 800482e:	2b00      	cmp	r3, #0
 8004830:	d106      	bne.n	8004840 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f00a f830 	bl	800e8a0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2203      	movs	r2, #3
 8004844:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800484c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004850:	2b00      	cmp	r3, #0
 8004852:	d102      	bne.n	800485a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2200      	movs	r2, #0
 8004858:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4618      	mov	r0, r3
 8004860:	f003 fd3d 	bl	80082de <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	603b      	str	r3, [r7, #0]
 800486a:	687e      	ldr	r6, [r7, #4]
 800486c:	466d      	mov	r5, sp
 800486e:	f106 0410 	add.w	r4, r6, #16
 8004872:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004874:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004876:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004878:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800487a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800487e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004882:	1d33      	adds	r3, r6, #4
 8004884:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004886:	6838      	ldr	r0, [r7, #0]
 8004888:	f003 fc14 	bl	80080b4 <USB_CoreInit>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d005      	beq.n	800489e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2202      	movs	r2, #2
 8004896:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e0d0      	b.n	8004a40 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2100      	movs	r1, #0
 80048a4:	4618      	mov	r0, r3
 80048a6:	f003 fd2b 	bl	8008300 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048aa:	2300      	movs	r3, #0
 80048ac:	73fb      	strb	r3, [r7, #15]
 80048ae:	e04a      	b.n	8004946 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80048b0:	7bfa      	ldrb	r2, [r7, #15]
 80048b2:	6879      	ldr	r1, [r7, #4]
 80048b4:	4613      	mov	r3, r2
 80048b6:	00db      	lsls	r3, r3, #3
 80048b8:	4413      	add	r3, r2
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	440b      	add	r3, r1
 80048be:	333d      	adds	r3, #61	; 0x3d
 80048c0:	2201      	movs	r2, #1
 80048c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80048c4:	7bfa      	ldrb	r2, [r7, #15]
 80048c6:	6879      	ldr	r1, [r7, #4]
 80048c8:	4613      	mov	r3, r2
 80048ca:	00db      	lsls	r3, r3, #3
 80048cc:	4413      	add	r3, r2
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	440b      	add	r3, r1
 80048d2:	333c      	adds	r3, #60	; 0x3c
 80048d4:	7bfa      	ldrb	r2, [r7, #15]
 80048d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80048d8:	7bfa      	ldrb	r2, [r7, #15]
 80048da:	7bfb      	ldrb	r3, [r7, #15]
 80048dc:	b298      	uxth	r0, r3
 80048de:	6879      	ldr	r1, [r7, #4]
 80048e0:	4613      	mov	r3, r2
 80048e2:	00db      	lsls	r3, r3, #3
 80048e4:	4413      	add	r3, r2
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	440b      	add	r3, r1
 80048ea:	3344      	adds	r3, #68	; 0x44
 80048ec:	4602      	mov	r2, r0
 80048ee:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80048f0:	7bfa      	ldrb	r2, [r7, #15]
 80048f2:	6879      	ldr	r1, [r7, #4]
 80048f4:	4613      	mov	r3, r2
 80048f6:	00db      	lsls	r3, r3, #3
 80048f8:	4413      	add	r3, r2
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	440b      	add	r3, r1
 80048fe:	3340      	adds	r3, #64	; 0x40
 8004900:	2200      	movs	r2, #0
 8004902:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004904:	7bfa      	ldrb	r2, [r7, #15]
 8004906:	6879      	ldr	r1, [r7, #4]
 8004908:	4613      	mov	r3, r2
 800490a:	00db      	lsls	r3, r3, #3
 800490c:	4413      	add	r3, r2
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	440b      	add	r3, r1
 8004912:	3348      	adds	r3, #72	; 0x48
 8004914:	2200      	movs	r2, #0
 8004916:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004918:	7bfa      	ldrb	r2, [r7, #15]
 800491a:	6879      	ldr	r1, [r7, #4]
 800491c:	4613      	mov	r3, r2
 800491e:	00db      	lsls	r3, r3, #3
 8004920:	4413      	add	r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	440b      	add	r3, r1
 8004926:	334c      	adds	r3, #76	; 0x4c
 8004928:	2200      	movs	r2, #0
 800492a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800492c:	7bfa      	ldrb	r2, [r7, #15]
 800492e:	6879      	ldr	r1, [r7, #4]
 8004930:	4613      	mov	r3, r2
 8004932:	00db      	lsls	r3, r3, #3
 8004934:	4413      	add	r3, r2
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	440b      	add	r3, r1
 800493a:	3354      	adds	r3, #84	; 0x54
 800493c:	2200      	movs	r2, #0
 800493e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004940:	7bfb      	ldrb	r3, [r7, #15]
 8004942:	3301      	adds	r3, #1
 8004944:	73fb      	strb	r3, [r7, #15]
 8004946:	7bfa      	ldrb	r2, [r7, #15]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	429a      	cmp	r2, r3
 800494e:	d3af      	bcc.n	80048b0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004950:	2300      	movs	r3, #0
 8004952:	73fb      	strb	r3, [r7, #15]
 8004954:	e044      	b.n	80049e0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004956:	7bfa      	ldrb	r2, [r7, #15]
 8004958:	6879      	ldr	r1, [r7, #4]
 800495a:	4613      	mov	r3, r2
 800495c:	00db      	lsls	r3, r3, #3
 800495e:	4413      	add	r3, r2
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	440b      	add	r3, r1
 8004964:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004968:	2200      	movs	r2, #0
 800496a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800496c:	7bfa      	ldrb	r2, [r7, #15]
 800496e:	6879      	ldr	r1, [r7, #4]
 8004970:	4613      	mov	r3, r2
 8004972:	00db      	lsls	r3, r3, #3
 8004974:	4413      	add	r3, r2
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	440b      	add	r3, r1
 800497a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800497e:	7bfa      	ldrb	r2, [r7, #15]
 8004980:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004982:	7bfa      	ldrb	r2, [r7, #15]
 8004984:	6879      	ldr	r1, [r7, #4]
 8004986:	4613      	mov	r3, r2
 8004988:	00db      	lsls	r3, r3, #3
 800498a:	4413      	add	r3, r2
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	440b      	add	r3, r1
 8004990:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004994:	2200      	movs	r2, #0
 8004996:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004998:	7bfa      	ldrb	r2, [r7, #15]
 800499a:	6879      	ldr	r1, [r7, #4]
 800499c:	4613      	mov	r3, r2
 800499e:	00db      	lsls	r3, r3, #3
 80049a0:	4413      	add	r3, r2
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	440b      	add	r3, r1
 80049a6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80049aa:	2200      	movs	r2, #0
 80049ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80049ae:	7bfa      	ldrb	r2, [r7, #15]
 80049b0:	6879      	ldr	r1, [r7, #4]
 80049b2:	4613      	mov	r3, r2
 80049b4:	00db      	lsls	r3, r3, #3
 80049b6:	4413      	add	r3, r2
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	440b      	add	r3, r1
 80049bc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80049c0:	2200      	movs	r2, #0
 80049c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80049c4:	7bfa      	ldrb	r2, [r7, #15]
 80049c6:	6879      	ldr	r1, [r7, #4]
 80049c8:	4613      	mov	r3, r2
 80049ca:	00db      	lsls	r3, r3, #3
 80049cc:	4413      	add	r3, r2
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	440b      	add	r3, r1
 80049d2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80049d6:	2200      	movs	r2, #0
 80049d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049da:	7bfb      	ldrb	r3, [r7, #15]
 80049dc:	3301      	adds	r3, #1
 80049de:	73fb      	strb	r3, [r7, #15]
 80049e0:	7bfa      	ldrb	r2, [r7, #15]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d3b5      	bcc.n	8004956 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	603b      	str	r3, [r7, #0]
 80049f0:	687e      	ldr	r6, [r7, #4]
 80049f2:	466d      	mov	r5, sp
 80049f4:	f106 0410 	add.w	r4, r6, #16
 80049f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a00:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004a04:	e885 0003 	stmia.w	r5, {r0, r1}
 8004a08:	1d33      	adds	r3, r6, #4
 8004a0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a0c:	6838      	ldr	r0, [r7, #0]
 8004a0e:	f003 fcc3 	bl	8008398 <USB_DevInit>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d005      	beq.n	8004a24 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2202      	movs	r2, #2
 8004a1c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e00d      	b.n	8004a40 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f004 fe12 	bl	8009662 <USB_DevDisconnect>

  return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3714      	adds	r7, #20
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004a48 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d101      	bne.n	8004a64 <HAL_PCD_Start+0x1c>
 8004a60:	2302      	movs	r3, #2
 8004a62:	e020      	b.n	8004aa6 <HAL_PCD_Start+0x5e>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d109      	bne.n	8004a88 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d005      	beq.n	8004a88 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a80:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f003 fc15 	bl	80082bc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4618      	mov	r0, r3
 8004a98:	f004 fdc2 	bl	8009620 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004aa4:	2300      	movs	r3, #0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3710      	adds	r7, #16
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}

08004aae <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004aae:	b590      	push	{r4, r7, lr}
 8004ab0:	b08d      	sub	sp, #52	; 0x34
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004abc:	6a3b      	ldr	r3, [r7, #32]
 8004abe:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f004 fe80 	bl	80097ca <USB_GetMode>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f040 848a 	bne.w	80053e6 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f004 fde4 	bl	80096a4 <USB_ReadInterrupts>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	f000 8480 	beq.w	80053e4 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	0a1b      	lsrs	r3, r3, #8
 8004aee:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4618      	mov	r0, r3
 8004afe:	f004 fdd1 	bl	80096a4 <USB_ReadInterrupts>
 8004b02:	4603      	mov	r3, r0
 8004b04:	f003 0302 	and.w	r3, r3, #2
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d107      	bne.n	8004b1c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	695a      	ldr	r2, [r3, #20]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f002 0202 	and.w	r2, r2, #2
 8004b1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4618      	mov	r0, r3
 8004b22:	f004 fdbf 	bl	80096a4 <USB_ReadInterrupts>
 8004b26:	4603      	mov	r3, r0
 8004b28:	f003 0310 	and.w	r3, r3, #16
 8004b2c:	2b10      	cmp	r3, #16
 8004b2e:	d161      	bne.n	8004bf4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	699a      	ldr	r2, [r3, #24]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f022 0210 	bic.w	r2, r2, #16
 8004b3e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004b40:	6a3b      	ldr	r3, [r7, #32]
 8004b42:	6a1b      	ldr	r3, [r3, #32]
 8004b44:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004b46:	69bb      	ldr	r3, [r7, #24]
 8004b48:	f003 020f 	and.w	r2, r3, #15
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	00db      	lsls	r3, r3, #3
 8004b50:	4413      	add	r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	3304      	adds	r3, #4
 8004b5e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	0c5b      	lsrs	r3, r3, #17
 8004b64:	f003 030f 	and.w	r3, r3, #15
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	d124      	bne.n	8004bb6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004b6c:	69ba      	ldr	r2, [r7, #24]
 8004b6e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004b72:	4013      	ands	r3, r2
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d035      	beq.n	8004be4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	091b      	lsrs	r3, r3, #4
 8004b80:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004b82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	461a      	mov	r2, r3
 8004b8a:	6a38      	ldr	r0, [r7, #32]
 8004b8c:	f004 fbf6 	bl	800937c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	691a      	ldr	r2, [r3, #16]
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	091b      	lsrs	r3, r3, #4
 8004b98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b9c:	441a      	add	r2, r3
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	6a1a      	ldr	r2, [r3, #32]
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	091b      	lsrs	r3, r3, #4
 8004baa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004bae:	441a      	add	r2, r3
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	621a      	str	r2, [r3, #32]
 8004bb4:	e016      	b.n	8004be4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	0c5b      	lsrs	r3, r3, #17
 8004bba:	f003 030f 	and.w	r3, r3, #15
 8004bbe:	2b06      	cmp	r3, #6
 8004bc0:	d110      	bne.n	8004be4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004bc8:	2208      	movs	r2, #8
 8004bca:	4619      	mov	r1, r3
 8004bcc:	6a38      	ldr	r0, [r7, #32]
 8004bce:	f004 fbd5 	bl	800937c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	6a1a      	ldr	r2, [r3, #32]
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	091b      	lsrs	r3, r3, #4
 8004bda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004bde:	441a      	add	r2, r3
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	699a      	ldr	r2, [r3, #24]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f042 0210 	orr.w	r2, r2, #16
 8004bf2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f004 fd53 	bl	80096a4 <USB_ReadInterrupts>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c04:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004c08:	f040 80a7 	bne.w	8004d5a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4618      	mov	r0, r3
 8004c16:	f004 fd58 	bl	80096ca <USB_ReadDevAllOutEpInterrupt>
 8004c1a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004c1c:	e099      	b.n	8004d52 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c20:	f003 0301 	and.w	r3, r3, #1
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	f000 808e 	beq.w	8004d46 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c30:	b2d2      	uxtb	r2, r2
 8004c32:	4611      	mov	r1, r2
 8004c34:	4618      	mov	r0, r3
 8004c36:	f004 fd7c 	bl	8009732 <USB_ReadDevOutEPInterrupt>
 8004c3a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00c      	beq.n	8004c60 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c48:	015a      	lsls	r2, r3, #5
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c52:	461a      	mov	r2, r3
 8004c54:	2301      	movs	r3, #1
 8004c56:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004c58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 fec2 	bl	80059e4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	f003 0308 	and.w	r3, r3, #8
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d00c      	beq.n	8004c84 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6c:	015a      	lsls	r2, r3, #5
 8004c6e:	69fb      	ldr	r3, [r7, #28]
 8004c70:	4413      	add	r3, r2
 8004c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c76:	461a      	mov	r2, r3
 8004c78:	2308      	movs	r3, #8
 8004c7a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004c7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 ff98 	bl	8005bb4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004c84:	693b      	ldr	r3, [r7, #16]
 8004c86:	f003 0310 	and.w	r3, r3, #16
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d008      	beq.n	8004ca0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c90:	015a      	lsls	r2, r3, #5
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	4413      	add	r3, r2
 8004c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	2310      	movs	r3, #16
 8004c9e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	f003 0302 	and.w	r3, r3, #2
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d030      	beq.n	8004d0c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004caa:	6a3b      	ldr	r3, [r7, #32]
 8004cac:	695b      	ldr	r3, [r3, #20]
 8004cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cb2:	2b80      	cmp	r3, #128	; 0x80
 8004cb4:	d109      	bne.n	8004cca <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	69fa      	ldr	r2, [r7, #28]
 8004cc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cc4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004cc8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ccc:	4613      	mov	r3, r2
 8004cce:	00db      	lsls	r3, r3, #3
 8004cd0:	4413      	add	r3, r2
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	4413      	add	r3, r2
 8004cdc:	3304      	adds	r3, #4
 8004cde:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	78db      	ldrb	r3, [r3, #3]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d108      	bne.n	8004cfa <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	2200      	movs	r2, #0
 8004cec:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f009 fed5 	bl	800eaa4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfc:	015a      	lsls	r2, r3, #5
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	4413      	add	r3, r2
 8004d02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d06:	461a      	mov	r2, r3
 8004d08:	2302      	movs	r3, #2
 8004d0a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	f003 0320 	and.w	r3, r3, #32
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d008      	beq.n	8004d28 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d18:	015a      	lsls	r2, r3, #5
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d22:	461a      	mov	r2, r3
 8004d24:	2320      	movs	r3, #32
 8004d26:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d009      	beq.n	8004d46 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d34:	015a      	lsls	r2, r3, #5
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	4413      	add	r3, r2
 8004d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d3e:	461a      	mov	r2, r3
 8004d40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d44:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d48:	3301      	adds	r3, #1
 8004d4a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4e:	085b      	lsrs	r3, r3, #1
 8004d50:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f47f af62 	bne.w	8004c1e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f004 fca0 	bl	80096a4 <USB_ReadInterrupts>
 8004d64:	4603      	mov	r3, r0
 8004d66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d6a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d6e:	f040 80db 	bne.w	8004f28 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4618      	mov	r0, r3
 8004d78:	f004 fcc1 	bl	80096fe <USB_ReadDevAllInEpInterrupt>
 8004d7c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004d82:	e0cd      	b.n	8004f20 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d86:	f003 0301 	and.w	r3, r3, #1
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	f000 80c2 	beq.w	8004f14 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d96:	b2d2      	uxtb	r2, r2
 8004d98:	4611      	mov	r1, r2
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f004 fce7 	bl	800976e <USB_ReadDevInEPInterrupt>
 8004da0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	f003 0301 	and.w	r3, r3, #1
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d057      	beq.n	8004e5c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dae:	f003 030f 	and.w	r3, r3, #15
 8004db2:	2201      	movs	r2, #1
 8004db4:	fa02 f303 	lsl.w	r3, r2, r3
 8004db8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	43db      	mvns	r3, r3
 8004dc6:	69f9      	ldr	r1, [r7, #28]
 8004dc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004dcc:	4013      	ands	r3, r2
 8004dce:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd2:	015a      	lsls	r2, r3, #5
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ddc:	461a      	mov	r2, r3
 8004dde:	2301      	movs	r3, #1
 8004de0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d132      	bne.n	8004e50 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004dea:	6879      	ldr	r1, [r7, #4]
 8004dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dee:	4613      	mov	r3, r2
 8004df0:	00db      	lsls	r3, r3, #3
 8004df2:	4413      	add	r3, r2
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	440b      	add	r3, r1
 8004df8:	334c      	adds	r3, #76	; 0x4c
 8004dfa:	6819      	ldr	r1, [r3, #0]
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e00:	4613      	mov	r3, r2
 8004e02:	00db      	lsls	r3, r3, #3
 8004e04:	4413      	add	r3, r2
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	4403      	add	r3, r0
 8004e0a:	3348      	adds	r3, #72	; 0x48
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4419      	add	r1, r3
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e14:	4613      	mov	r3, r2
 8004e16:	00db      	lsls	r3, r3, #3
 8004e18:	4413      	add	r3, r2
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	4403      	add	r3, r0
 8004e1e:	334c      	adds	r3, #76	; 0x4c
 8004e20:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d113      	bne.n	8004e50 <HAL_PCD_IRQHandler+0x3a2>
 8004e28:	6879      	ldr	r1, [r7, #4]
 8004e2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	00db      	lsls	r3, r3, #3
 8004e30:	4413      	add	r3, r2
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	440b      	add	r3, r1
 8004e36:	3354      	adds	r3, #84	; 0x54
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d108      	bne.n	8004e50 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6818      	ldr	r0, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004e48:	461a      	mov	r2, r3
 8004e4a:	2101      	movs	r1, #1
 8004e4c:	f004 fcee 	bl	800982c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	4619      	mov	r1, r3
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f009 fd9f 	bl	800e99a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	f003 0308 	and.w	r3, r3, #8
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d008      	beq.n	8004e78 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e68:	015a      	lsls	r2, r3, #5
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e72:	461a      	mov	r2, r3
 8004e74:	2308      	movs	r3, #8
 8004e76:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	f003 0310 	and.w	r3, r3, #16
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d008      	beq.n	8004e94 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e84:	015a      	lsls	r2, r3, #5
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	4413      	add	r3, r2
 8004e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e8e:	461a      	mov	r2, r3
 8004e90:	2310      	movs	r3, #16
 8004e92:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d008      	beq.n	8004eb0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea0:	015a      	lsls	r2, r3, #5
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eaa:	461a      	mov	r2, r3
 8004eac:	2340      	movs	r3, #64	; 0x40
 8004eae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	f003 0302 	and.w	r3, r3, #2
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d023      	beq.n	8004f02 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004eba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ebc:	6a38      	ldr	r0, [r7, #32]
 8004ebe:	f003 fbcf 	bl	8008660 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004ec2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	00db      	lsls	r3, r3, #3
 8004ec8:	4413      	add	r3, r2
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	3338      	adds	r3, #56	; 0x38
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	3304      	adds	r3, #4
 8004ed4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	78db      	ldrb	r3, [r3, #3]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d108      	bne.n	8004ef0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	4619      	mov	r1, r3
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f009 fdec 	bl	800eac8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef2:	015a      	lsls	r2, r3, #5
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004efc:	461a      	mov	r2, r3
 8004efe:	2302      	movs	r3, #2
 8004f00:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d003      	beq.n	8004f14 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004f0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 fcdb 	bl	80058ca <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f16:	3301      	adds	r3, #1
 8004f18:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1c:	085b      	lsrs	r3, r3, #1
 8004f1e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	f47f af2e 	bne.w	8004d84 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f004 fbb9 	bl	80096a4 <USB_ReadInterrupts>
 8004f32:	4603      	mov	r3, r0
 8004f34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f3c:	d122      	bne.n	8004f84 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	69fa      	ldr	r2, [r7, #28]
 8004f48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f4c:	f023 0301 	bic.w	r3, r3, #1
 8004f50:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d108      	bne.n	8004f6e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004f64:	2100      	movs	r1, #0
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 fec2 	bl	8005cf0 <HAL_PCDEx_LPM_Callback>
 8004f6c:	e002      	b.n	8004f74 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f009 fd8a 	bl	800ea88 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	695a      	ldr	r2, [r3, #20]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004f82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f004 fb8b 	bl	80096a4 <USB_ReadInterrupts>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f98:	d112      	bne.n	8004fc0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	f003 0301 	and.w	r3, r3, #1
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d102      	bne.n	8004fb0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f009 fd46 	bl	800ea3c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	695a      	ldr	r2, [r3, #20]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004fbe:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f004 fb6d 	bl	80096a4 <USB_ReadInterrupts>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fd4:	f040 80b7 	bne.w	8005146 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004fd8:	69fb      	ldr	r3, [r7, #28]
 8004fda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	69fa      	ldr	r2, [r7, #28]
 8004fe2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fe6:	f023 0301 	bic.w	r3, r3, #1
 8004fea:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2110      	movs	r1, #16
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f003 fb34 	bl	8008660 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ffc:	e046      	b.n	800508c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005000:	015a      	lsls	r2, r3, #5
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	4413      	add	r3, r2
 8005006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800500a:	461a      	mov	r2, r3
 800500c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005010:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005014:	015a      	lsls	r2, r3, #5
 8005016:	69fb      	ldr	r3, [r7, #28]
 8005018:	4413      	add	r3, r2
 800501a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005022:	0151      	lsls	r1, r2, #5
 8005024:	69fa      	ldr	r2, [r7, #28]
 8005026:	440a      	add	r2, r1
 8005028:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800502c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005030:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005034:	015a      	lsls	r2, r3, #5
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	4413      	add	r3, r2
 800503a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800503e:	461a      	mov	r2, r3
 8005040:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005044:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005048:	015a      	lsls	r2, r3, #5
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	4413      	add	r3, r2
 800504e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005056:	0151      	lsls	r1, r2, #5
 8005058:	69fa      	ldr	r2, [r7, #28]
 800505a:	440a      	add	r2, r1
 800505c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005060:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005064:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005068:	015a      	lsls	r2, r3, #5
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	4413      	add	r3, r2
 800506e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005076:	0151      	lsls	r1, r2, #5
 8005078:	69fa      	ldr	r2, [r7, #28]
 800507a:	440a      	add	r2, r1
 800507c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005080:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005084:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005088:	3301      	adds	r3, #1
 800508a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005092:	429a      	cmp	r2, r3
 8005094:	d3b3      	bcc.n	8004ffe <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800509c:	69db      	ldr	r3, [r3, #28]
 800509e:	69fa      	ldr	r2, [r7, #28]
 80050a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050a4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80050a8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d016      	beq.n	80050e0 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80050b2:	69fb      	ldr	r3, [r7, #28]
 80050b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050bc:	69fa      	ldr	r2, [r7, #28]
 80050be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050c2:	f043 030b 	orr.w	r3, r3, #11
 80050c6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d2:	69fa      	ldr	r2, [r7, #28]
 80050d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050d8:	f043 030b 	orr.w	r3, r3, #11
 80050dc:	6453      	str	r3, [r2, #68]	; 0x44
 80050de:	e015      	b.n	800510c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050e6:	695b      	ldr	r3, [r3, #20]
 80050e8:	69fa      	ldr	r2, [r7, #28]
 80050ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80050f2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80050f6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	69fa      	ldr	r2, [r7, #28]
 8005102:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005106:	f043 030b 	orr.w	r3, r3, #11
 800510a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	69fa      	ldr	r2, [r7, #28]
 8005116:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800511a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800511e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6818      	ldr	r0, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005130:	461a      	mov	r2, r3
 8005132:	f004 fb7b 	bl	800982c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	695a      	ldr	r2, [r3, #20]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005144:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4618      	mov	r0, r3
 800514c:	f004 faaa 	bl	80096a4 <USB_ReadInterrupts>
 8005150:	4603      	mov	r3, r0
 8005152:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005156:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800515a:	d124      	bne.n	80051a6 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4618      	mov	r0, r3
 8005162:	f004 fb40 	bl	80097e6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4618      	mov	r0, r3
 800516c:	f003 faf5 	bl	800875a <USB_GetDevSpeed>
 8005170:	4603      	mov	r3, r0
 8005172:	461a      	mov	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681c      	ldr	r4, [r3, #0]
 800517c:	f001 fa28 	bl	80065d0 <HAL_RCC_GetHCLKFreq>
 8005180:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005186:	b2db      	uxtb	r3, r3
 8005188:	461a      	mov	r2, r3
 800518a:	4620      	mov	r0, r4
 800518c:	f002 fff4 	bl	8008178 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f009 fc2a 	bl	800e9ea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	695a      	ldr	r2, [r3, #20]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80051a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4618      	mov	r0, r3
 80051ac:	f004 fa7a 	bl	80096a4 <USB_ReadInterrupts>
 80051b0:	4603      	mov	r3, r0
 80051b2:	f003 0308 	and.w	r3, r3, #8
 80051b6:	2b08      	cmp	r3, #8
 80051b8:	d10a      	bne.n	80051d0 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f009 fc07 	bl	800e9ce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	695a      	ldr	r2, [r3, #20]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f002 0208 	and.w	r2, r2, #8
 80051ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4618      	mov	r0, r3
 80051d6:	f004 fa65 	bl	80096a4 <USB_ReadInterrupts>
 80051da:	4603      	mov	r3, r0
 80051dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051e0:	2b80      	cmp	r3, #128	; 0x80
 80051e2:	d122      	bne.n	800522a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80051e4:	6a3b      	ldr	r3, [r7, #32]
 80051e6:	699b      	ldr	r3, [r3, #24]
 80051e8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051ec:	6a3b      	ldr	r3, [r7, #32]
 80051ee:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80051f0:	2301      	movs	r3, #1
 80051f2:	627b      	str	r3, [r7, #36]	; 0x24
 80051f4:	e014      	b.n	8005220 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80051f6:	6879      	ldr	r1, [r7, #4]
 80051f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051fa:	4613      	mov	r3, r2
 80051fc:	00db      	lsls	r3, r3, #3
 80051fe:	4413      	add	r3, r2
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	440b      	add	r3, r1
 8005204:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005208:	781b      	ldrb	r3, [r3, #0]
 800520a:	2b01      	cmp	r3, #1
 800520c:	d105      	bne.n	800521a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800520e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005210:	b2db      	uxtb	r3, r3
 8005212:	4619      	mov	r1, r3
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f000 fb27 	bl	8005868 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800521a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521c:	3301      	adds	r3, #1
 800521e:	627b      	str	r3, [r7, #36]	; 0x24
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005226:	429a      	cmp	r2, r3
 8005228:	d3e5      	bcc.n	80051f6 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4618      	mov	r0, r3
 8005230:	f004 fa38 	bl	80096a4 <USB_ReadInterrupts>
 8005234:	4603      	mov	r3, r0
 8005236:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800523a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800523e:	d13b      	bne.n	80052b8 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005240:	2301      	movs	r3, #1
 8005242:	627b      	str	r3, [r7, #36]	; 0x24
 8005244:	e02b      	b.n	800529e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005248:	015a      	lsls	r2, r3, #5
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	4413      	add	r3, r2
 800524e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005256:	6879      	ldr	r1, [r7, #4]
 8005258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800525a:	4613      	mov	r3, r2
 800525c:	00db      	lsls	r3, r3, #3
 800525e:	4413      	add	r3, r2
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	440b      	add	r3, r1
 8005264:	3340      	adds	r3, #64	; 0x40
 8005266:	781b      	ldrb	r3, [r3, #0]
 8005268:	2b01      	cmp	r3, #1
 800526a:	d115      	bne.n	8005298 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800526c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800526e:	2b00      	cmp	r3, #0
 8005270:	da12      	bge.n	8005298 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005272:	6879      	ldr	r1, [r7, #4]
 8005274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005276:	4613      	mov	r3, r2
 8005278:	00db      	lsls	r3, r3, #3
 800527a:	4413      	add	r3, r2
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	440b      	add	r3, r1
 8005280:	333f      	adds	r3, #63	; 0x3f
 8005282:	2201      	movs	r2, #1
 8005284:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005288:	b2db      	uxtb	r3, r3
 800528a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800528e:	b2db      	uxtb	r3, r3
 8005290:	4619      	mov	r1, r3
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 fae8 	bl	8005868 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529a:	3301      	adds	r3, #1
 800529c:	627b      	str	r3, [r7, #36]	; 0x24
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d3ce      	bcc.n	8005246 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	695a      	ldr	r2, [r3, #20]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80052b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4618      	mov	r0, r3
 80052be:	f004 f9f1 	bl	80096a4 <USB_ReadInterrupts>
 80052c2:	4603      	mov	r3, r0
 80052c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80052cc:	d155      	bne.n	800537a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80052ce:	2301      	movs	r3, #1
 80052d0:	627b      	str	r3, [r7, #36]	; 0x24
 80052d2:	e045      	b.n	8005360 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80052d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d6:	015a      	lsls	r2, r3, #5
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	4413      	add	r3, r2
 80052dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80052e4:	6879      	ldr	r1, [r7, #4]
 80052e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052e8:	4613      	mov	r3, r2
 80052ea:	00db      	lsls	r3, r3, #3
 80052ec:	4413      	add	r3, r2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	440b      	add	r3, r1
 80052f2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d12e      	bne.n	800535a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80052fc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80052fe:	2b00      	cmp	r3, #0
 8005300:	da2b      	bge.n	800535a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800530e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005312:	429a      	cmp	r2, r3
 8005314:	d121      	bne.n	800535a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005316:	6879      	ldr	r1, [r7, #4]
 8005318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800531a:	4613      	mov	r3, r2
 800531c:	00db      	lsls	r3, r3, #3
 800531e:	4413      	add	r3, r2
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	440b      	add	r3, r1
 8005324:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005328:	2201      	movs	r2, #1
 800532a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800532c:	6a3b      	ldr	r3, [r7, #32]
 800532e:	699b      	ldr	r3, [r3, #24]
 8005330:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005334:	6a3b      	ldr	r3, [r7, #32]
 8005336:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005338:	6a3b      	ldr	r3, [r7, #32]
 800533a:	695b      	ldr	r3, [r3, #20]
 800533c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005340:	2b00      	cmp	r3, #0
 8005342:	d10a      	bne.n	800535a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	69fa      	ldr	r2, [r7, #28]
 800534e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005352:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005356:	6053      	str	r3, [r2, #4]
            break;
 8005358:	e007      	b.n	800536a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800535a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535c:	3301      	adds	r3, #1
 800535e:	627b      	str	r3, [r7, #36]	; 0x24
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005366:	429a      	cmp	r2, r3
 8005368:	d3b4      	bcc.n	80052d4 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	695a      	ldr	r2, [r3, #20]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005378:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4618      	mov	r0, r3
 8005380:	f004 f990 	bl	80096a4 <USB_ReadInterrupts>
 8005384:	4603      	mov	r3, r0
 8005386:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800538a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800538e:	d10a      	bne.n	80053a6 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f009 fbab 	bl	800eaec <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	695a      	ldr	r2, [r3, #20]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80053a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4618      	mov	r0, r3
 80053ac:	f004 f97a 	bl	80096a4 <USB_ReadInterrupts>
 80053b0:	4603      	mov	r3, r0
 80053b2:	f003 0304 	and.w	r3, r3, #4
 80053b6:	2b04      	cmp	r3, #4
 80053b8:	d115      	bne.n	80053e6 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	f003 0304 	and.w	r3, r3, #4
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d002      	beq.n	80053d2 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f009 fb9b 	bl	800eb08 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	6859      	ldr	r1, [r3, #4]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	69ba      	ldr	r2, [r7, #24]
 80053de:	430a      	orrs	r2, r1
 80053e0:	605a      	str	r2, [r3, #4]
 80053e2:	e000      	b.n	80053e6 <HAL_PCD_IRQHandler+0x938>
      return;
 80053e4:	bf00      	nop
    }
  }
}
 80053e6:	3734      	adds	r7, #52	; 0x34
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd90      	pop	{r4, r7, pc}

080053ec <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b082      	sub	sp, #8
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	460b      	mov	r3, r1
 80053f6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d101      	bne.n	8005406 <HAL_PCD_SetAddress+0x1a>
 8005402:	2302      	movs	r3, #2
 8005404:	e013      	b.n	800542e <HAL_PCD_SetAddress+0x42>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	78fa      	ldrb	r2, [r7, #3]
 8005412:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	78fa      	ldrb	r2, [r7, #3]
 800541c:	4611      	mov	r1, r2
 800541e:	4618      	mov	r0, r3
 8005420:	f004 f8d8 	bl	80095d4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3708      	adds	r7, #8
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}

08005436 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005436:	b580      	push	{r7, lr}
 8005438:	b084      	sub	sp, #16
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
 800543e:	4608      	mov	r0, r1
 8005440:	4611      	mov	r1, r2
 8005442:	461a      	mov	r2, r3
 8005444:	4603      	mov	r3, r0
 8005446:	70fb      	strb	r3, [r7, #3]
 8005448:	460b      	mov	r3, r1
 800544a:	803b      	strh	r3, [r7, #0]
 800544c:	4613      	mov	r3, r2
 800544e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005450:	2300      	movs	r3, #0
 8005452:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005454:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005458:	2b00      	cmp	r3, #0
 800545a:	da0f      	bge.n	800547c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800545c:	78fb      	ldrb	r3, [r7, #3]
 800545e:	f003 020f 	and.w	r2, r3, #15
 8005462:	4613      	mov	r3, r2
 8005464:	00db      	lsls	r3, r3, #3
 8005466:	4413      	add	r3, r2
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	3338      	adds	r3, #56	; 0x38
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	4413      	add	r3, r2
 8005470:	3304      	adds	r3, #4
 8005472:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2201      	movs	r2, #1
 8005478:	705a      	strb	r2, [r3, #1]
 800547a:	e00f      	b.n	800549c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800547c:	78fb      	ldrb	r3, [r7, #3]
 800547e:	f003 020f 	and.w	r2, r3, #15
 8005482:	4613      	mov	r3, r2
 8005484:	00db      	lsls	r3, r3, #3
 8005486:	4413      	add	r3, r2
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	4413      	add	r3, r2
 8005492:	3304      	adds	r3, #4
 8005494:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2200      	movs	r2, #0
 800549a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800549c:	78fb      	ldrb	r3, [r7, #3]
 800549e:	f003 030f 	and.w	r3, r3, #15
 80054a2:	b2da      	uxtb	r2, r3
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80054a8:	883a      	ldrh	r2, [r7, #0]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	78ba      	ldrb	r2, [r7, #2]
 80054b2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	785b      	ldrb	r3, [r3, #1]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d004      	beq.n	80054c6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80054c6:	78bb      	ldrb	r3, [r7, #2]
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d102      	bne.n	80054d2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2200      	movs	r2, #0
 80054d0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d101      	bne.n	80054e0 <HAL_PCD_EP_Open+0xaa>
 80054dc:	2302      	movs	r3, #2
 80054de:	e00e      	b.n	80054fe <HAL_PCD_EP_Open+0xc8>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68f9      	ldr	r1, [r7, #12]
 80054ee:	4618      	mov	r0, r3
 80054f0:	f003 f958 	bl	80087a4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80054fc:	7afb      	ldrb	r3, [r7, #11]
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3710      	adds	r7, #16
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}

08005506 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005506:	b580      	push	{r7, lr}
 8005508:	b084      	sub	sp, #16
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
 800550e:	460b      	mov	r3, r1
 8005510:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005512:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005516:	2b00      	cmp	r3, #0
 8005518:	da0f      	bge.n	800553a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800551a:	78fb      	ldrb	r3, [r7, #3]
 800551c:	f003 020f 	and.w	r2, r3, #15
 8005520:	4613      	mov	r3, r2
 8005522:	00db      	lsls	r3, r3, #3
 8005524:	4413      	add	r3, r2
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	3338      	adds	r3, #56	; 0x38
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	4413      	add	r3, r2
 800552e:	3304      	adds	r3, #4
 8005530:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2201      	movs	r2, #1
 8005536:	705a      	strb	r2, [r3, #1]
 8005538:	e00f      	b.n	800555a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800553a:	78fb      	ldrb	r3, [r7, #3]
 800553c:	f003 020f 	and.w	r2, r3, #15
 8005540:	4613      	mov	r3, r2
 8005542:	00db      	lsls	r3, r3, #3
 8005544:	4413      	add	r3, r2
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	4413      	add	r3, r2
 8005550:	3304      	adds	r3, #4
 8005552:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800555a:	78fb      	ldrb	r3, [r7, #3]
 800555c:	f003 030f 	and.w	r3, r3, #15
 8005560:	b2da      	uxtb	r2, r3
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800556c:	2b01      	cmp	r3, #1
 800556e:	d101      	bne.n	8005574 <HAL_PCD_EP_Close+0x6e>
 8005570:	2302      	movs	r3, #2
 8005572:	e00e      	b.n	8005592 <HAL_PCD_EP_Close+0x8c>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2201      	movs	r2, #1
 8005578:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	68f9      	ldr	r1, [r7, #12]
 8005582:	4618      	mov	r0, r3
 8005584:	f003 f996 	bl	80088b4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005590:	2300      	movs	r3, #0
}
 8005592:	4618      	mov	r0, r3
 8005594:	3710      	adds	r7, #16
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}

0800559a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800559a:	b580      	push	{r7, lr}
 800559c:	b086      	sub	sp, #24
 800559e:	af00      	add	r7, sp, #0
 80055a0:	60f8      	str	r0, [r7, #12]
 80055a2:	607a      	str	r2, [r7, #4]
 80055a4:	603b      	str	r3, [r7, #0]
 80055a6:	460b      	mov	r3, r1
 80055a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80055aa:	7afb      	ldrb	r3, [r7, #11]
 80055ac:	f003 020f 	and.w	r2, r3, #15
 80055b0:	4613      	mov	r3, r2
 80055b2:	00db      	lsls	r3, r3, #3
 80055b4:	4413      	add	r3, r2
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	4413      	add	r3, r2
 80055c0:	3304      	adds	r3, #4
 80055c2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	683a      	ldr	r2, [r7, #0]
 80055ce:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	2200      	movs	r2, #0
 80055d4:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	2200      	movs	r2, #0
 80055da:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80055dc:	7afb      	ldrb	r3, [r7, #11]
 80055de:	f003 030f 	and.w	r3, r3, #15
 80055e2:	b2da      	uxtb	r2, r3
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d102      	bne.n	80055f6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80055f6:	7afb      	ldrb	r3, [r7, #11]
 80055f8:	f003 030f 	and.w	r3, r3, #15
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d109      	bne.n	8005614 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6818      	ldr	r0, [r3, #0]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	691b      	ldr	r3, [r3, #16]
 8005608:	b2db      	uxtb	r3, r3
 800560a:	461a      	mov	r2, r3
 800560c:	6979      	ldr	r1, [r7, #20]
 800560e:	f003 fc75 	bl	8008efc <USB_EP0StartXfer>
 8005612:	e008      	b.n	8005626 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6818      	ldr	r0, [r3, #0]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	691b      	ldr	r3, [r3, #16]
 800561c:	b2db      	uxtb	r3, r3
 800561e:	461a      	mov	r2, r3
 8005620:	6979      	ldr	r1, [r7, #20]
 8005622:	f003 fa23 	bl	8008a6c <USB_EPStartXfer>
  }

  return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3718      	adds	r7, #24
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005630:	b480      	push	{r7}
 8005632:	b083      	sub	sp, #12
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	460b      	mov	r3, r1
 800563a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800563c:	78fb      	ldrb	r3, [r7, #3]
 800563e:	f003 020f 	and.w	r2, r3, #15
 8005642:	6879      	ldr	r1, [r7, #4]
 8005644:	4613      	mov	r3, r2
 8005646:	00db      	lsls	r3, r3, #3
 8005648:	4413      	add	r3, r2
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	440b      	add	r3, r1
 800564e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005652:	681b      	ldr	r3, [r3, #0]
}
 8005654:	4618      	mov	r0, r3
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	607a      	str	r2, [r7, #4]
 800566a:	603b      	str	r3, [r7, #0]
 800566c:	460b      	mov	r3, r1
 800566e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005670:	7afb      	ldrb	r3, [r7, #11]
 8005672:	f003 020f 	and.w	r2, r3, #15
 8005676:	4613      	mov	r3, r2
 8005678:	00db      	lsls	r3, r3, #3
 800567a:	4413      	add	r3, r2
 800567c:	009b      	lsls	r3, r3, #2
 800567e:	3338      	adds	r3, #56	; 0x38
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	4413      	add	r3, r2
 8005684:	3304      	adds	r3, #4
 8005686:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	687a      	ldr	r2, [r7, #4]
 800568c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	683a      	ldr	r2, [r7, #0]
 8005692:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	2200      	movs	r2, #0
 8005698:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	2201      	movs	r2, #1
 800569e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80056a0:	7afb      	ldrb	r3, [r7, #11]
 80056a2:	f003 030f 	and.w	r3, r3, #15
 80056a6:	b2da      	uxtb	r2, r3
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	691b      	ldr	r3, [r3, #16]
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d102      	bne.n	80056ba <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80056ba:	7afb      	ldrb	r3, [r7, #11]
 80056bc:	f003 030f 	and.w	r3, r3, #15
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d109      	bne.n	80056d8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6818      	ldr	r0, [r3, #0]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	691b      	ldr	r3, [r3, #16]
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	461a      	mov	r2, r3
 80056d0:	6979      	ldr	r1, [r7, #20]
 80056d2:	f003 fc13 	bl	8008efc <USB_EP0StartXfer>
 80056d6:	e008      	b.n	80056ea <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6818      	ldr	r0, [r3, #0]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	461a      	mov	r2, r3
 80056e4:	6979      	ldr	r1, [r7, #20]
 80056e6:	f003 f9c1 	bl	8008a6c <USB_EPStartXfer>
  }

  return HAL_OK;
 80056ea:	2300      	movs	r3, #0
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3718      	adds	r7, #24
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	460b      	mov	r3, r1
 80056fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005700:	78fb      	ldrb	r3, [r7, #3]
 8005702:	f003 020f 	and.w	r2, r3, #15
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	429a      	cmp	r2, r3
 800570c:	d901      	bls.n	8005712 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e050      	b.n	80057b4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005712:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005716:	2b00      	cmp	r3, #0
 8005718:	da0f      	bge.n	800573a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800571a:	78fb      	ldrb	r3, [r7, #3]
 800571c:	f003 020f 	and.w	r2, r3, #15
 8005720:	4613      	mov	r3, r2
 8005722:	00db      	lsls	r3, r3, #3
 8005724:	4413      	add	r3, r2
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	3338      	adds	r3, #56	; 0x38
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	4413      	add	r3, r2
 800572e:	3304      	adds	r3, #4
 8005730:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2201      	movs	r2, #1
 8005736:	705a      	strb	r2, [r3, #1]
 8005738:	e00d      	b.n	8005756 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800573a:	78fa      	ldrb	r2, [r7, #3]
 800573c:	4613      	mov	r3, r2
 800573e:	00db      	lsls	r3, r3, #3
 8005740:	4413      	add	r3, r2
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	4413      	add	r3, r2
 800574c:	3304      	adds	r3, #4
 800574e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2200      	movs	r2, #0
 8005754:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2201      	movs	r2, #1
 800575a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800575c:	78fb      	ldrb	r3, [r7, #3]
 800575e:	f003 030f 	and.w	r3, r3, #15
 8005762:	b2da      	uxtb	r2, r3
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800576e:	2b01      	cmp	r3, #1
 8005770:	d101      	bne.n	8005776 <HAL_PCD_EP_SetStall+0x82>
 8005772:	2302      	movs	r3, #2
 8005774:	e01e      	b.n	80057b4 <HAL_PCD_EP_SetStall+0xc0>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2201      	movs	r2, #1
 800577a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68f9      	ldr	r1, [r7, #12]
 8005784:	4618      	mov	r0, r3
 8005786:	f003 fe51 	bl	800942c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800578a:	78fb      	ldrb	r3, [r7, #3]
 800578c:	f003 030f 	and.w	r3, r3, #15
 8005790:	2b00      	cmp	r3, #0
 8005792:	d10a      	bne.n	80057aa <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6818      	ldr	r0, [r3, #0]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	b2d9      	uxtb	r1, r3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80057a4:	461a      	mov	r2, r3
 80057a6:	f004 f841 	bl	800982c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3710      	adds	r7, #16
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	460b      	mov	r3, r1
 80057c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80057c8:	78fb      	ldrb	r3, [r7, #3]
 80057ca:	f003 020f 	and.w	r2, r3, #15
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d901      	bls.n	80057da <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e042      	b.n	8005860 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80057da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	da0f      	bge.n	8005802 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057e2:	78fb      	ldrb	r3, [r7, #3]
 80057e4:	f003 020f 	and.w	r2, r3, #15
 80057e8:	4613      	mov	r3, r2
 80057ea:	00db      	lsls	r3, r3, #3
 80057ec:	4413      	add	r3, r2
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	3338      	adds	r3, #56	; 0x38
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	4413      	add	r3, r2
 80057f6:	3304      	adds	r3, #4
 80057f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2201      	movs	r2, #1
 80057fe:	705a      	strb	r2, [r3, #1]
 8005800:	e00f      	b.n	8005822 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005802:	78fb      	ldrb	r3, [r7, #3]
 8005804:	f003 020f 	and.w	r2, r3, #15
 8005808:	4613      	mov	r3, r2
 800580a:	00db      	lsls	r3, r3, #3
 800580c:	4413      	add	r3, r2
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	4413      	add	r3, r2
 8005818:	3304      	adds	r3, #4
 800581a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2200      	movs	r2, #0
 8005826:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005828:	78fb      	ldrb	r3, [r7, #3]
 800582a:	f003 030f 	and.w	r3, r3, #15
 800582e:	b2da      	uxtb	r2, r3
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800583a:	2b01      	cmp	r3, #1
 800583c:	d101      	bne.n	8005842 <HAL_PCD_EP_ClrStall+0x86>
 800583e:	2302      	movs	r3, #2
 8005840:	e00e      	b.n	8005860 <HAL_PCD_EP_ClrStall+0xa4>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2201      	movs	r2, #1
 8005846:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68f9      	ldr	r1, [r7, #12]
 8005850:	4618      	mov	r0, r3
 8005852:	f003 fe59 	bl	8009508 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800585e:	2300      	movs	r3, #0
}
 8005860:	4618      	mov	r0, r3
 8005862:	3710      	adds	r7, #16
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	460b      	mov	r3, r1
 8005872:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005874:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005878:	2b00      	cmp	r3, #0
 800587a:	da0c      	bge.n	8005896 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800587c:	78fb      	ldrb	r3, [r7, #3]
 800587e:	f003 020f 	and.w	r2, r3, #15
 8005882:	4613      	mov	r3, r2
 8005884:	00db      	lsls	r3, r3, #3
 8005886:	4413      	add	r3, r2
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	3338      	adds	r3, #56	; 0x38
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	4413      	add	r3, r2
 8005890:	3304      	adds	r3, #4
 8005892:	60fb      	str	r3, [r7, #12]
 8005894:	e00c      	b.n	80058b0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005896:	78fb      	ldrb	r3, [r7, #3]
 8005898:	f003 020f 	and.w	r2, r3, #15
 800589c:	4613      	mov	r3, r2
 800589e:	00db      	lsls	r3, r3, #3
 80058a0:	4413      	add	r3, r2
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	4413      	add	r3, r2
 80058ac:	3304      	adds	r3, #4
 80058ae:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68f9      	ldr	r1, [r7, #12]
 80058b6:	4618      	mov	r0, r3
 80058b8:	f003 fc78 	bl	80091ac <USB_EPStopXfer>
 80058bc:	4603      	mov	r3, r0
 80058be:	72fb      	strb	r3, [r7, #11]

  return ret;
 80058c0:	7afb      	ldrb	r3, [r7, #11]
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3710      	adds	r7, #16
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b08a      	sub	sp, #40	; 0x28
 80058ce:	af02      	add	r7, sp, #8
 80058d0:	6078      	str	r0, [r7, #4]
 80058d2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80058de:	683a      	ldr	r2, [r7, #0]
 80058e0:	4613      	mov	r3, r2
 80058e2:	00db      	lsls	r3, r3, #3
 80058e4:	4413      	add	r3, r2
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	3338      	adds	r3, #56	; 0x38
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	4413      	add	r3, r2
 80058ee:	3304      	adds	r3, #4
 80058f0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6a1a      	ldr	r2, [r3, #32]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d901      	bls.n	8005902 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e06c      	b.n	80059dc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	699a      	ldr	r2, [r3, #24]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	6a1b      	ldr	r3, [r3, #32]
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	69fa      	ldr	r2, [r7, #28]
 8005914:	429a      	cmp	r2, r3
 8005916:	d902      	bls.n	800591e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800591e:	69fb      	ldr	r3, [r7, #28]
 8005920:	3303      	adds	r3, #3
 8005922:	089b      	lsrs	r3, r3, #2
 8005924:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005926:	e02b      	b.n	8005980 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	699a      	ldr	r2, [r3, #24]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6a1b      	ldr	r3, [r3, #32]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	69fa      	ldr	r2, [r7, #28]
 800593a:	429a      	cmp	r2, r3
 800593c:	d902      	bls.n	8005944 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	3303      	adds	r3, #3
 8005948:	089b      	lsrs	r3, r3, #2
 800594a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6919      	ldr	r1, [r3, #16]
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	b2da      	uxtb	r2, r3
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800595c:	b2db      	uxtb	r3, r3
 800595e:	9300      	str	r3, [sp, #0]
 8005960:	4603      	mov	r3, r0
 8005962:	6978      	ldr	r0, [r7, #20]
 8005964:	f003 fccc 	bl	8009300 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	691a      	ldr	r2, [r3, #16]
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	441a      	add	r2, r3
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6a1a      	ldr	r2, [r3, #32]
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	441a      	add	r2, r3
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	015a      	lsls	r2, r3, #5
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	4413      	add	r3, r2
 8005988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	b29b      	uxth	r3, r3
 8005990:	69ba      	ldr	r2, [r7, #24]
 8005992:	429a      	cmp	r2, r3
 8005994:	d809      	bhi.n	80059aa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6a1a      	ldr	r2, [r3, #32]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800599e:	429a      	cmp	r2, r3
 80059a0:	d203      	bcs.n	80059aa <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	699b      	ldr	r3, [r3, #24]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d1be      	bne.n	8005928 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	699a      	ldr	r2, [r3, #24]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6a1b      	ldr	r3, [r3, #32]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d811      	bhi.n	80059da <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	f003 030f 	and.w	r3, r3, #15
 80059bc:	2201      	movs	r2, #1
 80059be:	fa02 f303 	lsl.w	r3, r2, r3
 80059c2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	43db      	mvns	r3, r3
 80059d0:	6939      	ldr	r1, [r7, #16]
 80059d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059d6:	4013      	ands	r3, r2
 80059d8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3720      	adds	r7, #32
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b088      	sub	sp, #32
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	333c      	adds	r3, #60	; 0x3c
 80059fc:	3304      	adds	r3, #4
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	015a      	lsls	r2, r3, #5
 8005a06:	69bb      	ldr	r3, [r7, #24]
 8005a08:	4413      	add	r3, r2
 8005a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d17b      	bne.n	8005b12 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	f003 0308 	and.w	r3, r3, #8
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d015      	beq.n	8005a50 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	4a61      	ldr	r2, [pc, #388]	; (8005bac <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	f240 80b9 	bls.w	8005ba0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f000 80b3 	beq.w	8005ba0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	015a      	lsls	r2, r3, #5
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	4413      	add	r3, r2
 8005a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a46:	461a      	mov	r2, r3
 8005a48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a4c:	6093      	str	r3, [r2, #8]
 8005a4e:	e0a7      	b.n	8005ba0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	f003 0320 	and.w	r3, r3, #32
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d009      	beq.n	8005a6e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	015a      	lsls	r2, r3, #5
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	4413      	add	r3, r2
 8005a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a66:	461a      	mov	r2, r3
 8005a68:	2320      	movs	r3, #32
 8005a6a:	6093      	str	r3, [r2, #8]
 8005a6c:	e098      	b.n	8005ba0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f040 8093 	bne.w	8005ba0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	4a4b      	ldr	r2, [pc, #300]	; (8005bac <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d90f      	bls.n	8005aa2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d00a      	beq.n	8005aa2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	015a      	lsls	r2, r3, #5
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	4413      	add	r3, r2
 8005a94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a98:	461a      	mov	r2, r3
 8005a9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a9e:	6093      	str	r3, [r2, #8]
 8005aa0:	e07e      	b.n	8005ba0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005aa2:	683a      	ldr	r2, [r7, #0]
 8005aa4:	4613      	mov	r3, r2
 8005aa6:	00db      	lsls	r3, r3, #3
 8005aa8:	4413      	add	r3, r2
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	3304      	adds	r3, #4
 8005ab6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	69da      	ldr	r2, [r3, #28]
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	0159      	lsls	r1, r3, #5
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	440b      	add	r3, r1
 8005ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ace:	1ad2      	subs	r2, r2, r3
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d114      	bne.n	8005b04 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	699b      	ldr	r3, [r3, #24]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d109      	bne.n	8005af6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6818      	ldr	r0, [r3, #0]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005aec:	461a      	mov	r2, r3
 8005aee:	2101      	movs	r1, #1
 8005af0:	f003 fe9c 	bl	800982c <USB_EP0_OutStart>
 8005af4:	e006      	b.n	8005b04 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	691a      	ldr	r2, [r3, #16]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	441a      	add	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	4619      	mov	r1, r3
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f008 ff2a 	bl	800e964 <HAL_PCD_DataOutStageCallback>
 8005b10:	e046      	b.n	8005ba0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	4a26      	ldr	r2, [pc, #152]	; (8005bb0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d124      	bne.n	8005b64 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d00a      	beq.n	8005b3a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	015a      	lsls	r2, r3, #5
 8005b28:	69bb      	ldr	r3, [r7, #24]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b30:	461a      	mov	r2, r3
 8005b32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b36:	6093      	str	r3, [r2, #8]
 8005b38:	e032      	b.n	8005ba0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	f003 0320 	and.w	r3, r3, #32
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d008      	beq.n	8005b56 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	015a      	lsls	r2, r3, #5
 8005b48:	69bb      	ldr	r3, [r7, #24]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b50:	461a      	mov	r2, r3
 8005b52:	2320      	movs	r3, #32
 8005b54:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f008 ff01 	bl	800e964 <HAL_PCD_DataOutStageCallback>
 8005b62:	e01d      	b.n	8005ba0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d114      	bne.n	8005b94 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005b6a:	6879      	ldr	r1, [r7, #4]
 8005b6c:	683a      	ldr	r2, [r7, #0]
 8005b6e:	4613      	mov	r3, r2
 8005b70:	00db      	lsls	r3, r3, #3
 8005b72:	4413      	add	r3, r2
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	440b      	add	r3, r1
 8005b78:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d108      	bne.n	8005b94 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6818      	ldr	r0, [r3, #0]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	2100      	movs	r1, #0
 8005b90:	f003 fe4c 	bl	800982c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	4619      	mov	r1, r3
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f008 fee2 	bl	800e964 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3720      	adds	r7, #32
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	4f54300a 	.word	0x4f54300a
 8005bb0:	4f54310a 	.word	0x4f54310a

08005bb4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b086      	sub	sp, #24
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
 8005bbc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	333c      	adds	r3, #60	; 0x3c
 8005bcc:	3304      	adds	r3, #4
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	015a      	lsls	r2, r3, #5
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	4413      	add	r3, r2
 8005bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	4a15      	ldr	r2, [pc, #84]	; (8005c3c <PCD_EP_OutSetupPacket_int+0x88>)
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d90e      	bls.n	8005c08 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d009      	beq.n	8005c08 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	015a      	lsls	r2, r3, #5
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c00:	461a      	mov	r2, r3
 8005c02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c06:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f008 fe99 	bl	800e940 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	4a0a      	ldr	r2, [pc, #40]	; (8005c3c <PCD_EP_OutSetupPacket_int+0x88>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d90c      	bls.n	8005c30 <PCD_EP_OutSetupPacket_int+0x7c>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	691b      	ldr	r3, [r3, #16]
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d108      	bne.n	8005c30 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6818      	ldr	r0, [r3, #0]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005c28:	461a      	mov	r2, r3
 8005c2a:	2101      	movs	r1, #1
 8005c2c:	f003 fdfe 	bl	800982c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3718      	adds	r7, #24
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	4f54300a 	.word	0x4f54300a

08005c40 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b085      	sub	sp, #20
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	460b      	mov	r3, r1
 8005c4a:	70fb      	strb	r3, [r7, #3]
 8005c4c:	4613      	mov	r3, r2
 8005c4e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c56:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005c58:	78fb      	ldrb	r3, [r7, #3]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d107      	bne.n	8005c6e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005c5e:	883b      	ldrh	r3, [r7, #0]
 8005c60:	0419      	lsls	r1, r3, #16
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68ba      	ldr	r2, [r7, #8]
 8005c68:	430a      	orrs	r2, r1
 8005c6a:	629a      	str	r2, [r3, #40]	; 0x28
 8005c6c:	e028      	b.n	8005cc0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c74:	0c1b      	lsrs	r3, r3, #16
 8005c76:	68ba      	ldr	r2, [r7, #8]
 8005c78:	4413      	add	r3, r2
 8005c7a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	73fb      	strb	r3, [r7, #15]
 8005c80:	e00d      	b.n	8005c9e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	7bfb      	ldrb	r3, [r7, #15]
 8005c88:	3340      	adds	r3, #64	; 0x40
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	4413      	add	r3, r2
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	0c1b      	lsrs	r3, r3, #16
 8005c92:	68ba      	ldr	r2, [r7, #8]
 8005c94:	4413      	add	r3, r2
 8005c96:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005c98:	7bfb      	ldrb	r3, [r7, #15]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	73fb      	strb	r3, [r7, #15]
 8005c9e:	7bfa      	ldrb	r2, [r7, #15]
 8005ca0:	78fb      	ldrb	r3, [r7, #3]
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d3ec      	bcc.n	8005c82 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005ca8:	883b      	ldrh	r3, [r7, #0]
 8005caa:	0418      	lsls	r0, r3, #16
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6819      	ldr	r1, [r3, #0]
 8005cb0:	78fb      	ldrb	r3, [r7, #3]
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	68ba      	ldr	r2, [r7, #8]
 8005cb6:	4302      	orrs	r2, r0
 8005cb8:	3340      	adds	r3, #64	; 0x40
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	440b      	add	r3, r1
 8005cbe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3714      	adds	r7, #20
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr

08005cce <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005cce:	b480      	push	{r7}
 8005cd0:	b083      	sub	sp, #12
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	887a      	ldrh	r2, [r7, #2]
 8005ce0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005ce2:	2300      	movs	r3, #0
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005cfc:	bf00      	nop
 8005cfe:	370c      	adds	r7, #12
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b086      	sub	sp, #24
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d101      	bne.n	8005d1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e267      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0301 	and.w	r3, r3, #1
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d075      	beq.n	8005e12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d26:	4b88      	ldr	r3, [pc, #544]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	f003 030c 	and.w	r3, r3, #12
 8005d2e:	2b04      	cmp	r3, #4
 8005d30:	d00c      	beq.n	8005d4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d32:	4b85      	ldr	r3, [pc, #532]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005d3a:	2b08      	cmp	r3, #8
 8005d3c:	d112      	bne.n	8005d64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d3e:	4b82      	ldr	r3, [pc, #520]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d4a:	d10b      	bne.n	8005d64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d4c:	4b7e      	ldr	r3, [pc, #504]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d05b      	beq.n	8005e10 <HAL_RCC_OscConfig+0x108>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d157      	bne.n	8005e10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d60:	2301      	movs	r3, #1
 8005d62:	e242      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d6c:	d106      	bne.n	8005d7c <HAL_RCC_OscConfig+0x74>
 8005d6e:	4b76      	ldr	r3, [pc, #472]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a75      	ldr	r2, [pc, #468]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d78:	6013      	str	r3, [r2, #0]
 8005d7a:	e01d      	b.n	8005db8 <HAL_RCC_OscConfig+0xb0>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d84:	d10c      	bne.n	8005da0 <HAL_RCC_OscConfig+0x98>
 8005d86:	4b70      	ldr	r3, [pc, #448]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a6f      	ldr	r2, [pc, #444]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005d8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d90:	6013      	str	r3, [r2, #0]
 8005d92:	4b6d      	ldr	r3, [pc, #436]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a6c      	ldr	r2, [pc, #432]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d9c:	6013      	str	r3, [r2, #0]
 8005d9e:	e00b      	b.n	8005db8 <HAL_RCC_OscConfig+0xb0>
 8005da0:	4b69      	ldr	r3, [pc, #420]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a68      	ldr	r2, [pc, #416]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005da6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005daa:	6013      	str	r3, [r2, #0]
 8005dac:	4b66      	ldr	r3, [pc, #408]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a65      	ldr	r2, [pc, #404]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005db2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005db6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d013      	beq.n	8005de8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dc0:	f7fd f9c0 	bl	8003144 <HAL_GetTick>
 8005dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dc6:	e008      	b.n	8005dda <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005dc8:	f7fd f9bc 	bl	8003144 <HAL_GetTick>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	2b64      	cmp	r3, #100	; 0x64
 8005dd4:	d901      	bls.n	8005dda <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e207      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dda:	4b5b      	ldr	r3, [pc, #364]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d0f0      	beq.n	8005dc8 <HAL_RCC_OscConfig+0xc0>
 8005de6:	e014      	b.n	8005e12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005de8:	f7fd f9ac 	bl	8003144 <HAL_GetTick>
 8005dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dee:	e008      	b.n	8005e02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005df0:	f7fd f9a8 	bl	8003144 <HAL_GetTick>
 8005df4:	4602      	mov	r2, r0
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	2b64      	cmp	r3, #100	; 0x64
 8005dfc:	d901      	bls.n	8005e02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e1f3      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e02:	4b51      	ldr	r3, [pc, #324]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d1f0      	bne.n	8005df0 <HAL_RCC_OscConfig+0xe8>
 8005e0e:	e000      	b.n	8005e12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f003 0302 	and.w	r3, r3, #2
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d063      	beq.n	8005ee6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e1e:	4b4a      	ldr	r3, [pc, #296]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f003 030c 	and.w	r3, r3, #12
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d00b      	beq.n	8005e42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e2a:	4b47      	ldr	r3, [pc, #284]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005e2c:	689b      	ldr	r3, [r3, #8]
 8005e2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005e32:	2b08      	cmp	r3, #8
 8005e34:	d11c      	bne.n	8005e70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e36:	4b44      	ldr	r3, [pc, #272]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d116      	bne.n	8005e70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e42:	4b41      	ldr	r3, [pc, #260]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 0302 	and.w	r3, r3, #2
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d005      	beq.n	8005e5a <HAL_RCC_OscConfig+0x152>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d001      	beq.n	8005e5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e1c7      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e5a:	4b3b      	ldr	r3, [pc, #236]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	691b      	ldr	r3, [r3, #16]
 8005e66:	00db      	lsls	r3, r3, #3
 8005e68:	4937      	ldr	r1, [pc, #220]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e6e:	e03a      	b.n	8005ee6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d020      	beq.n	8005eba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e78:	4b34      	ldr	r3, [pc, #208]	; (8005f4c <HAL_RCC_OscConfig+0x244>)
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e7e:	f7fd f961 	bl	8003144 <HAL_GetTick>
 8005e82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e84:	e008      	b.n	8005e98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e86:	f7fd f95d 	bl	8003144 <HAL_GetTick>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	1ad3      	subs	r3, r2, r3
 8005e90:	2b02      	cmp	r3, #2
 8005e92:	d901      	bls.n	8005e98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005e94:	2303      	movs	r3, #3
 8005e96:	e1a8      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e98:	4b2b      	ldr	r3, [pc, #172]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 0302 	and.w	r3, r3, #2
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d0f0      	beq.n	8005e86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ea4:	4b28      	ldr	r3, [pc, #160]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	00db      	lsls	r3, r3, #3
 8005eb2:	4925      	ldr	r1, [pc, #148]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	600b      	str	r3, [r1, #0]
 8005eb8:	e015      	b.n	8005ee6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005eba:	4b24      	ldr	r3, [pc, #144]	; (8005f4c <HAL_RCC_OscConfig+0x244>)
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ec0:	f7fd f940 	bl	8003144 <HAL_GetTick>
 8005ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ec6:	e008      	b.n	8005eda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ec8:	f7fd f93c 	bl	8003144 <HAL_GetTick>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	1ad3      	subs	r3, r2, r3
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d901      	bls.n	8005eda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	e187      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005eda:	4b1b      	ldr	r3, [pc, #108]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f003 0302 	and.w	r3, r3, #2
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d1f0      	bne.n	8005ec8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f003 0308 	and.w	r3, r3, #8
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d036      	beq.n	8005f60 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	695b      	ldr	r3, [r3, #20]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d016      	beq.n	8005f28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005efa:	4b15      	ldr	r3, [pc, #84]	; (8005f50 <HAL_RCC_OscConfig+0x248>)
 8005efc:	2201      	movs	r2, #1
 8005efe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f00:	f7fd f920 	bl	8003144 <HAL_GetTick>
 8005f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f06:	e008      	b.n	8005f1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f08:	f7fd f91c 	bl	8003144 <HAL_GetTick>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	2b02      	cmp	r3, #2
 8005f14:	d901      	bls.n	8005f1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	e167      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f1a:	4b0b      	ldr	r3, [pc, #44]	; (8005f48 <HAL_RCC_OscConfig+0x240>)
 8005f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f1e:	f003 0302 	and.w	r3, r3, #2
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d0f0      	beq.n	8005f08 <HAL_RCC_OscConfig+0x200>
 8005f26:	e01b      	b.n	8005f60 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f28:	4b09      	ldr	r3, [pc, #36]	; (8005f50 <HAL_RCC_OscConfig+0x248>)
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f2e:	f7fd f909 	bl	8003144 <HAL_GetTick>
 8005f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f34:	e00e      	b.n	8005f54 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005f36:	f7fd f905 	bl	8003144 <HAL_GetTick>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	d907      	bls.n	8005f54 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005f44:	2303      	movs	r3, #3
 8005f46:	e150      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
 8005f48:	40023800 	.word	0x40023800
 8005f4c:	42470000 	.word	0x42470000
 8005f50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f54:	4b88      	ldr	r3, [pc, #544]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 8005f56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f58:	f003 0302 	and.w	r3, r3, #2
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d1ea      	bne.n	8005f36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f003 0304 	and.w	r3, r3, #4
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	f000 8097 	beq.w	800609c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f72:	4b81      	ldr	r3, [pc, #516]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 8005f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d10f      	bne.n	8005f9e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f7e:	2300      	movs	r3, #0
 8005f80:	60bb      	str	r3, [r7, #8]
 8005f82:	4b7d      	ldr	r3, [pc, #500]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 8005f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f86:	4a7c      	ldr	r2, [pc, #496]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 8005f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f8c:	6413      	str	r3, [r2, #64]	; 0x40
 8005f8e:	4b7a      	ldr	r3, [pc, #488]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 8005f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f96:	60bb      	str	r3, [r7, #8]
 8005f98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f9e:	4b77      	ldr	r3, [pc, #476]	; (800617c <HAL_RCC_OscConfig+0x474>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d118      	bne.n	8005fdc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005faa:	4b74      	ldr	r3, [pc, #464]	; (800617c <HAL_RCC_OscConfig+0x474>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a73      	ldr	r2, [pc, #460]	; (800617c <HAL_RCC_OscConfig+0x474>)
 8005fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fb6:	f7fd f8c5 	bl	8003144 <HAL_GetTick>
 8005fba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fbc:	e008      	b.n	8005fd0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fbe:	f7fd f8c1 	bl	8003144 <HAL_GetTick>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d901      	bls.n	8005fd0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	e10c      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fd0:	4b6a      	ldr	r3, [pc, #424]	; (800617c <HAL_RCC_OscConfig+0x474>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d0f0      	beq.n	8005fbe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d106      	bne.n	8005ff2 <HAL_RCC_OscConfig+0x2ea>
 8005fe4:	4b64      	ldr	r3, [pc, #400]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 8005fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fe8:	4a63      	ldr	r2, [pc, #396]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 8005fea:	f043 0301 	orr.w	r3, r3, #1
 8005fee:	6713      	str	r3, [r2, #112]	; 0x70
 8005ff0:	e01c      	b.n	800602c <HAL_RCC_OscConfig+0x324>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	2b05      	cmp	r3, #5
 8005ff8:	d10c      	bne.n	8006014 <HAL_RCC_OscConfig+0x30c>
 8005ffa:	4b5f      	ldr	r3, [pc, #380]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 8005ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ffe:	4a5e      	ldr	r2, [pc, #376]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 8006000:	f043 0304 	orr.w	r3, r3, #4
 8006004:	6713      	str	r3, [r2, #112]	; 0x70
 8006006:	4b5c      	ldr	r3, [pc, #368]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 8006008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800600a:	4a5b      	ldr	r2, [pc, #364]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 800600c:	f043 0301 	orr.w	r3, r3, #1
 8006010:	6713      	str	r3, [r2, #112]	; 0x70
 8006012:	e00b      	b.n	800602c <HAL_RCC_OscConfig+0x324>
 8006014:	4b58      	ldr	r3, [pc, #352]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 8006016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006018:	4a57      	ldr	r2, [pc, #348]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 800601a:	f023 0301 	bic.w	r3, r3, #1
 800601e:	6713      	str	r3, [r2, #112]	; 0x70
 8006020:	4b55      	ldr	r3, [pc, #340]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 8006022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006024:	4a54      	ldr	r2, [pc, #336]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 8006026:	f023 0304 	bic.w	r3, r3, #4
 800602a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d015      	beq.n	8006060 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006034:	f7fd f886 	bl	8003144 <HAL_GetTick>
 8006038:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800603a:	e00a      	b.n	8006052 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800603c:	f7fd f882 	bl	8003144 <HAL_GetTick>
 8006040:	4602      	mov	r2, r0
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	f241 3288 	movw	r2, #5000	; 0x1388
 800604a:	4293      	cmp	r3, r2
 800604c:	d901      	bls.n	8006052 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800604e:	2303      	movs	r3, #3
 8006050:	e0cb      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006052:	4b49      	ldr	r3, [pc, #292]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 8006054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006056:	f003 0302 	and.w	r3, r3, #2
 800605a:	2b00      	cmp	r3, #0
 800605c:	d0ee      	beq.n	800603c <HAL_RCC_OscConfig+0x334>
 800605e:	e014      	b.n	800608a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006060:	f7fd f870 	bl	8003144 <HAL_GetTick>
 8006064:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006066:	e00a      	b.n	800607e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006068:	f7fd f86c 	bl	8003144 <HAL_GetTick>
 800606c:	4602      	mov	r2, r0
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	1ad3      	subs	r3, r2, r3
 8006072:	f241 3288 	movw	r2, #5000	; 0x1388
 8006076:	4293      	cmp	r3, r2
 8006078:	d901      	bls.n	800607e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800607a:	2303      	movs	r3, #3
 800607c:	e0b5      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800607e:	4b3e      	ldr	r3, [pc, #248]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 8006080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006082:	f003 0302 	and.w	r3, r3, #2
 8006086:	2b00      	cmp	r3, #0
 8006088:	d1ee      	bne.n	8006068 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800608a:	7dfb      	ldrb	r3, [r7, #23]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d105      	bne.n	800609c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006090:	4b39      	ldr	r3, [pc, #228]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 8006092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006094:	4a38      	ldr	r2, [pc, #224]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 8006096:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800609a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	699b      	ldr	r3, [r3, #24]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	f000 80a1 	beq.w	80061e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80060a6:	4b34      	ldr	r3, [pc, #208]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	f003 030c 	and.w	r3, r3, #12
 80060ae:	2b08      	cmp	r3, #8
 80060b0:	d05c      	beq.n	800616c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	699b      	ldr	r3, [r3, #24]
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	d141      	bne.n	800613e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060ba:	4b31      	ldr	r3, [pc, #196]	; (8006180 <HAL_RCC_OscConfig+0x478>)
 80060bc:	2200      	movs	r2, #0
 80060be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060c0:	f7fd f840 	bl	8003144 <HAL_GetTick>
 80060c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060c6:	e008      	b.n	80060da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060c8:	f7fd f83c 	bl	8003144 <HAL_GetTick>
 80060cc:	4602      	mov	r2, r0
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d901      	bls.n	80060da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80060d6:	2303      	movs	r3, #3
 80060d8:	e087      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060da:	4b27      	ldr	r3, [pc, #156]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1f0      	bne.n	80060c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	69da      	ldr	r2, [r3, #28]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a1b      	ldr	r3, [r3, #32]
 80060ee:	431a      	orrs	r2, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f4:	019b      	lsls	r3, r3, #6
 80060f6:	431a      	orrs	r2, r3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060fc:	085b      	lsrs	r3, r3, #1
 80060fe:	3b01      	subs	r3, #1
 8006100:	041b      	lsls	r3, r3, #16
 8006102:	431a      	orrs	r2, r3
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006108:	061b      	lsls	r3, r3, #24
 800610a:	491b      	ldr	r1, [pc, #108]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 800610c:	4313      	orrs	r3, r2
 800610e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006110:	4b1b      	ldr	r3, [pc, #108]	; (8006180 <HAL_RCC_OscConfig+0x478>)
 8006112:	2201      	movs	r2, #1
 8006114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006116:	f7fd f815 	bl	8003144 <HAL_GetTick>
 800611a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800611c:	e008      	b.n	8006130 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800611e:	f7fd f811 	bl	8003144 <HAL_GetTick>
 8006122:	4602      	mov	r2, r0
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	1ad3      	subs	r3, r2, r3
 8006128:	2b02      	cmp	r3, #2
 800612a:	d901      	bls.n	8006130 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800612c:	2303      	movs	r3, #3
 800612e:	e05c      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006130:	4b11      	ldr	r3, [pc, #68]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006138:	2b00      	cmp	r3, #0
 800613a:	d0f0      	beq.n	800611e <HAL_RCC_OscConfig+0x416>
 800613c:	e054      	b.n	80061e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800613e:	4b10      	ldr	r3, [pc, #64]	; (8006180 <HAL_RCC_OscConfig+0x478>)
 8006140:	2200      	movs	r2, #0
 8006142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006144:	f7fc fffe 	bl	8003144 <HAL_GetTick>
 8006148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800614a:	e008      	b.n	800615e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800614c:	f7fc fffa 	bl	8003144 <HAL_GetTick>
 8006150:	4602      	mov	r2, r0
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	2b02      	cmp	r3, #2
 8006158:	d901      	bls.n	800615e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800615a:	2303      	movs	r3, #3
 800615c:	e045      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800615e:	4b06      	ldr	r3, [pc, #24]	; (8006178 <HAL_RCC_OscConfig+0x470>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006166:	2b00      	cmp	r3, #0
 8006168:	d1f0      	bne.n	800614c <HAL_RCC_OscConfig+0x444>
 800616a:	e03d      	b.n	80061e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	699b      	ldr	r3, [r3, #24]
 8006170:	2b01      	cmp	r3, #1
 8006172:	d107      	bne.n	8006184 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e038      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
 8006178:	40023800 	.word	0x40023800
 800617c:	40007000 	.word	0x40007000
 8006180:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006184:	4b1b      	ldr	r3, [pc, #108]	; (80061f4 <HAL_RCC_OscConfig+0x4ec>)
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	699b      	ldr	r3, [r3, #24]
 800618e:	2b01      	cmp	r3, #1
 8006190:	d028      	beq.n	80061e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800619c:	429a      	cmp	r2, r3
 800619e:	d121      	bne.n	80061e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d11a      	bne.n	80061e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80061b4:	4013      	ands	r3, r2
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80061ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061bc:	4293      	cmp	r3, r2
 80061be:	d111      	bne.n	80061e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ca:	085b      	lsrs	r3, r3, #1
 80061cc:	3b01      	subs	r3, #1
 80061ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d107      	bne.n	80061e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d001      	beq.n	80061e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80061e4:	2301      	movs	r3, #1
 80061e6:	e000      	b.n	80061ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3718      	adds	r7, #24
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	40023800 	.word	0x40023800

080061f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d101      	bne.n	800620c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	e0cc      	b.n	80063a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800620c:	4b68      	ldr	r3, [pc, #416]	; (80063b0 <HAL_RCC_ClockConfig+0x1b8>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 030f 	and.w	r3, r3, #15
 8006214:	683a      	ldr	r2, [r7, #0]
 8006216:	429a      	cmp	r2, r3
 8006218:	d90c      	bls.n	8006234 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800621a:	4b65      	ldr	r3, [pc, #404]	; (80063b0 <HAL_RCC_ClockConfig+0x1b8>)
 800621c:	683a      	ldr	r2, [r7, #0]
 800621e:	b2d2      	uxtb	r2, r2
 8006220:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006222:	4b63      	ldr	r3, [pc, #396]	; (80063b0 <HAL_RCC_ClockConfig+0x1b8>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f003 030f 	and.w	r3, r3, #15
 800622a:	683a      	ldr	r2, [r7, #0]
 800622c:	429a      	cmp	r2, r3
 800622e:	d001      	beq.n	8006234 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e0b8      	b.n	80063a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 0302 	and.w	r3, r3, #2
 800623c:	2b00      	cmp	r3, #0
 800623e:	d020      	beq.n	8006282 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 0304 	and.w	r3, r3, #4
 8006248:	2b00      	cmp	r3, #0
 800624a:	d005      	beq.n	8006258 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800624c:	4b59      	ldr	r3, [pc, #356]	; (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	4a58      	ldr	r2, [pc, #352]	; (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006252:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006256:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f003 0308 	and.w	r3, r3, #8
 8006260:	2b00      	cmp	r3, #0
 8006262:	d005      	beq.n	8006270 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006264:	4b53      	ldr	r3, [pc, #332]	; (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	4a52      	ldr	r2, [pc, #328]	; (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 800626a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800626e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006270:	4b50      	ldr	r3, [pc, #320]	; (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	689b      	ldr	r3, [r3, #8]
 800627c:	494d      	ldr	r1, [pc, #308]	; (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 800627e:	4313      	orrs	r3, r2
 8006280:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 0301 	and.w	r3, r3, #1
 800628a:	2b00      	cmp	r3, #0
 800628c:	d044      	beq.n	8006318 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	2b01      	cmp	r3, #1
 8006294:	d107      	bne.n	80062a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006296:	4b47      	ldr	r3, [pc, #284]	; (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d119      	bne.n	80062d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	e07f      	b.n	80063a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d003      	beq.n	80062b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062b2:	2b03      	cmp	r3, #3
 80062b4:	d107      	bne.n	80062c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062b6:	4b3f      	ldr	r3, [pc, #252]	; (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d109      	bne.n	80062d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	e06f      	b.n	80063a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062c6:	4b3b      	ldr	r3, [pc, #236]	; (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 0302 	and.w	r3, r3, #2
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d101      	bne.n	80062d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e067      	b.n	80063a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062d6:	4b37      	ldr	r3, [pc, #220]	; (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	f023 0203 	bic.w	r2, r3, #3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	4934      	ldr	r1, [pc, #208]	; (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 80062e4:	4313      	orrs	r3, r2
 80062e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80062e8:	f7fc ff2c 	bl	8003144 <HAL_GetTick>
 80062ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062ee:	e00a      	b.n	8006306 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062f0:	f7fc ff28 	bl	8003144 <HAL_GetTick>
 80062f4:	4602      	mov	r2, r0
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	1ad3      	subs	r3, r2, r3
 80062fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80062fe:	4293      	cmp	r3, r2
 8006300:	d901      	bls.n	8006306 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006302:	2303      	movs	r3, #3
 8006304:	e04f      	b.n	80063a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006306:	4b2b      	ldr	r3, [pc, #172]	; (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	f003 020c 	and.w	r2, r3, #12
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	429a      	cmp	r2, r3
 8006316:	d1eb      	bne.n	80062f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006318:	4b25      	ldr	r3, [pc, #148]	; (80063b0 <HAL_RCC_ClockConfig+0x1b8>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 030f 	and.w	r3, r3, #15
 8006320:	683a      	ldr	r2, [r7, #0]
 8006322:	429a      	cmp	r2, r3
 8006324:	d20c      	bcs.n	8006340 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006326:	4b22      	ldr	r3, [pc, #136]	; (80063b0 <HAL_RCC_ClockConfig+0x1b8>)
 8006328:	683a      	ldr	r2, [r7, #0]
 800632a:	b2d2      	uxtb	r2, r2
 800632c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800632e:	4b20      	ldr	r3, [pc, #128]	; (80063b0 <HAL_RCC_ClockConfig+0x1b8>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 030f 	and.w	r3, r3, #15
 8006336:	683a      	ldr	r2, [r7, #0]
 8006338:	429a      	cmp	r2, r3
 800633a:	d001      	beq.n	8006340 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	e032      	b.n	80063a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 0304 	and.w	r3, r3, #4
 8006348:	2b00      	cmp	r3, #0
 800634a:	d008      	beq.n	800635e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800634c:	4b19      	ldr	r3, [pc, #100]	; (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	4916      	ldr	r1, [pc, #88]	; (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 800635a:	4313      	orrs	r3, r2
 800635c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 0308 	and.w	r3, r3, #8
 8006366:	2b00      	cmp	r3, #0
 8006368:	d009      	beq.n	800637e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800636a:	4b12      	ldr	r3, [pc, #72]	; (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	00db      	lsls	r3, r3, #3
 8006378:	490e      	ldr	r1, [pc, #56]	; (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 800637a:	4313      	orrs	r3, r2
 800637c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800637e:	f000 f821 	bl	80063c4 <HAL_RCC_GetSysClockFreq>
 8006382:	4602      	mov	r2, r0
 8006384:	4b0b      	ldr	r3, [pc, #44]	; (80063b4 <HAL_RCC_ClockConfig+0x1bc>)
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	091b      	lsrs	r3, r3, #4
 800638a:	f003 030f 	and.w	r3, r3, #15
 800638e:	490a      	ldr	r1, [pc, #40]	; (80063b8 <HAL_RCC_ClockConfig+0x1c0>)
 8006390:	5ccb      	ldrb	r3, [r1, r3]
 8006392:	fa22 f303 	lsr.w	r3, r2, r3
 8006396:	4a09      	ldr	r2, [pc, #36]	; (80063bc <HAL_RCC_ClockConfig+0x1c4>)
 8006398:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800639a:	4b09      	ldr	r3, [pc, #36]	; (80063c0 <HAL_RCC_ClockConfig+0x1c8>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4618      	mov	r0, r3
 80063a0:	f7fa ff54 	bl	800124c <HAL_InitTick>

  return HAL_OK;
 80063a4:	2300      	movs	r3, #0
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3710      	adds	r7, #16
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	40023c00 	.word	0x40023c00
 80063b4:	40023800 	.word	0x40023800
 80063b8:	0800f904 	.word	0x0800f904
 80063bc:	20000000 	.word	0x20000000
 80063c0:	20000080 	.word	0x20000080

080063c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063c8:	b094      	sub	sp, #80	; 0x50
 80063ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80063cc:	2300      	movs	r3, #0
 80063ce:	647b      	str	r3, [r7, #68]	; 0x44
 80063d0:	2300      	movs	r3, #0
 80063d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063d4:	2300      	movs	r3, #0
 80063d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80063d8:	2300      	movs	r3, #0
 80063da:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80063dc:	4b79      	ldr	r3, [pc, #484]	; (80065c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	f003 030c 	and.w	r3, r3, #12
 80063e4:	2b08      	cmp	r3, #8
 80063e6:	d00d      	beq.n	8006404 <HAL_RCC_GetSysClockFreq+0x40>
 80063e8:	2b08      	cmp	r3, #8
 80063ea:	f200 80e1 	bhi.w	80065b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d002      	beq.n	80063f8 <HAL_RCC_GetSysClockFreq+0x34>
 80063f2:	2b04      	cmp	r3, #4
 80063f4:	d003      	beq.n	80063fe <HAL_RCC_GetSysClockFreq+0x3a>
 80063f6:	e0db      	b.n	80065b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80063f8:	4b73      	ldr	r3, [pc, #460]	; (80065c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80063fa:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80063fc:	e0db      	b.n	80065b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80063fe:	4b73      	ldr	r3, [pc, #460]	; (80065cc <HAL_RCC_GetSysClockFreq+0x208>)
 8006400:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006402:	e0d8      	b.n	80065b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006404:	4b6f      	ldr	r3, [pc, #444]	; (80065c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800640c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800640e:	4b6d      	ldr	r3, [pc, #436]	; (80065c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006416:	2b00      	cmp	r3, #0
 8006418:	d063      	beq.n	80064e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800641a:	4b6a      	ldr	r3, [pc, #424]	; (80065c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	099b      	lsrs	r3, r3, #6
 8006420:	2200      	movs	r2, #0
 8006422:	63bb      	str	r3, [r7, #56]	; 0x38
 8006424:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006428:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800642c:	633b      	str	r3, [r7, #48]	; 0x30
 800642e:	2300      	movs	r3, #0
 8006430:	637b      	str	r3, [r7, #52]	; 0x34
 8006432:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006436:	4622      	mov	r2, r4
 8006438:	462b      	mov	r3, r5
 800643a:	f04f 0000 	mov.w	r0, #0
 800643e:	f04f 0100 	mov.w	r1, #0
 8006442:	0159      	lsls	r1, r3, #5
 8006444:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006448:	0150      	lsls	r0, r2, #5
 800644a:	4602      	mov	r2, r0
 800644c:	460b      	mov	r3, r1
 800644e:	4621      	mov	r1, r4
 8006450:	1a51      	subs	r1, r2, r1
 8006452:	6139      	str	r1, [r7, #16]
 8006454:	4629      	mov	r1, r5
 8006456:	eb63 0301 	sbc.w	r3, r3, r1
 800645a:	617b      	str	r3, [r7, #20]
 800645c:	f04f 0200 	mov.w	r2, #0
 8006460:	f04f 0300 	mov.w	r3, #0
 8006464:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006468:	4659      	mov	r1, fp
 800646a:	018b      	lsls	r3, r1, #6
 800646c:	4651      	mov	r1, sl
 800646e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006472:	4651      	mov	r1, sl
 8006474:	018a      	lsls	r2, r1, #6
 8006476:	4651      	mov	r1, sl
 8006478:	ebb2 0801 	subs.w	r8, r2, r1
 800647c:	4659      	mov	r1, fp
 800647e:	eb63 0901 	sbc.w	r9, r3, r1
 8006482:	f04f 0200 	mov.w	r2, #0
 8006486:	f04f 0300 	mov.w	r3, #0
 800648a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800648e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006492:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006496:	4690      	mov	r8, r2
 8006498:	4699      	mov	r9, r3
 800649a:	4623      	mov	r3, r4
 800649c:	eb18 0303 	adds.w	r3, r8, r3
 80064a0:	60bb      	str	r3, [r7, #8]
 80064a2:	462b      	mov	r3, r5
 80064a4:	eb49 0303 	adc.w	r3, r9, r3
 80064a8:	60fb      	str	r3, [r7, #12]
 80064aa:	f04f 0200 	mov.w	r2, #0
 80064ae:	f04f 0300 	mov.w	r3, #0
 80064b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80064b6:	4629      	mov	r1, r5
 80064b8:	024b      	lsls	r3, r1, #9
 80064ba:	4621      	mov	r1, r4
 80064bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80064c0:	4621      	mov	r1, r4
 80064c2:	024a      	lsls	r2, r1, #9
 80064c4:	4610      	mov	r0, r2
 80064c6:	4619      	mov	r1, r3
 80064c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064ca:	2200      	movs	r2, #0
 80064cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80064ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80064d4:	f7fa fa1a 	bl	800090c <__aeabi_uldivmod>
 80064d8:	4602      	mov	r2, r0
 80064da:	460b      	mov	r3, r1
 80064dc:	4613      	mov	r3, r2
 80064de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064e0:	e058      	b.n	8006594 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064e2:	4b38      	ldr	r3, [pc, #224]	; (80065c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	099b      	lsrs	r3, r3, #6
 80064e8:	2200      	movs	r2, #0
 80064ea:	4618      	mov	r0, r3
 80064ec:	4611      	mov	r1, r2
 80064ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80064f2:	623b      	str	r3, [r7, #32]
 80064f4:	2300      	movs	r3, #0
 80064f6:	627b      	str	r3, [r7, #36]	; 0x24
 80064f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80064fc:	4642      	mov	r2, r8
 80064fe:	464b      	mov	r3, r9
 8006500:	f04f 0000 	mov.w	r0, #0
 8006504:	f04f 0100 	mov.w	r1, #0
 8006508:	0159      	lsls	r1, r3, #5
 800650a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800650e:	0150      	lsls	r0, r2, #5
 8006510:	4602      	mov	r2, r0
 8006512:	460b      	mov	r3, r1
 8006514:	4641      	mov	r1, r8
 8006516:	ebb2 0a01 	subs.w	sl, r2, r1
 800651a:	4649      	mov	r1, r9
 800651c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006520:	f04f 0200 	mov.w	r2, #0
 8006524:	f04f 0300 	mov.w	r3, #0
 8006528:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800652c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006530:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006534:	ebb2 040a 	subs.w	r4, r2, sl
 8006538:	eb63 050b 	sbc.w	r5, r3, fp
 800653c:	f04f 0200 	mov.w	r2, #0
 8006540:	f04f 0300 	mov.w	r3, #0
 8006544:	00eb      	lsls	r3, r5, #3
 8006546:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800654a:	00e2      	lsls	r2, r4, #3
 800654c:	4614      	mov	r4, r2
 800654e:	461d      	mov	r5, r3
 8006550:	4643      	mov	r3, r8
 8006552:	18e3      	adds	r3, r4, r3
 8006554:	603b      	str	r3, [r7, #0]
 8006556:	464b      	mov	r3, r9
 8006558:	eb45 0303 	adc.w	r3, r5, r3
 800655c:	607b      	str	r3, [r7, #4]
 800655e:	f04f 0200 	mov.w	r2, #0
 8006562:	f04f 0300 	mov.w	r3, #0
 8006566:	e9d7 4500 	ldrd	r4, r5, [r7]
 800656a:	4629      	mov	r1, r5
 800656c:	028b      	lsls	r3, r1, #10
 800656e:	4621      	mov	r1, r4
 8006570:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006574:	4621      	mov	r1, r4
 8006576:	028a      	lsls	r2, r1, #10
 8006578:	4610      	mov	r0, r2
 800657a:	4619      	mov	r1, r3
 800657c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800657e:	2200      	movs	r2, #0
 8006580:	61bb      	str	r3, [r7, #24]
 8006582:	61fa      	str	r2, [r7, #28]
 8006584:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006588:	f7fa f9c0 	bl	800090c <__aeabi_uldivmod>
 800658c:	4602      	mov	r2, r0
 800658e:	460b      	mov	r3, r1
 8006590:	4613      	mov	r3, r2
 8006592:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006594:	4b0b      	ldr	r3, [pc, #44]	; (80065c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	0c1b      	lsrs	r3, r3, #16
 800659a:	f003 0303 	and.w	r3, r3, #3
 800659e:	3301      	adds	r3, #1
 80065a0:	005b      	lsls	r3, r3, #1
 80065a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80065a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80065a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80065ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80065ae:	e002      	b.n	80065b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80065b0:	4b05      	ldr	r3, [pc, #20]	; (80065c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80065b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80065b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80065b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3750      	adds	r7, #80	; 0x50
 80065bc:	46bd      	mov	sp, r7
 80065be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065c2:	bf00      	nop
 80065c4:	40023800 	.word	0x40023800
 80065c8:	00f42400 	.word	0x00f42400
 80065cc:	007a1200 	.word	0x007a1200

080065d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065d0:	b480      	push	{r7}
 80065d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065d4:	4b03      	ldr	r3, [pc, #12]	; (80065e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80065d6:	681b      	ldr	r3, [r3, #0]
}
 80065d8:	4618      	mov	r0, r3
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr
 80065e2:	bf00      	nop
 80065e4:	20000000 	.word	0x20000000

080065e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80065ec:	f7ff fff0 	bl	80065d0 <HAL_RCC_GetHCLKFreq>
 80065f0:	4602      	mov	r2, r0
 80065f2:	4b05      	ldr	r3, [pc, #20]	; (8006608 <HAL_RCC_GetPCLK1Freq+0x20>)
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	0a9b      	lsrs	r3, r3, #10
 80065f8:	f003 0307 	and.w	r3, r3, #7
 80065fc:	4903      	ldr	r1, [pc, #12]	; (800660c <HAL_RCC_GetPCLK1Freq+0x24>)
 80065fe:	5ccb      	ldrb	r3, [r1, r3]
 8006600:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006604:	4618      	mov	r0, r3
 8006606:	bd80      	pop	{r7, pc}
 8006608:	40023800 	.word	0x40023800
 800660c:	0800f914 	.word	0x0800f914

08006610 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006610:	b480      	push	{r7}
 8006612:	b083      	sub	sp, #12
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	220f      	movs	r2, #15
 800661e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006620:	4b12      	ldr	r3, [pc, #72]	; (800666c <HAL_RCC_GetClockConfig+0x5c>)
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	f003 0203 	and.w	r2, r3, #3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800662c:	4b0f      	ldr	r3, [pc, #60]	; (800666c <HAL_RCC_GetClockConfig+0x5c>)
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006638:	4b0c      	ldr	r3, [pc, #48]	; (800666c <HAL_RCC_GetClockConfig+0x5c>)
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006644:	4b09      	ldr	r3, [pc, #36]	; (800666c <HAL_RCC_GetClockConfig+0x5c>)
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	08db      	lsrs	r3, r3, #3
 800664a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006652:	4b07      	ldr	r3, [pc, #28]	; (8006670 <HAL_RCC_GetClockConfig+0x60>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f003 020f 	and.w	r2, r3, #15
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	601a      	str	r2, [r3, #0]
}
 800665e:	bf00      	nop
 8006660:	370c      	adds	r7, #12
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr
 800666a:	bf00      	nop
 800666c:	40023800 	.word	0x40023800
 8006670:	40023c00 	.word	0x40023c00

08006674 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b086      	sub	sp, #24
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800667c:	2300      	movs	r3, #0
 800667e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006680:	2300      	movs	r3, #0
 8006682:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 0301 	and.w	r3, r3, #1
 800668c:	2b00      	cmp	r3, #0
 800668e:	d10b      	bne.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006698:	2b00      	cmp	r3, #0
 800669a:	d105      	bne.n	80066a8 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d075      	beq.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80066a8:	4b91      	ldr	r3, [pc, #580]	; (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80066aa:	2200      	movs	r2, #0
 80066ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80066ae:	f7fc fd49 	bl	8003144 <HAL_GetTick>
 80066b2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80066b4:	e008      	b.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80066b6:	f7fc fd45 	bl	8003144 <HAL_GetTick>
 80066ba:	4602      	mov	r2, r0
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	1ad3      	subs	r3, r2, r3
 80066c0:	2b02      	cmp	r3, #2
 80066c2:	d901      	bls.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066c4:	2303      	movs	r3, #3
 80066c6:	e189      	b.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80066c8:	4b8a      	ldr	r3, [pc, #552]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d1f0      	bne.n	80066b6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 0301 	and.w	r3, r3, #1
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d009      	beq.n	80066f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	019a      	lsls	r2, r3, #6
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	071b      	lsls	r3, r3, #28
 80066ec:	4981      	ldr	r1, [pc, #516]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066ee:	4313      	orrs	r3, r2
 80066f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 0302 	and.w	r3, r3, #2
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d01f      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006700:	4b7c      	ldr	r3, [pc, #496]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006702:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006706:	0f1b      	lsrs	r3, r3, #28
 8006708:	f003 0307 	and.w	r3, r3, #7
 800670c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	019a      	lsls	r2, r3, #6
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	061b      	lsls	r3, r3, #24
 800671a:	431a      	orrs	r2, r3
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	071b      	lsls	r3, r3, #28
 8006720:	4974      	ldr	r1, [pc, #464]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006722:	4313      	orrs	r3, r2
 8006724:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006728:	4b72      	ldr	r3, [pc, #456]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800672a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800672e:	f023 021f 	bic.w	r2, r3, #31
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	69db      	ldr	r3, [r3, #28]
 8006736:	3b01      	subs	r3, #1
 8006738:	496e      	ldr	r1, [pc, #440]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800673a:	4313      	orrs	r3, r2
 800673c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006748:	2b00      	cmp	r3, #0
 800674a:	d00d      	beq.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	019a      	lsls	r2, r3, #6
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	061b      	lsls	r3, r3, #24
 8006758:	431a      	orrs	r2, r3
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	071b      	lsls	r3, r3, #28
 8006760:	4964      	ldr	r1, [pc, #400]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006762:	4313      	orrs	r3, r2
 8006764:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006768:	4b61      	ldr	r3, [pc, #388]	; (80068f0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800676a:	2201      	movs	r2, #1
 800676c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800676e:	f7fc fce9 	bl	8003144 <HAL_GetTick>
 8006772:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006774:	e008      	b.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006776:	f7fc fce5 	bl	8003144 <HAL_GetTick>
 800677a:	4602      	mov	r2, r0
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	2b02      	cmp	r3, #2
 8006782:	d901      	bls.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006784:	2303      	movs	r3, #3
 8006786:	e129      	b.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006788:	4b5a      	ldr	r3, [pc, #360]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006790:	2b00      	cmp	r3, #0
 8006792:	d0f0      	beq.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f003 0304 	and.w	r3, r3, #4
 800679c:	2b00      	cmp	r3, #0
 800679e:	d105      	bne.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d079      	beq.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80067ac:	4b52      	ldr	r3, [pc, #328]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80067ae:	2200      	movs	r2, #0
 80067b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80067b2:	f7fc fcc7 	bl	8003144 <HAL_GetTick>
 80067b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80067b8:	e008      	b.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80067ba:	f7fc fcc3 	bl	8003144 <HAL_GetTick>
 80067be:	4602      	mov	r2, r0
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	1ad3      	subs	r3, r2, r3
 80067c4:	2b02      	cmp	r3, #2
 80067c6:	d901      	bls.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80067c8:	2303      	movs	r3, #3
 80067ca:	e107      	b.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80067cc:	4b49      	ldr	r3, [pc, #292]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067d8:	d0ef      	beq.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 0304 	and.w	r3, r3, #4
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d020      	beq.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80067e6:	4b43      	ldr	r3, [pc, #268]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80067e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ec:	0f1b      	lsrs	r3, r3, #28
 80067ee:	f003 0307 	and.w	r3, r3, #7
 80067f2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	691b      	ldr	r3, [r3, #16]
 80067f8:	019a      	lsls	r2, r3, #6
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	695b      	ldr	r3, [r3, #20]
 80067fe:	061b      	lsls	r3, r3, #24
 8006800:	431a      	orrs	r2, r3
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	071b      	lsls	r3, r3, #28
 8006806:	493b      	ldr	r1, [pc, #236]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006808:	4313      	orrs	r3, r2
 800680a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800680e:	4b39      	ldr	r3, [pc, #228]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006810:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006814:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6a1b      	ldr	r3, [r3, #32]
 800681c:	3b01      	subs	r3, #1
 800681e:	021b      	lsls	r3, r3, #8
 8006820:	4934      	ldr	r1, [pc, #208]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006822:	4313      	orrs	r3, r2
 8006824:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f003 0308 	and.w	r3, r3, #8
 8006830:	2b00      	cmp	r3, #0
 8006832:	d01e      	beq.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006834:	4b2f      	ldr	r3, [pc, #188]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800683a:	0e1b      	lsrs	r3, r3, #24
 800683c:	f003 030f 	and.w	r3, r3, #15
 8006840:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	691b      	ldr	r3, [r3, #16]
 8006846:	019a      	lsls	r2, r3, #6
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	061b      	lsls	r3, r3, #24
 800684c:	431a      	orrs	r2, r3
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	699b      	ldr	r3, [r3, #24]
 8006852:	071b      	lsls	r3, r3, #28
 8006854:	4927      	ldr	r1, [pc, #156]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006856:	4313      	orrs	r3, r2
 8006858:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800685c:	4b25      	ldr	r3, [pc, #148]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800685e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006862:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800686a:	4922      	ldr	r1, [pc, #136]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800686c:	4313      	orrs	r3, r2
 800686e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006872:	4b21      	ldr	r3, [pc, #132]	; (80068f8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006874:	2201      	movs	r2, #1
 8006876:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006878:	f7fc fc64 	bl	8003144 <HAL_GetTick>
 800687c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800687e:	e008      	b.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006880:	f7fc fc60 	bl	8003144 <HAL_GetTick>
 8006884:	4602      	mov	r2, r0
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	2b02      	cmp	r3, #2
 800688c:	d901      	bls.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800688e:	2303      	movs	r3, #3
 8006890:	e0a4      	b.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006892:	4b18      	ldr	r3, [pc, #96]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800689a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800689e:	d1ef      	bne.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 0320 	and.w	r3, r3, #32
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	f000 808b 	beq.w	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80068ae:	2300      	movs	r3, #0
 80068b0:	60fb      	str	r3, [r7, #12]
 80068b2:	4b10      	ldr	r3, [pc, #64]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80068b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068b6:	4a0f      	ldr	r2, [pc, #60]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80068b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068bc:	6413      	str	r3, [r2, #64]	; 0x40
 80068be:	4b0d      	ldr	r3, [pc, #52]	; (80068f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80068c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068c6:	60fb      	str	r3, [r7, #12]
 80068c8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80068ca:	4b0c      	ldr	r3, [pc, #48]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a0b      	ldr	r2, [pc, #44]	; (80068fc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80068d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068d4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80068d6:	f7fc fc35 	bl	8003144 <HAL_GetTick>
 80068da:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80068dc:	e010      	b.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80068de:	f7fc fc31 	bl	8003144 <HAL_GetTick>
 80068e2:	4602      	mov	r2, r0
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	1ad3      	subs	r3, r2, r3
 80068e8:	2b02      	cmp	r3, #2
 80068ea:	d909      	bls.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80068ec:	2303      	movs	r3, #3
 80068ee:	e075      	b.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x368>
 80068f0:	42470068 	.word	0x42470068
 80068f4:	40023800 	.word	0x40023800
 80068f8:	42470070 	.word	0x42470070
 80068fc:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006900:	4b38      	ldr	r3, [pc, #224]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006908:	2b00      	cmp	r3, #0
 800690a:	d0e8      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800690c:	4b36      	ldr	r3, [pc, #216]	; (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800690e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006910:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006914:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d02f      	beq.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x308>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006920:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006924:	693a      	ldr	r2, [r7, #16]
 8006926:	429a      	cmp	r2, r3
 8006928:	d028      	beq.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800692a:	4b2f      	ldr	r3, [pc, #188]	; (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800692c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800692e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006932:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006934:	4b2d      	ldr	r3, [pc, #180]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006936:	2201      	movs	r2, #1
 8006938:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800693a:	4b2c      	ldr	r3, [pc, #176]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800693c:	2200      	movs	r2, #0
 800693e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006940:	4a29      	ldr	r2, [pc, #164]	; (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006946:	4b28      	ldr	r3, [pc, #160]	; (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800694a:	f003 0301 	and.w	r3, r3, #1
 800694e:	2b01      	cmp	r3, #1
 8006950:	d114      	bne.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006952:	f7fc fbf7 	bl	8003144 <HAL_GetTick>
 8006956:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006958:	e00a      	b.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800695a:	f7fc fbf3 	bl	8003144 <HAL_GetTick>
 800695e:	4602      	mov	r2, r0
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	1ad3      	subs	r3, r2, r3
 8006964:	f241 3288 	movw	r2, #5000	; 0x1388
 8006968:	4293      	cmp	r3, r2
 800696a:	d901      	bls.n	8006970 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 800696c:	2303      	movs	r3, #3
 800696e:	e035      	b.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006970:	4b1d      	ldr	r3, [pc, #116]	; (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006974:	f003 0302 	and.w	r3, r3, #2
 8006978:	2b00      	cmp	r3, #0
 800697a:	d0ee      	beq.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006980:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006984:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006988:	d10d      	bne.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800698a:	4b17      	ldr	r3, [pc, #92]	; (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006996:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800699a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800699e:	4912      	ldr	r1, [pc, #72]	; (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80069a0:	4313      	orrs	r3, r2
 80069a2:	608b      	str	r3, [r1, #8]
 80069a4:	e005      	b.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80069a6:	4b10      	ldr	r3, [pc, #64]	; (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	4a0f      	ldr	r2, [pc, #60]	; (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80069ac:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80069b0:	6093      	str	r3, [r2, #8]
 80069b2:	4b0d      	ldr	r3, [pc, #52]	; (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80069b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069be:	490a      	ldr	r1, [pc, #40]	; (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80069c0:	4313      	orrs	r3, r2
 80069c2:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f003 0310 	and.w	r3, r3, #16
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d004      	beq.n	80069da <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80069d6:	4b06      	ldr	r3, [pc, #24]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80069d8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80069da:	2300      	movs	r3, #0
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3718      	adds	r7, #24
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}
 80069e4:	40007000 	.word	0x40007000
 80069e8:	40023800 	.word	0x40023800
 80069ec:	42470e40 	.word	0x42470e40
 80069f0:	424711e0 	.word	0x424711e0

080069f4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b082      	sub	sp, #8
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d101      	bne.n	8006a08 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	e025      	b.n	8006a54 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d106      	bne.n	8006a22 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f000 f81d 	bl	8006a5c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2202      	movs	r2, #2
 8006a26:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	3304      	adds	r3, #4
 8006a32:	4619      	mov	r1, r3
 8006a34:	4610      	mov	r0, r2
 8006a36:	f001 fa23 	bl	8007e80 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6818      	ldr	r0, [r3, #0]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	461a      	mov	r2, r3
 8006a44:	6839      	ldr	r1, [r7, #0]
 8006a46:	f001 fa78 	bl	8007f3a <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3708      	adds	r7, #8
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b083      	sub	sp, #12
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8006a64:	bf00      	nop
 8006a66:	370c      	adds	r7, #12
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b086      	sub	sp, #24
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006a82:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8006a84:	7dfb      	ldrb	r3, [r7, #23]
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	d101      	bne.n	8006a8e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8006a8a:	2302      	movs	r3, #2
 8006a8c:	e021      	b.n	8006ad2 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8006a8e:	7dfb      	ldrb	r3, [r7, #23]
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d002      	beq.n	8006a9a <HAL_SDRAM_SendCommand+0x2a>
 8006a94:	7dfb      	ldrb	r3, [r7, #23]
 8006a96:	2b05      	cmp	r3, #5
 8006a98:	d118      	bne.n	8006acc <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2202      	movs	r2, #2
 8006a9e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	68b9      	ldr	r1, [r7, #8]
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f001 faae 	bl	800800c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	d104      	bne.n	8006ac2 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2205      	movs	r2, #5
 8006abc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006ac0:	e006      	b.n	8006ad0 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006aca:	e001      	b.n	8006ad0 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	e000      	b.n	8006ad2 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3718      	adds	r7, #24
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}

08006ada <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b082      	sub	sp, #8
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
 8006ae2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	2b02      	cmp	r3, #2
 8006aee:	d101      	bne.n	8006af4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006af0:	2302      	movs	r3, #2
 8006af2:	e016      	b.n	8006b22 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d10f      	bne.n	8006b20 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2202      	movs	r2, #2
 8006b04:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	6839      	ldr	r1, [r7, #0]
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f001 fab9 	bl	8008086 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	e000      	b.n	8006b22 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3708      	adds	r7, #8
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b082      	sub	sp, #8
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d101      	bne.n	8006b3c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	e07b      	b.n	8006c34 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d108      	bne.n	8006b56 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b4c:	d009      	beq.n	8006b62 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	61da      	str	r2, [r3, #28]
 8006b54:	e005      	b.n	8006b62 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d106      	bne.n	8006b82 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f7fa faf3 	bl	8001168 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2202      	movs	r2, #2
 8006b86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b98:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006baa:	431a      	orrs	r2, r3
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bb4:	431a      	orrs	r2, r3
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	691b      	ldr	r3, [r3, #16]
 8006bba:	f003 0302 	and.w	r3, r3, #2
 8006bbe:	431a      	orrs	r2, r3
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	695b      	ldr	r3, [r3, #20]
 8006bc4:	f003 0301 	and.w	r3, r3, #1
 8006bc8:	431a      	orrs	r2, r3
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	699b      	ldr	r3, [r3, #24]
 8006bce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bd2:	431a      	orrs	r2, r3
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	69db      	ldr	r3, [r3, #28]
 8006bd8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006bdc:	431a      	orrs	r2, r3
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6a1b      	ldr	r3, [r3, #32]
 8006be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006be6:	ea42 0103 	orr.w	r1, r2, r3
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bee:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	430a      	orrs	r2, r1
 8006bf8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	699b      	ldr	r3, [r3, #24]
 8006bfe:	0c1b      	lsrs	r3, r3, #16
 8006c00:	f003 0104 	and.w	r1, r3, #4
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c08:	f003 0210 	and.w	r2, r3, #16
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	430a      	orrs	r2, r1
 8006c12:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	69da      	ldr	r2, [r3, #28]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c22:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006c32:	2300      	movs	r3, #0
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3708      	adds	r7, #8
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d101      	bne.n	8006c4e <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e01a      	b.n	8006c84 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2202      	movs	r2, #2
 8006c52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c64:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f7fa face 	bl	8001208 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006c82:	2300      	movs	r3, #0
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3708      	adds	r7, #8
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b088      	sub	sp, #32
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	603b      	str	r3, [r7, #0]
 8006c98:	4613      	mov	r3, r2
 8006c9a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d101      	bne.n	8006cae <HAL_SPI_Transmit+0x22>
 8006caa:	2302      	movs	r3, #2
 8006cac:	e126      	b.n	8006efc <HAL_SPI_Transmit+0x270>
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006cb6:	f7fc fa45 	bl	8003144 <HAL_GetTick>
 8006cba:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006cbc:	88fb      	ldrh	r3, [r7, #6]
 8006cbe:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006cc6:	b2db      	uxtb	r3, r3
 8006cc8:	2b01      	cmp	r3, #1
 8006cca:	d002      	beq.n	8006cd2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006ccc:	2302      	movs	r3, #2
 8006cce:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006cd0:	e10b      	b.n	8006eea <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d002      	beq.n	8006cde <HAL_SPI_Transmit+0x52>
 8006cd8:	88fb      	ldrh	r3, [r7, #6]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d102      	bne.n	8006ce4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006ce2:	e102      	b.n	8006eea <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2203      	movs	r2, #3
 8006ce8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	68ba      	ldr	r2, [r7, #8]
 8006cf6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	88fa      	ldrh	r2, [r7, #6]
 8006cfc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	88fa      	ldrh	r2, [r7, #6]
 8006d02:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2200      	movs	r2, #0
 8006d08:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2200      	movs	r2, #0
 8006d14:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d2a:	d10f      	bne.n	8006d4c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d3a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d4a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d56:	2b40      	cmp	r3, #64	; 0x40
 8006d58:	d007      	beq.n	8006d6a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d68:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d72:	d14b      	bne.n	8006e0c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d002      	beq.n	8006d82 <HAL_SPI_Transmit+0xf6>
 8006d7c:	8afb      	ldrh	r3, [r7, #22]
 8006d7e:	2b01      	cmp	r3, #1
 8006d80:	d13e      	bne.n	8006e00 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d86:	881a      	ldrh	r2, [r3, #0]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d92:	1c9a      	adds	r2, r3, #2
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	b29a      	uxth	r2, r3
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006da6:	e02b      	b.n	8006e00 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	f003 0302 	and.w	r3, r3, #2
 8006db2:	2b02      	cmp	r3, #2
 8006db4:	d112      	bne.n	8006ddc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dba:	881a      	ldrh	r2, [r3, #0]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dc6:	1c9a      	adds	r2, r3, #2
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dd0:	b29b      	uxth	r3, r3
 8006dd2:	3b01      	subs	r3, #1
 8006dd4:	b29a      	uxth	r2, r3
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	86da      	strh	r2, [r3, #54]	; 0x36
 8006dda:	e011      	b.n	8006e00 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ddc:	f7fc f9b2 	bl	8003144 <HAL_GetTick>
 8006de0:	4602      	mov	r2, r0
 8006de2:	69bb      	ldr	r3, [r7, #24]
 8006de4:	1ad3      	subs	r3, r2, r3
 8006de6:	683a      	ldr	r2, [r7, #0]
 8006de8:	429a      	cmp	r2, r3
 8006dea:	d803      	bhi.n	8006df4 <HAL_SPI_Transmit+0x168>
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006df2:	d102      	bne.n	8006dfa <HAL_SPI_Transmit+0x16e>
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d102      	bne.n	8006e00 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006dfa:	2303      	movs	r3, #3
 8006dfc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006dfe:	e074      	b.n	8006eea <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d1ce      	bne.n	8006da8 <HAL_SPI_Transmit+0x11c>
 8006e0a:	e04c      	b.n	8006ea6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d002      	beq.n	8006e1a <HAL_SPI_Transmit+0x18e>
 8006e14:	8afb      	ldrh	r3, [r7, #22]
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d140      	bne.n	8006e9c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	330c      	adds	r3, #12
 8006e24:	7812      	ldrb	r2, [r2, #0]
 8006e26:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e2c:	1c5a      	adds	r2, r3, #1
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	3b01      	subs	r3, #1
 8006e3a:	b29a      	uxth	r2, r3
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006e40:	e02c      	b.n	8006e9c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	f003 0302 	and.w	r3, r3, #2
 8006e4c:	2b02      	cmp	r3, #2
 8006e4e:	d113      	bne.n	8006e78 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	330c      	adds	r3, #12
 8006e5a:	7812      	ldrb	r2, [r2, #0]
 8006e5c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e62:	1c5a      	adds	r2, r3, #1
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	3b01      	subs	r3, #1
 8006e70:	b29a      	uxth	r2, r3
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	86da      	strh	r2, [r3, #54]	; 0x36
 8006e76:	e011      	b.n	8006e9c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e78:	f7fc f964 	bl	8003144 <HAL_GetTick>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	1ad3      	subs	r3, r2, r3
 8006e82:	683a      	ldr	r2, [r7, #0]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d803      	bhi.n	8006e90 <HAL_SPI_Transmit+0x204>
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e8e:	d102      	bne.n	8006e96 <HAL_SPI_Transmit+0x20a>
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d102      	bne.n	8006e9c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006e96:	2303      	movs	r3, #3
 8006e98:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006e9a:	e026      	b.n	8006eea <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d1cd      	bne.n	8006e42 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ea6:	69ba      	ldr	r2, [r7, #24]
 8006ea8:	6839      	ldr	r1, [r7, #0]
 8006eaa:	68f8      	ldr	r0, [r7, #12]
 8006eac:	f000 fcf8 	bl	80078a0 <SPI_EndRxTxTransaction>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d002      	beq.n	8006ebc <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2220      	movs	r2, #32
 8006eba:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d10a      	bne.n	8006eda <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	613b      	str	r3, [r7, #16]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	613b      	str	r3, [r7, #16]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	613b      	str	r3, [r7, #16]
 8006ed8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d002      	beq.n	8006ee8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	77fb      	strb	r3, [r7, #31]
 8006ee6:	e000      	b.n	8006eea <HAL_SPI_Transmit+0x25e>
  }

error:
 8006ee8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	2201      	movs	r2, #1
 8006eee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006efa:	7ffb      	ldrb	r3, [r7, #31]
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3720      	adds	r7, #32
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b088      	sub	sp, #32
 8006f08:	af02      	add	r7, sp, #8
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	60b9      	str	r1, [r7, #8]
 8006f0e:	603b      	str	r3, [r7, #0]
 8006f10:	4613      	mov	r3, r2
 8006f12:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006f14:	2300      	movs	r3, #0
 8006f16:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f20:	d112      	bne.n	8006f48 <HAL_SPI_Receive+0x44>
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d10e      	bne.n	8006f48 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2204      	movs	r2, #4
 8006f2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006f32:	88fa      	ldrh	r2, [r7, #6]
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	9300      	str	r3, [sp, #0]
 8006f38:	4613      	mov	r3, r2
 8006f3a:	68ba      	ldr	r2, [r7, #8]
 8006f3c:	68b9      	ldr	r1, [r7, #8]
 8006f3e:	68f8      	ldr	r0, [r7, #12]
 8006f40:	f000 f8f1 	bl	8007126 <HAL_SPI_TransmitReceive>
 8006f44:	4603      	mov	r3, r0
 8006f46:	e0ea      	b.n	800711e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d101      	bne.n	8006f56 <HAL_SPI_Receive+0x52>
 8006f52:	2302      	movs	r3, #2
 8006f54:	e0e3      	b.n	800711e <HAL_SPI_Receive+0x21a>
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2201      	movs	r2, #1
 8006f5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f5e:	f7fc f8f1 	bl	8003144 <HAL_GetTick>
 8006f62:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f6a:	b2db      	uxtb	r3, r3
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	d002      	beq.n	8006f76 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006f70:	2302      	movs	r3, #2
 8006f72:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006f74:	e0ca      	b.n	800710c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d002      	beq.n	8006f82 <HAL_SPI_Receive+0x7e>
 8006f7c:	88fb      	ldrh	r3, [r7, #6]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d102      	bne.n	8006f88 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006f86:	e0c1      	b.n	800710c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2204      	movs	r2, #4
 8006f8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2200      	movs	r2, #0
 8006f94:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	68ba      	ldr	r2, [r7, #8]
 8006f9a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	88fa      	ldrh	r2, [r7, #6]
 8006fa0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	88fa      	ldrh	r2, [r7, #6]
 8006fa6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2200      	movs	r2, #0
 8006fac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fce:	d10f      	bne.n	8006ff0 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fde:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006fee:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ffa:	2b40      	cmp	r3, #64	; 0x40
 8006ffc:	d007      	beq.n	800700e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800700c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d162      	bne.n	80070dc <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007016:	e02e      	b.n	8007076 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	f003 0301 	and.w	r3, r3, #1
 8007022:	2b01      	cmp	r3, #1
 8007024:	d115      	bne.n	8007052 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f103 020c 	add.w	r2, r3, #12
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007032:	7812      	ldrb	r2, [r2, #0]
 8007034:	b2d2      	uxtb	r2, r2
 8007036:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800703c:	1c5a      	adds	r2, r3, #1
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007046:	b29b      	uxth	r3, r3
 8007048:	3b01      	subs	r3, #1
 800704a:	b29a      	uxth	r2, r3
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007050:	e011      	b.n	8007076 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007052:	f7fc f877 	bl	8003144 <HAL_GetTick>
 8007056:	4602      	mov	r2, r0
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	1ad3      	subs	r3, r2, r3
 800705c:	683a      	ldr	r2, [r7, #0]
 800705e:	429a      	cmp	r2, r3
 8007060:	d803      	bhi.n	800706a <HAL_SPI_Receive+0x166>
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007068:	d102      	bne.n	8007070 <HAL_SPI_Receive+0x16c>
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d102      	bne.n	8007076 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007070:	2303      	movs	r3, #3
 8007072:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007074:	e04a      	b.n	800710c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800707a:	b29b      	uxth	r3, r3
 800707c:	2b00      	cmp	r3, #0
 800707e:	d1cb      	bne.n	8007018 <HAL_SPI_Receive+0x114>
 8007080:	e031      	b.n	80070e6 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	f003 0301 	and.w	r3, r3, #1
 800708c:	2b01      	cmp	r3, #1
 800708e:	d113      	bne.n	80070b8 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	68da      	ldr	r2, [r3, #12]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800709a:	b292      	uxth	r2, r2
 800709c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a2:	1c9a      	adds	r2, r3, #2
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070ac:	b29b      	uxth	r3, r3
 80070ae:	3b01      	subs	r3, #1
 80070b0:	b29a      	uxth	r2, r3
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80070b6:	e011      	b.n	80070dc <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070b8:	f7fc f844 	bl	8003144 <HAL_GetTick>
 80070bc:	4602      	mov	r2, r0
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	1ad3      	subs	r3, r2, r3
 80070c2:	683a      	ldr	r2, [r7, #0]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d803      	bhi.n	80070d0 <HAL_SPI_Receive+0x1cc>
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ce:	d102      	bne.n	80070d6 <HAL_SPI_Receive+0x1d2>
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d102      	bne.n	80070dc <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80070d6:	2303      	movs	r3, #3
 80070d8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80070da:	e017      	b.n	800710c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d1cd      	bne.n	8007082 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80070e6:	693a      	ldr	r2, [r7, #16]
 80070e8:	6839      	ldr	r1, [r7, #0]
 80070ea:	68f8      	ldr	r0, [r7, #12]
 80070ec:	f000 fb72 	bl	80077d4 <SPI_EndRxTransaction>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d002      	beq.n	80070fc <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2220      	movs	r2, #32
 80070fa:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007100:	2b00      	cmp	r3, #0
 8007102:	d002      	beq.n	800710a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007104:	2301      	movs	r3, #1
 8007106:	75fb      	strb	r3, [r7, #23]
 8007108:	e000      	b.n	800710c <HAL_SPI_Receive+0x208>
  }

error :
 800710a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2201      	movs	r2, #1
 8007110:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2200      	movs	r2, #0
 8007118:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800711c:	7dfb      	ldrb	r3, [r7, #23]
}
 800711e:	4618      	mov	r0, r3
 8007120:	3718      	adds	r7, #24
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}

08007126 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007126:	b580      	push	{r7, lr}
 8007128:	b08c      	sub	sp, #48	; 0x30
 800712a:	af00      	add	r7, sp, #0
 800712c:	60f8      	str	r0, [r7, #12]
 800712e:	60b9      	str	r1, [r7, #8]
 8007130:	607a      	str	r2, [r7, #4]
 8007132:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007134:	2301      	movs	r3, #1
 8007136:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007138:	2300      	movs	r3, #0
 800713a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007144:	2b01      	cmp	r3, #1
 8007146:	d101      	bne.n	800714c <HAL_SPI_TransmitReceive+0x26>
 8007148:	2302      	movs	r3, #2
 800714a:	e18a      	b.n	8007462 <HAL_SPI_TransmitReceive+0x33c>
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007154:	f7fb fff6 	bl	8003144 <HAL_GetTick>
 8007158:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007160:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800716a:	887b      	ldrh	r3, [r7, #2]
 800716c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800716e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007172:	2b01      	cmp	r3, #1
 8007174:	d00f      	beq.n	8007196 <HAL_SPI_TransmitReceive+0x70>
 8007176:	69fb      	ldr	r3, [r7, #28]
 8007178:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800717c:	d107      	bne.n	800718e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d103      	bne.n	800718e <HAL_SPI_TransmitReceive+0x68>
 8007186:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800718a:	2b04      	cmp	r3, #4
 800718c:	d003      	beq.n	8007196 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800718e:	2302      	movs	r3, #2
 8007190:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007194:	e15b      	b.n	800744e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d005      	beq.n	80071a8 <HAL_SPI_TransmitReceive+0x82>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d002      	beq.n	80071a8 <HAL_SPI_TransmitReceive+0x82>
 80071a2:	887b      	ldrh	r3, [r7, #2]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d103      	bne.n	80071b0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80071a8:	2301      	movs	r3, #1
 80071aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80071ae:	e14e      	b.n	800744e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	2b04      	cmp	r3, #4
 80071ba:	d003      	beq.n	80071c4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2205      	movs	r2, #5
 80071c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2200      	movs	r2, #0
 80071c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	887a      	ldrh	r2, [r7, #2]
 80071d4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	887a      	ldrh	r2, [r7, #2]
 80071da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	68ba      	ldr	r2, [r7, #8]
 80071e0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	887a      	ldrh	r2, [r7, #2]
 80071e6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	887a      	ldrh	r2, [r7, #2]
 80071ec:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2200      	movs	r2, #0
 80071f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2200      	movs	r2, #0
 80071f8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007204:	2b40      	cmp	r3, #64	; 0x40
 8007206:	d007      	beq.n	8007218 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007216:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007220:	d178      	bne.n	8007314 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d002      	beq.n	8007230 <HAL_SPI_TransmitReceive+0x10a>
 800722a:	8b7b      	ldrh	r3, [r7, #26]
 800722c:	2b01      	cmp	r3, #1
 800722e:	d166      	bne.n	80072fe <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007234:	881a      	ldrh	r2, [r3, #0]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007240:	1c9a      	adds	r2, r3, #2
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800724a:	b29b      	uxth	r3, r3
 800724c:	3b01      	subs	r3, #1
 800724e:	b29a      	uxth	r2, r3
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007254:	e053      	b.n	80072fe <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	f003 0302 	and.w	r3, r3, #2
 8007260:	2b02      	cmp	r3, #2
 8007262:	d11b      	bne.n	800729c <HAL_SPI_TransmitReceive+0x176>
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007268:	b29b      	uxth	r3, r3
 800726a:	2b00      	cmp	r3, #0
 800726c:	d016      	beq.n	800729c <HAL_SPI_TransmitReceive+0x176>
 800726e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007270:	2b01      	cmp	r3, #1
 8007272:	d113      	bne.n	800729c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007278:	881a      	ldrh	r2, [r3, #0]
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007284:	1c9a      	adds	r2, r3, #2
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800728e:	b29b      	uxth	r3, r3
 8007290:	3b01      	subs	r3, #1
 8007292:	b29a      	uxth	r2, r3
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007298:	2300      	movs	r3, #0
 800729a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	f003 0301 	and.w	r3, r3, #1
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d119      	bne.n	80072de <HAL_SPI_TransmitReceive+0x1b8>
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d014      	beq.n	80072de <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	68da      	ldr	r2, [r3, #12]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072be:	b292      	uxth	r2, r2
 80072c0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c6:	1c9a      	adds	r2, r3, #2
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	3b01      	subs	r3, #1
 80072d4:	b29a      	uxth	r2, r3
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80072da:	2301      	movs	r3, #1
 80072dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80072de:	f7fb ff31 	bl	8003144 <HAL_GetTick>
 80072e2:	4602      	mov	r2, r0
 80072e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e6:	1ad3      	subs	r3, r2, r3
 80072e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d807      	bhi.n	80072fe <HAL_SPI_TransmitReceive+0x1d8>
 80072ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072f4:	d003      	beq.n	80072fe <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80072f6:	2303      	movs	r3, #3
 80072f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80072fc:	e0a7      	b.n	800744e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007302:	b29b      	uxth	r3, r3
 8007304:	2b00      	cmp	r3, #0
 8007306:	d1a6      	bne.n	8007256 <HAL_SPI_TransmitReceive+0x130>
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800730c:	b29b      	uxth	r3, r3
 800730e:	2b00      	cmp	r3, #0
 8007310:	d1a1      	bne.n	8007256 <HAL_SPI_TransmitReceive+0x130>
 8007312:	e07c      	b.n	800740e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d002      	beq.n	8007322 <HAL_SPI_TransmitReceive+0x1fc>
 800731c:	8b7b      	ldrh	r3, [r7, #26]
 800731e:	2b01      	cmp	r3, #1
 8007320:	d16b      	bne.n	80073fa <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	330c      	adds	r3, #12
 800732c:	7812      	ldrb	r2, [r2, #0]
 800732e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007334:	1c5a      	adds	r2, r3, #1
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800733e:	b29b      	uxth	r3, r3
 8007340:	3b01      	subs	r3, #1
 8007342:	b29a      	uxth	r2, r3
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007348:	e057      	b.n	80073fa <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	f003 0302 	and.w	r3, r3, #2
 8007354:	2b02      	cmp	r3, #2
 8007356:	d11c      	bne.n	8007392 <HAL_SPI_TransmitReceive+0x26c>
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800735c:	b29b      	uxth	r3, r3
 800735e:	2b00      	cmp	r3, #0
 8007360:	d017      	beq.n	8007392 <HAL_SPI_TransmitReceive+0x26c>
 8007362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007364:	2b01      	cmp	r3, #1
 8007366:	d114      	bne.n	8007392 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	330c      	adds	r3, #12
 8007372:	7812      	ldrb	r2, [r2, #0]
 8007374:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800737a:	1c5a      	adds	r2, r3, #1
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007384:	b29b      	uxth	r3, r3
 8007386:	3b01      	subs	r3, #1
 8007388:	b29a      	uxth	r2, r3
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800738e:	2300      	movs	r3, #0
 8007390:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	f003 0301 	and.w	r3, r3, #1
 800739c:	2b01      	cmp	r3, #1
 800739e:	d119      	bne.n	80073d4 <HAL_SPI_TransmitReceive+0x2ae>
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d014      	beq.n	80073d4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	68da      	ldr	r2, [r3, #12]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b4:	b2d2      	uxtb	r2, r2
 80073b6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073bc:	1c5a      	adds	r2, r3, #1
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	3b01      	subs	r3, #1
 80073ca:	b29a      	uxth	r2, r3
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80073d0:	2301      	movs	r3, #1
 80073d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80073d4:	f7fb feb6 	bl	8003144 <HAL_GetTick>
 80073d8:	4602      	mov	r2, r0
 80073da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073dc:	1ad3      	subs	r3, r2, r3
 80073de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d803      	bhi.n	80073ec <HAL_SPI_TransmitReceive+0x2c6>
 80073e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073ea:	d102      	bne.n	80073f2 <HAL_SPI_TransmitReceive+0x2cc>
 80073ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d103      	bne.n	80073fa <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80073f2:	2303      	movs	r3, #3
 80073f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80073f8:	e029      	b.n	800744e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073fe:	b29b      	uxth	r3, r3
 8007400:	2b00      	cmp	r3, #0
 8007402:	d1a2      	bne.n	800734a <HAL_SPI_TransmitReceive+0x224>
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007408:	b29b      	uxth	r3, r3
 800740a:	2b00      	cmp	r3, #0
 800740c:	d19d      	bne.n	800734a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800740e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007410:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007412:	68f8      	ldr	r0, [r7, #12]
 8007414:	f000 fa44 	bl	80078a0 <SPI_EndRxTxTransaction>
 8007418:	4603      	mov	r3, r0
 800741a:	2b00      	cmp	r3, #0
 800741c:	d006      	beq.n	800742c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2220      	movs	r2, #32
 8007428:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800742a:	e010      	b.n	800744e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d10b      	bne.n	800744c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007434:	2300      	movs	r3, #0
 8007436:	617b      	str	r3, [r7, #20]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	617b      	str	r3, [r7, #20]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	617b      	str	r3, [r7, #20]
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	e000      	b.n	800744e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800744c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2201      	movs	r2, #1
 8007452:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2200      	movs	r2, #0
 800745a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800745e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007462:	4618      	mov	r0, r3
 8007464:	3730      	adds	r7, #48	; 0x30
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
	...

0800746c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b088      	sub	sp, #32
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007484:	69bb      	ldr	r3, [r7, #24]
 8007486:	099b      	lsrs	r3, r3, #6
 8007488:	f003 0301 	and.w	r3, r3, #1
 800748c:	2b00      	cmp	r3, #0
 800748e:	d10f      	bne.n	80074b0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007490:	69bb      	ldr	r3, [r7, #24]
 8007492:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00a      	beq.n	80074b0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800749a:	69fb      	ldr	r3, [r7, #28]
 800749c:	099b      	lsrs	r3, r3, #6
 800749e:	f003 0301 	and.w	r3, r3, #1
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d004      	beq.n	80074b0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	4798      	blx	r3
    return;
 80074ae:	e0d7      	b.n	8007660 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80074b0:	69bb      	ldr	r3, [r7, #24]
 80074b2:	085b      	lsrs	r3, r3, #1
 80074b4:	f003 0301 	and.w	r3, r3, #1
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d00a      	beq.n	80074d2 <HAL_SPI_IRQHandler+0x66>
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	09db      	lsrs	r3, r3, #7
 80074c0:	f003 0301 	and.w	r3, r3, #1
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d004      	beq.n	80074d2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	4798      	blx	r3
    return;
 80074d0:	e0c6      	b.n	8007660 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80074d2:	69bb      	ldr	r3, [r7, #24]
 80074d4:	095b      	lsrs	r3, r3, #5
 80074d6:	f003 0301 	and.w	r3, r3, #1
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d10c      	bne.n	80074f8 <HAL_SPI_IRQHandler+0x8c>
 80074de:	69bb      	ldr	r3, [r7, #24]
 80074e0:	099b      	lsrs	r3, r3, #6
 80074e2:	f003 0301 	and.w	r3, r3, #1
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d106      	bne.n	80074f8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80074ea:	69bb      	ldr	r3, [r7, #24]
 80074ec:	0a1b      	lsrs	r3, r3, #8
 80074ee:	f003 0301 	and.w	r3, r3, #1
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	f000 80b4 	beq.w	8007660 <HAL_SPI_IRQHandler+0x1f4>
 80074f8:	69fb      	ldr	r3, [r7, #28]
 80074fa:	095b      	lsrs	r3, r3, #5
 80074fc:	f003 0301 	and.w	r3, r3, #1
 8007500:	2b00      	cmp	r3, #0
 8007502:	f000 80ad 	beq.w	8007660 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007506:	69bb      	ldr	r3, [r7, #24]
 8007508:	099b      	lsrs	r3, r3, #6
 800750a:	f003 0301 	and.w	r3, r3, #1
 800750e:	2b00      	cmp	r3, #0
 8007510:	d023      	beq.n	800755a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007518:	b2db      	uxtb	r3, r3
 800751a:	2b03      	cmp	r3, #3
 800751c:	d011      	beq.n	8007542 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007522:	f043 0204 	orr.w	r2, r3, #4
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800752a:	2300      	movs	r3, #0
 800752c:	617b      	str	r3, [r7, #20]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	68db      	ldr	r3, [r3, #12]
 8007534:	617b      	str	r3, [r7, #20]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	617b      	str	r3, [r7, #20]
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	e00b      	b.n	800755a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007542:	2300      	movs	r3, #0
 8007544:	613b      	str	r3, [r7, #16]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	68db      	ldr	r3, [r3, #12]
 800754c:	613b      	str	r3, [r7, #16]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	613b      	str	r3, [r7, #16]
 8007556:	693b      	ldr	r3, [r7, #16]
        return;
 8007558:	e082      	b.n	8007660 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	095b      	lsrs	r3, r3, #5
 800755e:	f003 0301 	and.w	r3, r3, #1
 8007562:	2b00      	cmp	r3, #0
 8007564:	d014      	beq.n	8007590 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800756a:	f043 0201 	orr.w	r2, r3, #1
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007572:	2300      	movs	r3, #0
 8007574:	60fb      	str	r3, [r7, #12]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	60fb      	str	r3, [r7, #12]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800758c:	601a      	str	r2, [r3, #0]
 800758e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007590:	69bb      	ldr	r3, [r7, #24]
 8007592:	0a1b      	lsrs	r3, r3, #8
 8007594:	f003 0301 	and.w	r3, r3, #1
 8007598:	2b00      	cmp	r3, #0
 800759a:	d00c      	beq.n	80075b6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075a0:	f043 0208 	orr.w	r2, r3, #8
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80075a8:	2300      	movs	r3, #0
 80075aa:	60bb      	str	r3, [r7, #8]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	60bb      	str	r3, [r7, #8]
 80075b4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d04f      	beq.n	800765e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	685a      	ldr	r2, [r3, #4]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80075cc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2201      	movs	r2, #1
 80075d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80075d6:	69fb      	ldr	r3, [r7, #28]
 80075d8:	f003 0302 	and.w	r3, r3, #2
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d104      	bne.n	80075ea <HAL_SPI_IRQHandler+0x17e>
 80075e0:	69fb      	ldr	r3, [r7, #28]
 80075e2:	f003 0301 	and.w	r3, r3, #1
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d034      	beq.n	8007654 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	685a      	ldr	r2, [r3, #4]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f022 0203 	bic.w	r2, r2, #3
 80075f8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d011      	beq.n	8007626 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007606:	4a18      	ldr	r2, [pc, #96]	; (8007668 <HAL_SPI_IRQHandler+0x1fc>)
 8007608:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800760e:	4618      	mov	r0, r3
 8007610:	f7fb ffe8 	bl	80035e4 <HAL_DMA_Abort_IT>
 8007614:	4603      	mov	r3, r0
 8007616:	2b00      	cmp	r3, #0
 8007618:	d005      	beq.n	8007626 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800761e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800762a:	2b00      	cmp	r3, #0
 800762c:	d016      	beq.n	800765c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007632:	4a0d      	ldr	r2, [pc, #52]	; (8007668 <HAL_SPI_IRQHandler+0x1fc>)
 8007634:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800763a:	4618      	mov	r0, r3
 800763c:	f7fb ffd2 	bl	80035e4 <HAL_DMA_Abort_IT>
 8007640:	4603      	mov	r3, r0
 8007642:	2b00      	cmp	r3, #0
 8007644:	d00a      	beq.n	800765c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800764a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8007652:	e003      	b.n	800765c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 f809 	bl	800766c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800765a:	e000      	b.n	800765e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800765c:	bf00      	nop
    return;
 800765e:	bf00      	nop
  }
}
 8007660:	3720      	adds	r7, #32
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
 8007666:	bf00      	nop
 8007668:	0800769d 	.word	0x0800769d

0800766c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800766c:	b480      	push	{r7}
 800766e:	b083      	sub	sp, #12
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007674:	bf00      	nop
 8007676:	370c      	adds	r7, #12
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr

08007680 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800768e:	b2db      	uxtb	r3, r3
}
 8007690:	4618      	mov	r0, r3
 8007692:	370c      	adds	r7, #12
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2200      	movs	r2, #0
 80076ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2200      	movs	r2, #0
 80076b4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80076b6:	68f8      	ldr	r0, [r7, #12]
 80076b8:	f7ff ffd8 	bl	800766c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80076bc:	bf00      	nop
 80076be:	3710      	adds	r7, #16
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b088      	sub	sp, #32
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	60b9      	str	r1, [r7, #8]
 80076ce:	603b      	str	r3, [r7, #0]
 80076d0:	4613      	mov	r3, r2
 80076d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80076d4:	f7fb fd36 	bl	8003144 <HAL_GetTick>
 80076d8:	4602      	mov	r2, r0
 80076da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076dc:	1a9b      	subs	r3, r3, r2
 80076de:	683a      	ldr	r2, [r7, #0]
 80076e0:	4413      	add	r3, r2
 80076e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80076e4:	f7fb fd2e 	bl	8003144 <HAL_GetTick>
 80076e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80076ea:	4b39      	ldr	r3, [pc, #228]	; (80077d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	015b      	lsls	r3, r3, #5
 80076f0:	0d1b      	lsrs	r3, r3, #20
 80076f2:	69fa      	ldr	r2, [r7, #28]
 80076f4:	fb02 f303 	mul.w	r3, r2, r3
 80076f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80076fa:	e054      	b.n	80077a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007702:	d050      	beq.n	80077a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007704:	f7fb fd1e 	bl	8003144 <HAL_GetTick>
 8007708:	4602      	mov	r2, r0
 800770a:	69bb      	ldr	r3, [r7, #24]
 800770c:	1ad3      	subs	r3, r2, r3
 800770e:	69fa      	ldr	r2, [r7, #28]
 8007710:	429a      	cmp	r2, r3
 8007712:	d902      	bls.n	800771a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007714:	69fb      	ldr	r3, [r7, #28]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d13d      	bne.n	8007796 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	685a      	ldr	r2, [r3, #4]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007728:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007732:	d111      	bne.n	8007758 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800773c:	d004      	beq.n	8007748 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007746:	d107      	bne.n	8007758 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007756:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800775c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007760:	d10f      	bne.n	8007782 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	681a      	ldr	r2, [r3, #0]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007770:	601a      	str	r2, [r3, #0]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007780:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	2201      	movs	r2, #1
 8007786:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2200      	movs	r2, #0
 800778e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007792:	2303      	movs	r3, #3
 8007794:	e017      	b.n	80077c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d101      	bne.n	80077a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800779c:	2300      	movs	r3, #0
 800779e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	3b01      	subs	r3, #1
 80077a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	689a      	ldr	r2, [r3, #8]
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	4013      	ands	r3, r2
 80077b0:	68ba      	ldr	r2, [r7, #8]
 80077b2:	429a      	cmp	r2, r3
 80077b4:	bf0c      	ite	eq
 80077b6:	2301      	moveq	r3, #1
 80077b8:	2300      	movne	r3, #0
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	461a      	mov	r2, r3
 80077be:	79fb      	ldrb	r3, [r7, #7]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d19b      	bne.n	80076fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80077c4:	2300      	movs	r3, #0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3720      	adds	r7, #32
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
 80077ce:	bf00      	nop
 80077d0:	20000000 	.word	0x20000000

080077d4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b086      	sub	sp, #24
 80077d8:	af02      	add	r7, sp, #8
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	60b9      	str	r1, [r7, #8]
 80077de:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077e8:	d111      	bne.n	800780e <SPI_EndRxTransaction+0x3a>
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077f2:	d004      	beq.n	80077fe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077fc:	d107      	bne.n	800780e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800780c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007816:	d12a      	bne.n	800786e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007820:	d012      	beq.n	8007848 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	9300      	str	r3, [sp, #0]
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	2200      	movs	r2, #0
 800782a:	2180      	movs	r1, #128	; 0x80
 800782c:	68f8      	ldr	r0, [r7, #12]
 800782e:	f7ff ff49 	bl	80076c4 <SPI_WaitFlagStateUntilTimeout>
 8007832:	4603      	mov	r3, r0
 8007834:	2b00      	cmp	r3, #0
 8007836:	d02d      	beq.n	8007894 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800783c:	f043 0220 	orr.w	r2, r3, #32
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007844:	2303      	movs	r3, #3
 8007846:	e026      	b.n	8007896 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	9300      	str	r3, [sp, #0]
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	2200      	movs	r2, #0
 8007850:	2101      	movs	r1, #1
 8007852:	68f8      	ldr	r0, [r7, #12]
 8007854:	f7ff ff36 	bl	80076c4 <SPI_WaitFlagStateUntilTimeout>
 8007858:	4603      	mov	r3, r0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d01a      	beq.n	8007894 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007862:	f043 0220 	orr.w	r2, r3, #32
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800786a:	2303      	movs	r3, #3
 800786c:	e013      	b.n	8007896 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	9300      	str	r3, [sp, #0]
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	2200      	movs	r2, #0
 8007876:	2101      	movs	r1, #1
 8007878:	68f8      	ldr	r0, [r7, #12]
 800787a:	f7ff ff23 	bl	80076c4 <SPI_WaitFlagStateUntilTimeout>
 800787e:	4603      	mov	r3, r0
 8007880:	2b00      	cmp	r3, #0
 8007882:	d007      	beq.n	8007894 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007888:	f043 0220 	orr.w	r2, r3, #32
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007890:	2303      	movs	r3, #3
 8007892:	e000      	b.n	8007896 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007894:	2300      	movs	r3, #0
}
 8007896:	4618      	mov	r0, r3
 8007898:	3710      	adds	r7, #16
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
	...

080078a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b088      	sub	sp, #32
 80078a4:	af02      	add	r7, sp, #8
 80078a6:	60f8      	str	r0, [r7, #12]
 80078a8:	60b9      	str	r1, [r7, #8]
 80078aa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80078ac:	4b1b      	ldr	r3, [pc, #108]	; (800791c <SPI_EndRxTxTransaction+0x7c>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a1b      	ldr	r2, [pc, #108]	; (8007920 <SPI_EndRxTxTransaction+0x80>)
 80078b2:	fba2 2303 	umull	r2, r3, r2, r3
 80078b6:	0d5b      	lsrs	r3, r3, #21
 80078b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80078bc:	fb02 f303 	mul.w	r3, r2, r3
 80078c0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078ca:	d112      	bne.n	80078f2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	9300      	str	r3, [sp, #0]
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	2200      	movs	r2, #0
 80078d4:	2180      	movs	r1, #128	; 0x80
 80078d6:	68f8      	ldr	r0, [r7, #12]
 80078d8:	f7ff fef4 	bl	80076c4 <SPI_WaitFlagStateUntilTimeout>
 80078dc:	4603      	mov	r3, r0
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d016      	beq.n	8007910 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078e6:	f043 0220 	orr.w	r2, r3, #32
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80078ee:	2303      	movs	r3, #3
 80078f0:	e00f      	b.n	8007912 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d00a      	beq.n	800790e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	3b01      	subs	r3, #1
 80078fc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007908:	2b80      	cmp	r3, #128	; 0x80
 800790a:	d0f2      	beq.n	80078f2 <SPI_EndRxTxTransaction+0x52>
 800790c:	e000      	b.n	8007910 <SPI_EndRxTxTransaction+0x70>
        break;
 800790e:	bf00      	nop
  }

  return HAL_OK;
 8007910:	2300      	movs	r3, #0
}
 8007912:	4618      	mov	r0, r3
 8007914:	3718      	adds	r7, #24
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
 800791a:	bf00      	nop
 800791c:	20000000 	.word	0x20000000
 8007920:	165e9f81 	.word	0x165e9f81

08007924 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b082      	sub	sp, #8
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d101      	bne.n	8007936 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007932:	2301      	movs	r3, #1
 8007934:	e041      	b.n	80079ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800793c:	b2db      	uxtb	r3, r3
 800793e:	2b00      	cmp	r3, #0
 8007940:	d106      	bne.n	8007950 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2200      	movs	r2, #0
 8007946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f000 f839 	bl	80079c2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2202      	movs	r2, #2
 8007954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	3304      	adds	r3, #4
 8007960:	4619      	mov	r1, r3
 8007962:	4610      	mov	r0, r2
 8007964:	f000 f9d8 	bl	8007d18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2201      	movs	r2, #1
 800796c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2201      	movs	r2, #1
 800797c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2201      	movs	r2, #1
 8007984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2201      	movs	r2, #1
 800798c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2201      	movs	r2, #1
 8007994:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2201      	movs	r2, #1
 800799c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2201      	movs	r2, #1
 80079a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2201      	movs	r2, #1
 80079b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80079b8:	2300      	movs	r3, #0
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3708      	adds	r7, #8
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}

080079c2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80079c2:	b480      	push	{r7}
 80079c4:	b083      	sub	sp, #12
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80079ca:	bf00      	nop
 80079cc:	370c      	adds	r7, #12
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr
	...

080079d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80079d8:	b480      	push	{r7}
 80079da:	b085      	sub	sp, #20
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d001      	beq.n	80079f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80079ec:	2301      	movs	r3, #1
 80079ee:	e04e      	b.n	8007a8e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2202      	movs	r2, #2
 80079f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	68da      	ldr	r2, [r3, #12]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f042 0201 	orr.w	r2, r2, #1
 8007a06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a23      	ldr	r2, [pc, #140]	; (8007a9c <HAL_TIM_Base_Start_IT+0xc4>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d022      	beq.n	8007a58 <HAL_TIM_Base_Start_IT+0x80>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a1a:	d01d      	beq.n	8007a58 <HAL_TIM_Base_Start_IT+0x80>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a1f      	ldr	r2, [pc, #124]	; (8007aa0 <HAL_TIM_Base_Start_IT+0xc8>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d018      	beq.n	8007a58 <HAL_TIM_Base_Start_IT+0x80>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a1e      	ldr	r2, [pc, #120]	; (8007aa4 <HAL_TIM_Base_Start_IT+0xcc>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d013      	beq.n	8007a58 <HAL_TIM_Base_Start_IT+0x80>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a1c      	ldr	r2, [pc, #112]	; (8007aa8 <HAL_TIM_Base_Start_IT+0xd0>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d00e      	beq.n	8007a58 <HAL_TIM_Base_Start_IT+0x80>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a1b      	ldr	r2, [pc, #108]	; (8007aac <HAL_TIM_Base_Start_IT+0xd4>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d009      	beq.n	8007a58 <HAL_TIM_Base_Start_IT+0x80>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a19      	ldr	r2, [pc, #100]	; (8007ab0 <HAL_TIM_Base_Start_IT+0xd8>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d004      	beq.n	8007a58 <HAL_TIM_Base_Start_IT+0x80>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a18      	ldr	r2, [pc, #96]	; (8007ab4 <HAL_TIM_Base_Start_IT+0xdc>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d111      	bne.n	8007a7c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	f003 0307 	and.w	r3, r3, #7
 8007a62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2b06      	cmp	r3, #6
 8007a68:	d010      	beq.n	8007a8c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	681a      	ldr	r2, [r3, #0]
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f042 0201 	orr.w	r2, r2, #1
 8007a78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a7a:	e007      	b.n	8007a8c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	681a      	ldr	r2, [r3, #0]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f042 0201 	orr.w	r2, r2, #1
 8007a8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a8c:	2300      	movs	r3, #0
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	3714      	adds	r7, #20
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr
 8007a9a:	bf00      	nop
 8007a9c:	40010000 	.word	0x40010000
 8007aa0:	40000400 	.word	0x40000400
 8007aa4:	40000800 	.word	0x40000800
 8007aa8:	40000c00 	.word	0x40000c00
 8007aac:	40010400 	.word	0x40010400
 8007ab0:	40014000 	.word	0x40014000
 8007ab4:	40001800 	.word	0x40001800

08007ab8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	691b      	ldr	r3, [r3, #16]
 8007ac6:	f003 0302 	and.w	r3, r3, #2
 8007aca:	2b02      	cmp	r3, #2
 8007acc:	d122      	bne.n	8007b14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	f003 0302 	and.w	r3, r3, #2
 8007ad8:	2b02      	cmp	r3, #2
 8007ada:	d11b      	bne.n	8007b14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f06f 0202 	mvn.w	r2, #2
 8007ae4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2201      	movs	r2, #1
 8007aea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	699b      	ldr	r3, [r3, #24]
 8007af2:	f003 0303 	and.w	r3, r3, #3
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d003      	beq.n	8007b02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 f8ee 	bl	8007cdc <HAL_TIM_IC_CaptureCallback>
 8007b00:	e005      	b.n	8007b0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 f8e0 	bl	8007cc8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f000 f8f1 	bl	8007cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	f003 0304 	and.w	r3, r3, #4
 8007b1e:	2b04      	cmp	r3, #4
 8007b20:	d122      	bne.n	8007b68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	f003 0304 	and.w	r3, r3, #4
 8007b2c:	2b04      	cmp	r3, #4
 8007b2e:	d11b      	bne.n	8007b68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f06f 0204 	mvn.w	r2, #4
 8007b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2202      	movs	r2, #2
 8007b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	699b      	ldr	r3, [r3, #24]
 8007b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d003      	beq.n	8007b56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 f8c4 	bl	8007cdc <HAL_TIM_IC_CaptureCallback>
 8007b54:	e005      	b.n	8007b62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f000 f8b6 	bl	8007cc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 f8c7 	bl	8007cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	691b      	ldr	r3, [r3, #16]
 8007b6e:	f003 0308 	and.w	r3, r3, #8
 8007b72:	2b08      	cmp	r3, #8
 8007b74:	d122      	bne.n	8007bbc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	68db      	ldr	r3, [r3, #12]
 8007b7c:	f003 0308 	and.w	r3, r3, #8
 8007b80:	2b08      	cmp	r3, #8
 8007b82:	d11b      	bne.n	8007bbc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f06f 0208 	mvn.w	r2, #8
 8007b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2204      	movs	r2, #4
 8007b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	69db      	ldr	r3, [r3, #28]
 8007b9a:	f003 0303 	and.w	r3, r3, #3
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d003      	beq.n	8007baa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 f89a 	bl	8007cdc <HAL_TIM_IC_CaptureCallback>
 8007ba8:	e005      	b.n	8007bb6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 f88c 	bl	8007cc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 f89d 	bl	8007cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	691b      	ldr	r3, [r3, #16]
 8007bc2:	f003 0310 	and.w	r3, r3, #16
 8007bc6:	2b10      	cmp	r3, #16
 8007bc8:	d122      	bne.n	8007c10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	68db      	ldr	r3, [r3, #12]
 8007bd0:	f003 0310 	and.w	r3, r3, #16
 8007bd4:	2b10      	cmp	r3, #16
 8007bd6:	d11b      	bne.n	8007c10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f06f 0210 	mvn.w	r2, #16
 8007be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2208      	movs	r2, #8
 8007be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	69db      	ldr	r3, [r3, #28]
 8007bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d003      	beq.n	8007bfe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 f870 	bl	8007cdc <HAL_TIM_IC_CaptureCallback>
 8007bfc:	e005      	b.n	8007c0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 f862 	bl	8007cc8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 f873 	bl	8007cf0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	691b      	ldr	r3, [r3, #16]
 8007c16:	f003 0301 	and.w	r3, r3, #1
 8007c1a:	2b01      	cmp	r3, #1
 8007c1c:	d10e      	bne.n	8007c3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	68db      	ldr	r3, [r3, #12]
 8007c24:	f003 0301 	and.w	r3, r3, #1
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d107      	bne.n	8007c3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f06f 0201 	mvn.w	r2, #1
 8007c34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f7f9 fa4a 	bl	80010d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	691b      	ldr	r3, [r3, #16]
 8007c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c46:	2b80      	cmp	r3, #128	; 0x80
 8007c48:	d10e      	bne.n	8007c68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	68db      	ldr	r3, [r3, #12]
 8007c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c54:	2b80      	cmp	r3, #128	; 0x80
 8007c56:	d107      	bne.n	8007c68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 f902 	bl	8007e6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	691b      	ldr	r3, [r3, #16]
 8007c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c72:	2b40      	cmp	r3, #64	; 0x40
 8007c74:	d10e      	bne.n	8007c94 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	68db      	ldr	r3, [r3, #12]
 8007c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c80:	2b40      	cmp	r3, #64	; 0x40
 8007c82:	d107      	bne.n	8007c94 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 f838 	bl	8007d04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	691b      	ldr	r3, [r3, #16]
 8007c9a:	f003 0320 	and.w	r3, r3, #32
 8007c9e:	2b20      	cmp	r3, #32
 8007ca0:	d10e      	bne.n	8007cc0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	68db      	ldr	r3, [r3, #12]
 8007ca8:	f003 0320 	and.w	r3, r3, #32
 8007cac:	2b20      	cmp	r3, #32
 8007cae:	d107      	bne.n	8007cc0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f06f 0220 	mvn.w	r2, #32
 8007cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 f8cc 	bl	8007e58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007cc0:	bf00      	nop
 8007cc2:	3708      	adds	r7, #8
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}

08007cc8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b083      	sub	sp, #12
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007cd0:	bf00      	nop
 8007cd2:	370c      	adds	r7, #12
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr

08007cdc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b083      	sub	sp, #12
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007ce4:	bf00      	nop
 8007ce6:	370c      	adds	r7, #12
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr

08007cf0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b083      	sub	sp, #12
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007cf8:	bf00      	nop
 8007cfa:	370c      	adds	r7, #12
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr

08007d04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b083      	sub	sp, #12
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d0c:	bf00      	nop
 8007d0e:	370c      	adds	r7, #12
 8007d10:	46bd      	mov	sp, r7
 8007d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d16:	4770      	bx	lr

08007d18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b085      	sub	sp, #20
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	4a40      	ldr	r2, [pc, #256]	; (8007e2c <TIM_Base_SetConfig+0x114>)
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d013      	beq.n	8007d58 <TIM_Base_SetConfig+0x40>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d36:	d00f      	beq.n	8007d58 <TIM_Base_SetConfig+0x40>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	4a3d      	ldr	r2, [pc, #244]	; (8007e30 <TIM_Base_SetConfig+0x118>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d00b      	beq.n	8007d58 <TIM_Base_SetConfig+0x40>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	4a3c      	ldr	r2, [pc, #240]	; (8007e34 <TIM_Base_SetConfig+0x11c>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d007      	beq.n	8007d58 <TIM_Base_SetConfig+0x40>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	4a3b      	ldr	r2, [pc, #236]	; (8007e38 <TIM_Base_SetConfig+0x120>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d003      	beq.n	8007d58 <TIM_Base_SetConfig+0x40>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	4a3a      	ldr	r2, [pc, #232]	; (8007e3c <TIM_Base_SetConfig+0x124>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d108      	bne.n	8007d6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	68fa      	ldr	r2, [r7, #12]
 8007d66:	4313      	orrs	r3, r2
 8007d68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	4a2f      	ldr	r2, [pc, #188]	; (8007e2c <TIM_Base_SetConfig+0x114>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d02b      	beq.n	8007dca <TIM_Base_SetConfig+0xb2>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d78:	d027      	beq.n	8007dca <TIM_Base_SetConfig+0xb2>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	4a2c      	ldr	r2, [pc, #176]	; (8007e30 <TIM_Base_SetConfig+0x118>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d023      	beq.n	8007dca <TIM_Base_SetConfig+0xb2>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	4a2b      	ldr	r2, [pc, #172]	; (8007e34 <TIM_Base_SetConfig+0x11c>)
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d01f      	beq.n	8007dca <TIM_Base_SetConfig+0xb2>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4a2a      	ldr	r2, [pc, #168]	; (8007e38 <TIM_Base_SetConfig+0x120>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d01b      	beq.n	8007dca <TIM_Base_SetConfig+0xb2>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	4a29      	ldr	r2, [pc, #164]	; (8007e3c <TIM_Base_SetConfig+0x124>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d017      	beq.n	8007dca <TIM_Base_SetConfig+0xb2>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4a28      	ldr	r2, [pc, #160]	; (8007e40 <TIM_Base_SetConfig+0x128>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d013      	beq.n	8007dca <TIM_Base_SetConfig+0xb2>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	4a27      	ldr	r2, [pc, #156]	; (8007e44 <TIM_Base_SetConfig+0x12c>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d00f      	beq.n	8007dca <TIM_Base_SetConfig+0xb2>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	4a26      	ldr	r2, [pc, #152]	; (8007e48 <TIM_Base_SetConfig+0x130>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d00b      	beq.n	8007dca <TIM_Base_SetConfig+0xb2>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4a25      	ldr	r2, [pc, #148]	; (8007e4c <TIM_Base_SetConfig+0x134>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d007      	beq.n	8007dca <TIM_Base_SetConfig+0xb2>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	4a24      	ldr	r2, [pc, #144]	; (8007e50 <TIM_Base_SetConfig+0x138>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d003      	beq.n	8007dca <TIM_Base_SetConfig+0xb2>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4a23      	ldr	r2, [pc, #140]	; (8007e54 <TIM_Base_SetConfig+0x13c>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d108      	bne.n	8007ddc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007dd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	68db      	ldr	r3, [r3, #12]
 8007dd6:	68fa      	ldr	r2, [r7, #12]
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	695b      	ldr	r3, [r3, #20]
 8007de6:	4313      	orrs	r3, r2
 8007de8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	68fa      	ldr	r2, [r7, #12]
 8007dee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	689a      	ldr	r2, [r3, #8]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	4a0a      	ldr	r2, [pc, #40]	; (8007e2c <TIM_Base_SetConfig+0x114>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d003      	beq.n	8007e10 <TIM_Base_SetConfig+0xf8>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	4a0c      	ldr	r2, [pc, #48]	; (8007e3c <TIM_Base_SetConfig+0x124>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d103      	bne.n	8007e18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	691a      	ldr	r2, [r3, #16]
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	615a      	str	r2, [r3, #20]
}
 8007e1e:	bf00      	nop
 8007e20:	3714      	adds	r7, #20
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr
 8007e2a:	bf00      	nop
 8007e2c:	40010000 	.word	0x40010000
 8007e30:	40000400 	.word	0x40000400
 8007e34:	40000800 	.word	0x40000800
 8007e38:	40000c00 	.word	0x40000c00
 8007e3c:	40010400 	.word	0x40010400
 8007e40:	40014000 	.word	0x40014000
 8007e44:	40014400 	.word	0x40014400
 8007e48:	40014800 	.word	0x40014800
 8007e4c:	40001800 	.word	0x40001800
 8007e50:	40001c00 	.word	0x40001c00
 8007e54:	40002000 	.word	0x40002000

08007e58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b083      	sub	sp, #12
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e60:	bf00      	nop
 8007e62:	370c      	adds	r7, #12
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr

08007e6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b083      	sub	sp, #12
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e74:	bf00      	nop
 8007e76:	370c      	adds	r7, #12
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr

08007e80 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b083      	sub	sp, #12
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d123      	bne.n	8007eda <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007e9a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007e9e:	683a      	ldr	r2, [r7, #0]
 8007ea0:	6851      	ldr	r1, [r2, #4]
 8007ea2:	683a      	ldr	r2, [r7, #0]
 8007ea4:	6892      	ldr	r2, [r2, #8]
 8007ea6:	4311      	orrs	r1, r2
 8007ea8:	683a      	ldr	r2, [r7, #0]
 8007eaa:	68d2      	ldr	r2, [r2, #12]
 8007eac:	4311      	orrs	r1, r2
 8007eae:	683a      	ldr	r2, [r7, #0]
 8007eb0:	6912      	ldr	r2, [r2, #16]
 8007eb2:	4311      	orrs	r1, r2
 8007eb4:	683a      	ldr	r2, [r7, #0]
 8007eb6:	6952      	ldr	r2, [r2, #20]
 8007eb8:	4311      	orrs	r1, r2
 8007eba:	683a      	ldr	r2, [r7, #0]
 8007ebc:	6992      	ldr	r2, [r2, #24]
 8007ebe:	4311      	orrs	r1, r2
 8007ec0:	683a      	ldr	r2, [r7, #0]
 8007ec2:	69d2      	ldr	r2, [r2, #28]
 8007ec4:	4311      	orrs	r1, r2
 8007ec6:	683a      	ldr	r2, [r7, #0]
 8007ec8:	6a12      	ldr	r2, [r2, #32]
 8007eca:	4311      	orrs	r1, r2
 8007ecc:	683a      	ldr	r2, [r7, #0]
 8007ece:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007ed0:	430a      	orrs	r2, r1
 8007ed2:	431a      	orrs	r2, r3
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	601a      	str	r2, [r3, #0]
 8007ed8:	e028      	b.n	8007f2c <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	69d9      	ldr	r1, [r3, #28]
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	6a1b      	ldr	r3, [r3, #32]
 8007eea:	4319      	orrs	r1, r3
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef0:	430b      	orrs	r3, r1
 8007ef2:	431a      	orrs	r2, r3
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8007f00:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007f04:	683a      	ldr	r2, [r7, #0]
 8007f06:	6851      	ldr	r1, [r2, #4]
 8007f08:	683a      	ldr	r2, [r7, #0]
 8007f0a:	6892      	ldr	r2, [r2, #8]
 8007f0c:	4311      	orrs	r1, r2
 8007f0e:	683a      	ldr	r2, [r7, #0]
 8007f10:	68d2      	ldr	r2, [r2, #12]
 8007f12:	4311      	orrs	r1, r2
 8007f14:	683a      	ldr	r2, [r7, #0]
 8007f16:	6912      	ldr	r2, [r2, #16]
 8007f18:	4311      	orrs	r1, r2
 8007f1a:	683a      	ldr	r2, [r7, #0]
 8007f1c:	6952      	ldr	r2, [r2, #20]
 8007f1e:	4311      	orrs	r1, r2
 8007f20:	683a      	ldr	r2, [r7, #0]
 8007f22:	6992      	ldr	r2, [r2, #24]
 8007f24:	430a      	orrs	r2, r1
 8007f26:	431a      	orrs	r2, r3
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8007f2c:	2300      	movs	r3, #0
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	370c      	adds	r7, #12
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr

08007f3a <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007f3a:	b480      	push	{r7}
 8007f3c:	b085      	sub	sp, #20
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	60f8      	str	r0, [r7, #12]
 8007f42:	60b9      	str	r1, [r7, #8]
 8007f44:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d128      	bne.n	8007f9e <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	1e59      	subs	r1, r3, #1
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	3b01      	subs	r3, #1
 8007f60:	011b      	lsls	r3, r3, #4
 8007f62:	4319      	orrs	r1, r3
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	689b      	ldr	r3, [r3, #8]
 8007f68:	3b01      	subs	r3, #1
 8007f6a:	021b      	lsls	r3, r3, #8
 8007f6c:	4319      	orrs	r1, r3
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	68db      	ldr	r3, [r3, #12]
 8007f72:	3b01      	subs	r3, #1
 8007f74:	031b      	lsls	r3, r3, #12
 8007f76:	4319      	orrs	r1, r3
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	691b      	ldr	r3, [r3, #16]
 8007f7c:	3b01      	subs	r3, #1
 8007f7e:	041b      	lsls	r3, r3, #16
 8007f80:	4319      	orrs	r1, r3
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	695b      	ldr	r3, [r3, #20]
 8007f86:	3b01      	subs	r3, #1
 8007f88:	051b      	lsls	r3, r3, #20
 8007f8a:	4319      	orrs	r1, r3
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	699b      	ldr	r3, [r3, #24]
 8007f90:	3b01      	subs	r3, #1
 8007f92:	061b      	lsls	r3, r3, #24
 8007f94:	430b      	orrs	r3, r1
 8007f96:	431a      	orrs	r2, r3
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	609a      	str	r2, [r3, #8]
 8007f9c:	e02f      	b.n	8007ffe <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007fa6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007faa:	68ba      	ldr	r2, [r7, #8]
 8007fac:	68d2      	ldr	r2, [r2, #12]
 8007fae:	3a01      	subs	r2, #1
 8007fb0:	0311      	lsls	r1, r2, #12
 8007fb2:	68ba      	ldr	r2, [r7, #8]
 8007fb4:	6952      	ldr	r2, [r2, #20]
 8007fb6:	3a01      	subs	r2, #1
 8007fb8:	0512      	lsls	r2, r2, #20
 8007fba:	430a      	orrs	r2, r1
 8007fbc:	431a      	orrs	r2, r3
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	68db      	ldr	r3, [r3, #12]
 8007fc6:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	1e59      	subs	r1, r3, #1
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	3b01      	subs	r3, #1
 8007fd6:	011b      	lsls	r3, r3, #4
 8007fd8:	4319      	orrs	r1, r3
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	3b01      	subs	r3, #1
 8007fe0:	021b      	lsls	r3, r3, #8
 8007fe2:	4319      	orrs	r1, r3
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	691b      	ldr	r3, [r3, #16]
 8007fe8:	3b01      	subs	r3, #1
 8007fea:	041b      	lsls	r3, r3, #16
 8007fec:	4319      	orrs	r1, r3
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	699b      	ldr	r3, [r3, #24]
 8007ff2:	3b01      	subs	r3, #1
 8007ff4:	061b      	lsls	r3, r3, #24
 8007ff6:	430b      	orrs	r3, r1
 8007ff8:	431a      	orrs	r2, r3
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8007ffe:	2300      	movs	r3, #0
}
 8008000:	4618      	mov	r0, r3
 8008002:	3714      	adds	r7, #20
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr

0800800c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b086      	sub	sp, #24
 8008010:	af00      	add	r7, sp, #0
 8008012:	60f8      	str	r0, [r7, #12]
 8008014:	60b9      	str	r1, [r7, #8]
 8008016:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8008018:	2300      	movs	r3, #0
 800801a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	691b      	ldr	r3, [r3, #16]
 8008020:	0d9b      	lsrs	r3, r3, #22
 8008022:	059b      	lsls	r3, r3, #22
 8008024:	68ba      	ldr	r2, [r7, #8]
 8008026:	6811      	ldr	r1, [r2, #0]
 8008028:	68ba      	ldr	r2, [r7, #8]
 800802a:	6852      	ldr	r2, [r2, #4]
 800802c:	4311      	orrs	r1, r2
 800802e:	68ba      	ldr	r2, [r7, #8]
 8008030:	6892      	ldr	r2, [r2, #8]
 8008032:	3a01      	subs	r2, #1
 8008034:	0152      	lsls	r2, r2, #5
 8008036:	4311      	orrs	r1, r2
 8008038:	68ba      	ldr	r2, [r7, #8]
 800803a:	68d2      	ldr	r2, [r2, #12]
 800803c:	0252      	lsls	r2, r2, #9
 800803e:	430a      	orrs	r2, r1
 8008040:	431a      	orrs	r2, r3
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8008046:	f7fb f87d 	bl	8003144 <HAL_GetTick>
 800804a:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800804c:	e010      	b.n	8008070 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008054:	d00c      	beq.n	8008070 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d007      	beq.n	800806c <FMC_SDRAM_SendCommand+0x60>
 800805c:	f7fb f872 	bl	8003144 <HAL_GetTick>
 8008060:	4602      	mov	r2, r0
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	1ad3      	subs	r3, r2, r3
 8008066:	687a      	ldr	r2, [r7, #4]
 8008068:	429a      	cmp	r2, r3
 800806a:	d201      	bcs.n	8008070 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 800806c:	2303      	movs	r3, #3
 800806e:	e006      	b.n	800807e <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	699b      	ldr	r3, [r3, #24]
 8008074:	f003 0320 	and.w	r3, r3, #32
 8008078:	2b20      	cmp	r3, #32
 800807a:	d0e8      	beq.n	800804e <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 800807c:	2300      	movs	r3, #0
}
 800807e:	4618      	mov	r0, r3
 8008080:	3718      	adds	r7, #24
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}

08008086 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008086:	b480      	push	{r7}
 8008088:	b083      	sub	sp, #12
 800808a:	af00      	add	r7, sp, #0
 800808c:	6078      	str	r0, [r7, #4]
 800808e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	695b      	ldr	r3, [r3, #20]
 8008094:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008098:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 800809c:	683a      	ldr	r2, [r7, #0]
 800809e:	0052      	lsls	r2, r2, #1
 80080a0:	431a      	orrs	r2, r3
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80080a6:	2300      	movs	r3, #0
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	370c      	adds	r7, #12
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr

080080b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80080b4:	b084      	sub	sp, #16
 80080b6:	b580      	push	{r7, lr}
 80080b8:	b084      	sub	sp, #16
 80080ba:	af00      	add	r7, sp, #0
 80080bc:	6078      	str	r0, [r7, #4]
 80080be:	f107 001c 	add.w	r0, r7, #28
 80080c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80080c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	d122      	bne.n	8008112 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	68db      	ldr	r3, [r3, #12]
 80080dc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80080e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080e4:	687a      	ldr	r2, [r7, #4]
 80080e6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	68db      	ldr	r3, [r3, #12]
 80080ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80080f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080f6:	2b01      	cmp	r3, #1
 80080f8:	d105      	bne.n	8008106 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	68db      	ldr	r3, [r3, #12]
 80080fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f001 fbee 	bl	80098e8 <USB_CoreReset>
 800810c:	4603      	mov	r3, r0
 800810e:	73fb      	strb	r3, [r7, #15]
 8008110:	e01a      	b.n	8008148 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	68db      	ldr	r3, [r3, #12]
 8008116:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f001 fbe2 	bl	80098e8 <USB_CoreReset>
 8008124:	4603      	mov	r3, r0
 8008126:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008128:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800812a:	2b00      	cmp	r3, #0
 800812c:	d106      	bne.n	800813c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008132:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	639a      	str	r2, [r3, #56]	; 0x38
 800813a:	e005      	b.n	8008148 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008140:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800814a:	2b01      	cmp	r3, #1
 800814c:	d10b      	bne.n	8008166 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	f043 0206 	orr.w	r2, r3, #6
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	689b      	ldr	r3, [r3, #8]
 800815e:	f043 0220 	orr.w	r2, r3, #32
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008166:	7bfb      	ldrb	r3, [r7, #15]
}
 8008168:	4618      	mov	r0, r3
 800816a:	3710      	adds	r7, #16
 800816c:	46bd      	mov	sp, r7
 800816e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008172:	b004      	add	sp, #16
 8008174:	4770      	bx	lr
	...

08008178 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008178:	b480      	push	{r7}
 800817a:	b087      	sub	sp, #28
 800817c:	af00      	add	r7, sp, #0
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	60b9      	str	r1, [r7, #8]
 8008182:	4613      	mov	r3, r2
 8008184:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008186:	79fb      	ldrb	r3, [r7, #7]
 8008188:	2b02      	cmp	r3, #2
 800818a:	d165      	bne.n	8008258 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	4a41      	ldr	r2, [pc, #260]	; (8008294 <USB_SetTurnaroundTime+0x11c>)
 8008190:	4293      	cmp	r3, r2
 8008192:	d906      	bls.n	80081a2 <USB_SetTurnaroundTime+0x2a>
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	4a40      	ldr	r2, [pc, #256]	; (8008298 <USB_SetTurnaroundTime+0x120>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d202      	bcs.n	80081a2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800819c:	230f      	movs	r3, #15
 800819e:	617b      	str	r3, [r7, #20]
 80081a0:	e062      	b.n	8008268 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	4a3c      	ldr	r2, [pc, #240]	; (8008298 <USB_SetTurnaroundTime+0x120>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d306      	bcc.n	80081b8 <USB_SetTurnaroundTime+0x40>
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	4a3b      	ldr	r2, [pc, #236]	; (800829c <USB_SetTurnaroundTime+0x124>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d202      	bcs.n	80081b8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80081b2:	230e      	movs	r3, #14
 80081b4:	617b      	str	r3, [r7, #20]
 80081b6:	e057      	b.n	8008268 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	4a38      	ldr	r2, [pc, #224]	; (800829c <USB_SetTurnaroundTime+0x124>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d306      	bcc.n	80081ce <USB_SetTurnaroundTime+0x56>
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	4a37      	ldr	r2, [pc, #220]	; (80082a0 <USB_SetTurnaroundTime+0x128>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d202      	bcs.n	80081ce <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80081c8:	230d      	movs	r3, #13
 80081ca:	617b      	str	r3, [r7, #20]
 80081cc:	e04c      	b.n	8008268 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	4a33      	ldr	r2, [pc, #204]	; (80082a0 <USB_SetTurnaroundTime+0x128>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d306      	bcc.n	80081e4 <USB_SetTurnaroundTime+0x6c>
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	4a32      	ldr	r2, [pc, #200]	; (80082a4 <USB_SetTurnaroundTime+0x12c>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d802      	bhi.n	80081e4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80081de:	230c      	movs	r3, #12
 80081e0:	617b      	str	r3, [r7, #20]
 80081e2:	e041      	b.n	8008268 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	4a2f      	ldr	r2, [pc, #188]	; (80082a4 <USB_SetTurnaroundTime+0x12c>)
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d906      	bls.n	80081fa <USB_SetTurnaroundTime+0x82>
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	4a2e      	ldr	r2, [pc, #184]	; (80082a8 <USB_SetTurnaroundTime+0x130>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d802      	bhi.n	80081fa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80081f4:	230b      	movs	r3, #11
 80081f6:	617b      	str	r3, [r7, #20]
 80081f8:	e036      	b.n	8008268 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	4a2a      	ldr	r2, [pc, #168]	; (80082a8 <USB_SetTurnaroundTime+0x130>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d906      	bls.n	8008210 <USB_SetTurnaroundTime+0x98>
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	4a29      	ldr	r2, [pc, #164]	; (80082ac <USB_SetTurnaroundTime+0x134>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d802      	bhi.n	8008210 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800820a:	230a      	movs	r3, #10
 800820c:	617b      	str	r3, [r7, #20]
 800820e:	e02b      	b.n	8008268 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008210:	68bb      	ldr	r3, [r7, #8]
 8008212:	4a26      	ldr	r2, [pc, #152]	; (80082ac <USB_SetTurnaroundTime+0x134>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d906      	bls.n	8008226 <USB_SetTurnaroundTime+0xae>
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	4a25      	ldr	r2, [pc, #148]	; (80082b0 <USB_SetTurnaroundTime+0x138>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d202      	bcs.n	8008226 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008220:	2309      	movs	r3, #9
 8008222:	617b      	str	r3, [r7, #20]
 8008224:	e020      	b.n	8008268 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	4a21      	ldr	r2, [pc, #132]	; (80082b0 <USB_SetTurnaroundTime+0x138>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d306      	bcc.n	800823c <USB_SetTurnaroundTime+0xc4>
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	4a20      	ldr	r2, [pc, #128]	; (80082b4 <USB_SetTurnaroundTime+0x13c>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d802      	bhi.n	800823c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008236:	2308      	movs	r3, #8
 8008238:	617b      	str	r3, [r7, #20]
 800823a:	e015      	b.n	8008268 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	4a1d      	ldr	r2, [pc, #116]	; (80082b4 <USB_SetTurnaroundTime+0x13c>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d906      	bls.n	8008252 <USB_SetTurnaroundTime+0xda>
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	4a1c      	ldr	r2, [pc, #112]	; (80082b8 <USB_SetTurnaroundTime+0x140>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d202      	bcs.n	8008252 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800824c:	2307      	movs	r3, #7
 800824e:	617b      	str	r3, [r7, #20]
 8008250:	e00a      	b.n	8008268 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008252:	2306      	movs	r3, #6
 8008254:	617b      	str	r3, [r7, #20]
 8008256:	e007      	b.n	8008268 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008258:	79fb      	ldrb	r3, [r7, #7]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d102      	bne.n	8008264 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800825e:	2309      	movs	r3, #9
 8008260:	617b      	str	r3, [r7, #20]
 8008262:	e001      	b.n	8008268 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008264:	2309      	movs	r3, #9
 8008266:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	68db      	ldr	r3, [r3, #12]
 800826c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	68da      	ldr	r2, [r3, #12]
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	029b      	lsls	r3, r3, #10
 800827c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008280:	431a      	orrs	r2, r3
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008286:	2300      	movs	r3, #0
}
 8008288:	4618      	mov	r0, r3
 800828a:	371c      	adds	r7, #28
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr
 8008294:	00d8acbf 	.word	0x00d8acbf
 8008298:	00e4e1c0 	.word	0x00e4e1c0
 800829c:	00f42400 	.word	0x00f42400
 80082a0:	01067380 	.word	0x01067380
 80082a4:	011a499f 	.word	0x011a499f
 80082a8:	01312cff 	.word	0x01312cff
 80082ac:	014ca43f 	.word	0x014ca43f
 80082b0:	016e3600 	.word	0x016e3600
 80082b4:	01a6ab1f 	.word	0x01a6ab1f
 80082b8:	01e84800 	.word	0x01e84800

080082bc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80082bc:	b480      	push	{r7}
 80082be:	b083      	sub	sp, #12
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	f043 0201 	orr.w	r2, r3, #1
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80082d0:	2300      	movs	r3, #0
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	370c      	adds	r7, #12
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr

080082de <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80082de:	b480      	push	{r7}
 80082e0:	b083      	sub	sp, #12
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	f023 0201 	bic.w	r2, r3, #1
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80082f2:	2300      	movs	r3, #0
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	370c      	adds	r7, #12
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr

08008300 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b084      	sub	sp, #16
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
 8008308:	460b      	mov	r3, r1
 800830a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800830c:	2300      	movs	r3, #0
 800830e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	68db      	ldr	r3, [r3, #12]
 8008314:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800831c:	78fb      	ldrb	r3, [r7, #3]
 800831e:	2b01      	cmp	r3, #1
 8008320:	d115      	bne.n	800834e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	68db      	ldr	r3, [r3, #12]
 8008326:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800832e:	2001      	movs	r0, #1
 8008330:	f7fa ff14 	bl	800315c <HAL_Delay>
      ms++;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	3301      	adds	r3, #1
 8008338:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f001 fa45 	bl	80097ca <USB_GetMode>
 8008340:	4603      	mov	r3, r0
 8008342:	2b01      	cmp	r3, #1
 8008344:	d01e      	beq.n	8008384 <USB_SetCurrentMode+0x84>
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2b31      	cmp	r3, #49	; 0x31
 800834a:	d9f0      	bls.n	800832e <USB_SetCurrentMode+0x2e>
 800834c:	e01a      	b.n	8008384 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800834e:	78fb      	ldrb	r3, [r7, #3]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d115      	bne.n	8008380 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	68db      	ldr	r3, [r3, #12]
 8008358:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008360:	2001      	movs	r0, #1
 8008362:	f7fa fefb 	bl	800315c <HAL_Delay>
      ms++;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	3301      	adds	r3, #1
 800836a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f001 fa2c 	bl	80097ca <USB_GetMode>
 8008372:	4603      	mov	r3, r0
 8008374:	2b00      	cmp	r3, #0
 8008376:	d005      	beq.n	8008384 <USB_SetCurrentMode+0x84>
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2b31      	cmp	r3, #49	; 0x31
 800837c:	d9f0      	bls.n	8008360 <USB_SetCurrentMode+0x60>
 800837e:	e001      	b.n	8008384 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008380:	2301      	movs	r3, #1
 8008382:	e005      	b.n	8008390 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2b32      	cmp	r3, #50	; 0x32
 8008388:	d101      	bne.n	800838e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800838a:	2301      	movs	r3, #1
 800838c:	e000      	b.n	8008390 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800838e:	2300      	movs	r3, #0
}
 8008390:	4618      	mov	r0, r3
 8008392:	3710      	adds	r7, #16
 8008394:	46bd      	mov	sp, r7
 8008396:	bd80      	pop	{r7, pc}

08008398 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008398:	b084      	sub	sp, #16
 800839a:	b580      	push	{r7, lr}
 800839c:	b086      	sub	sp, #24
 800839e:	af00      	add	r7, sp, #0
 80083a0:	6078      	str	r0, [r7, #4]
 80083a2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80083a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80083aa:	2300      	movs	r3, #0
 80083ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80083b2:	2300      	movs	r3, #0
 80083b4:	613b      	str	r3, [r7, #16]
 80083b6:	e009      	b.n	80083cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80083b8:	687a      	ldr	r2, [r7, #4]
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	3340      	adds	r3, #64	; 0x40
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	4413      	add	r3, r2
 80083c2:	2200      	movs	r2, #0
 80083c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	3301      	adds	r3, #1
 80083ca:	613b      	str	r3, [r7, #16]
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	2b0e      	cmp	r3, #14
 80083d0:	d9f2      	bls.n	80083b8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80083d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d11c      	bne.n	8008412 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	68fa      	ldr	r2, [r7, #12]
 80083e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083e6:	f043 0302 	orr.w	r3, r3, #2
 80083ea:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083f0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083fc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008408:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	639a      	str	r2, [r3, #56]	; 0x38
 8008410:	e00b      	b.n	800842a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008416:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008422:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008430:	461a      	mov	r2, r3
 8008432:	2300      	movs	r3, #0
 8008434:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800843c:	4619      	mov	r1, r3
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008444:	461a      	mov	r2, r3
 8008446:	680b      	ldr	r3, [r1, #0]
 8008448:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800844a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800844c:	2b01      	cmp	r3, #1
 800844e:	d10c      	bne.n	800846a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008452:	2b00      	cmp	r3, #0
 8008454:	d104      	bne.n	8008460 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008456:	2100      	movs	r1, #0
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 f965 	bl	8008728 <USB_SetDevSpeed>
 800845e:	e008      	b.n	8008472 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008460:	2101      	movs	r1, #1
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f000 f960 	bl	8008728 <USB_SetDevSpeed>
 8008468:	e003      	b.n	8008472 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800846a:	2103      	movs	r1, #3
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f000 f95b 	bl	8008728 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008472:	2110      	movs	r1, #16
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f000 f8f3 	bl	8008660 <USB_FlushTxFifo>
 800847a:	4603      	mov	r3, r0
 800847c:	2b00      	cmp	r3, #0
 800847e:	d001      	beq.n	8008484 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008480:	2301      	movs	r3, #1
 8008482:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f000 f91f 	bl	80086c8 <USB_FlushRxFifo>
 800848a:	4603      	mov	r3, r0
 800848c:	2b00      	cmp	r3, #0
 800848e:	d001      	beq.n	8008494 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008490:	2301      	movs	r3, #1
 8008492:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800849a:	461a      	mov	r2, r3
 800849c:	2300      	movs	r3, #0
 800849e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084a6:	461a      	mov	r2, r3
 80084a8:	2300      	movs	r3, #0
 80084aa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084b2:	461a      	mov	r2, r3
 80084b4:	2300      	movs	r3, #0
 80084b6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084b8:	2300      	movs	r3, #0
 80084ba:	613b      	str	r3, [r7, #16]
 80084bc:	e043      	b.n	8008546 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	015a      	lsls	r2, r3, #5
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	4413      	add	r3, r2
 80084c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80084d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80084d4:	d118      	bne.n	8008508 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d10a      	bne.n	80084f2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	015a      	lsls	r2, r3, #5
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	4413      	add	r3, r2
 80084e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084e8:	461a      	mov	r2, r3
 80084ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80084ee:	6013      	str	r3, [r2, #0]
 80084f0:	e013      	b.n	800851a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	015a      	lsls	r2, r3, #5
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	4413      	add	r3, r2
 80084fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084fe:	461a      	mov	r2, r3
 8008500:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008504:	6013      	str	r3, [r2, #0]
 8008506:	e008      	b.n	800851a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	015a      	lsls	r2, r3, #5
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	4413      	add	r3, r2
 8008510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008514:	461a      	mov	r2, r3
 8008516:	2300      	movs	r3, #0
 8008518:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	015a      	lsls	r2, r3, #5
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	4413      	add	r3, r2
 8008522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008526:	461a      	mov	r2, r3
 8008528:	2300      	movs	r3, #0
 800852a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	015a      	lsls	r2, r3, #5
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	4413      	add	r3, r2
 8008534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008538:	461a      	mov	r2, r3
 800853a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800853e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	3301      	adds	r3, #1
 8008544:	613b      	str	r3, [r7, #16]
 8008546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008548:	693a      	ldr	r2, [r7, #16]
 800854a:	429a      	cmp	r2, r3
 800854c:	d3b7      	bcc.n	80084be <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800854e:	2300      	movs	r3, #0
 8008550:	613b      	str	r3, [r7, #16]
 8008552:	e043      	b.n	80085dc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	015a      	lsls	r2, r3, #5
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	4413      	add	r3, r2
 800855c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008566:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800856a:	d118      	bne.n	800859e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d10a      	bne.n	8008588 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	015a      	lsls	r2, r3, #5
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	4413      	add	r3, r2
 800857a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800857e:	461a      	mov	r2, r3
 8008580:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008584:	6013      	str	r3, [r2, #0]
 8008586:	e013      	b.n	80085b0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	015a      	lsls	r2, r3, #5
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	4413      	add	r3, r2
 8008590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008594:	461a      	mov	r2, r3
 8008596:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800859a:	6013      	str	r3, [r2, #0]
 800859c:	e008      	b.n	80085b0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	015a      	lsls	r2, r3, #5
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	4413      	add	r3, r2
 80085a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085aa:	461a      	mov	r2, r3
 80085ac:	2300      	movs	r3, #0
 80085ae:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	015a      	lsls	r2, r3, #5
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	4413      	add	r3, r2
 80085b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085bc:	461a      	mov	r2, r3
 80085be:	2300      	movs	r3, #0
 80085c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	015a      	lsls	r2, r3, #5
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	4413      	add	r3, r2
 80085ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085ce:	461a      	mov	r2, r3
 80085d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80085d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	3301      	adds	r3, #1
 80085da:	613b      	str	r3, [r7, #16]
 80085dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085de:	693a      	ldr	r2, [r7, #16]
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d3b7      	bcc.n	8008554 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085ea:	691b      	ldr	r3, [r3, #16]
 80085ec:	68fa      	ldr	r2, [r7, #12]
 80085ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085f6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2200      	movs	r2, #0
 80085fc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008604:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008608:	2b00      	cmp	r3, #0
 800860a:	d105      	bne.n	8008618 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	699b      	ldr	r3, [r3, #24]
 8008610:	f043 0210 	orr.w	r2, r3, #16
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	699a      	ldr	r2, [r3, #24]
 800861c:	4b0f      	ldr	r3, [pc, #60]	; (800865c <USB_DevInit+0x2c4>)
 800861e:	4313      	orrs	r3, r2
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008626:	2b00      	cmp	r3, #0
 8008628:	d005      	beq.n	8008636 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	699b      	ldr	r3, [r3, #24]
 800862e:	f043 0208 	orr.w	r2, r3, #8
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008636:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008638:	2b01      	cmp	r3, #1
 800863a:	d107      	bne.n	800864c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	699b      	ldr	r3, [r3, #24]
 8008640:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008644:	f043 0304 	orr.w	r3, r3, #4
 8008648:	687a      	ldr	r2, [r7, #4]
 800864a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800864c:	7dfb      	ldrb	r3, [r7, #23]
}
 800864e:	4618      	mov	r0, r3
 8008650:	3718      	adds	r7, #24
 8008652:	46bd      	mov	sp, r7
 8008654:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008658:	b004      	add	sp, #16
 800865a:	4770      	bx	lr
 800865c:	803c3800 	.word	0x803c3800

08008660 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008660:	b480      	push	{r7}
 8008662:	b085      	sub	sp, #20
 8008664:	af00      	add	r7, sp, #0
 8008666:	6078      	str	r0, [r7, #4]
 8008668:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800866a:	2300      	movs	r3, #0
 800866c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	3301      	adds	r3, #1
 8008672:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	4a13      	ldr	r2, [pc, #76]	; (80086c4 <USB_FlushTxFifo+0x64>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d901      	bls.n	8008680 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800867c:	2303      	movs	r3, #3
 800867e:	e01b      	b.n	80086b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	691b      	ldr	r3, [r3, #16]
 8008684:	2b00      	cmp	r3, #0
 8008686:	daf2      	bge.n	800866e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008688:	2300      	movs	r3, #0
 800868a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	019b      	lsls	r3, r3, #6
 8008690:	f043 0220 	orr.w	r2, r3, #32
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	3301      	adds	r3, #1
 800869c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	4a08      	ldr	r2, [pc, #32]	; (80086c4 <USB_FlushTxFifo+0x64>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d901      	bls.n	80086aa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80086a6:	2303      	movs	r3, #3
 80086a8:	e006      	b.n	80086b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	691b      	ldr	r3, [r3, #16]
 80086ae:	f003 0320 	and.w	r3, r3, #32
 80086b2:	2b20      	cmp	r3, #32
 80086b4:	d0f0      	beq.n	8008698 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80086b6:	2300      	movs	r3, #0
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3714      	adds	r7, #20
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr
 80086c4:	00030d40 	.word	0x00030d40

080086c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b085      	sub	sp, #20
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80086d0:	2300      	movs	r3, #0
 80086d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	3301      	adds	r3, #1
 80086d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	4a11      	ldr	r2, [pc, #68]	; (8008724 <USB_FlushRxFifo+0x5c>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d901      	bls.n	80086e6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80086e2:	2303      	movs	r3, #3
 80086e4:	e018      	b.n	8008718 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	691b      	ldr	r3, [r3, #16]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	daf2      	bge.n	80086d4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80086ee:	2300      	movs	r3, #0
 80086f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2210      	movs	r2, #16
 80086f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	3301      	adds	r3, #1
 80086fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	4a08      	ldr	r2, [pc, #32]	; (8008724 <USB_FlushRxFifo+0x5c>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d901      	bls.n	800870a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008706:	2303      	movs	r3, #3
 8008708:	e006      	b.n	8008718 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	691b      	ldr	r3, [r3, #16]
 800870e:	f003 0310 	and.w	r3, r3, #16
 8008712:	2b10      	cmp	r3, #16
 8008714:	d0f0      	beq.n	80086f8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008716:	2300      	movs	r3, #0
}
 8008718:	4618      	mov	r0, r3
 800871a:	3714      	adds	r7, #20
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr
 8008724:	00030d40 	.word	0x00030d40

08008728 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008728:	b480      	push	{r7}
 800872a:	b085      	sub	sp, #20
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	460b      	mov	r3, r1
 8008732:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800873e:	681a      	ldr	r2, [r3, #0]
 8008740:	78fb      	ldrb	r3, [r7, #3]
 8008742:	68f9      	ldr	r1, [r7, #12]
 8008744:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008748:	4313      	orrs	r3, r2
 800874a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800874c:	2300      	movs	r3, #0
}
 800874e:	4618      	mov	r0, r3
 8008750:	3714      	adds	r7, #20
 8008752:	46bd      	mov	sp, r7
 8008754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008758:	4770      	bx	lr

0800875a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800875a:	b480      	push	{r7}
 800875c:	b087      	sub	sp, #28
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800876c:	689b      	ldr	r3, [r3, #8]
 800876e:	f003 0306 	and.w	r3, r3, #6
 8008772:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d102      	bne.n	8008780 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800877a:	2300      	movs	r3, #0
 800877c:	75fb      	strb	r3, [r7, #23]
 800877e:	e00a      	b.n	8008796 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2b02      	cmp	r3, #2
 8008784:	d002      	beq.n	800878c <USB_GetDevSpeed+0x32>
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2b06      	cmp	r3, #6
 800878a:	d102      	bne.n	8008792 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800878c:	2302      	movs	r3, #2
 800878e:	75fb      	strb	r3, [r7, #23]
 8008790:	e001      	b.n	8008796 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008792:	230f      	movs	r3, #15
 8008794:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008796:	7dfb      	ldrb	r3, [r7, #23]
}
 8008798:	4618      	mov	r0, r3
 800879a:	371c      	adds	r7, #28
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr

080087a4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b085      	sub	sp, #20
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	781b      	ldrb	r3, [r3, #0]
 80087b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	785b      	ldrb	r3, [r3, #1]
 80087bc:	2b01      	cmp	r3, #1
 80087be:	d13a      	bne.n	8008836 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087c6:	69da      	ldr	r2, [r3, #28]
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	781b      	ldrb	r3, [r3, #0]
 80087cc:	f003 030f 	and.w	r3, r3, #15
 80087d0:	2101      	movs	r1, #1
 80087d2:	fa01 f303 	lsl.w	r3, r1, r3
 80087d6:	b29b      	uxth	r3, r3
 80087d8:	68f9      	ldr	r1, [r7, #12]
 80087da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80087de:	4313      	orrs	r3, r2
 80087e0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	015a      	lsls	r2, r3, #5
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	4413      	add	r3, r2
 80087ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d155      	bne.n	80088a4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	015a      	lsls	r2, r3, #5
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	4413      	add	r3, r2
 8008800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008804:	681a      	ldr	r2, [r3, #0]
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	68db      	ldr	r3, [r3, #12]
 800880a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	791b      	ldrb	r3, [r3, #4]
 8008812:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008814:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	059b      	lsls	r3, r3, #22
 800881a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800881c:	4313      	orrs	r3, r2
 800881e:	68ba      	ldr	r2, [r7, #8]
 8008820:	0151      	lsls	r1, r2, #5
 8008822:	68fa      	ldr	r2, [r7, #12]
 8008824:	440a      	add	r2, r1
 8008826:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800882a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800882e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008832:	6013      	str	r3, [r2, #0]
 8008834:	e036      	b.n	80088a4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800883c:	69da      	ldr	r2, [r3, #28]
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	781b      	ldrb	r3, [r3, #0]
 8008842:	f003 030f 	and.w	r3, r3, #15
 8008846:	2101      	movs	r1, #1
 8008848:	fa01 f303 	lsl.w	r3, r1, r3
 800884c:	041b      	lsls	r3, r3, #16
 800884e:	68f9      	ldr	r1, [r7, #12]
 8008850:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008854:	4313      	orrs	r3, r2
 8008856:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	015a      	lsls	r2, r3, #5
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	4413      	add	r3, r2
 8008860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800886a:	2b00      	cmp	r3, #0
 800886c:	d11a      	bne.n	80088a4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	015a      	lsls	r2, r3, #5
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	4413      	add	r3, r2
 8008876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800887a:	681a      	ldr	r2, [r3, #0]
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	68db      	ldr	r3, [r3, #12]
 8008880:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	791b      	ldrb	r3, [r3, #4]
 8008888:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800888a:	430b      	orrs	r3, r1
 800888c:	4313      	orrs	r3, r2
 800888e:	68ba      	ldr	r2, [r7, #8]
 8008890:	0151      	lsls	r1, r2, #5
 8008892:	68fa      	ldr	r2, [r7, #12]
 8008894:	440a      	add	r2, r1
 8008896:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800889a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800889e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088a2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80088a4:	2300      	movs	r3, #0
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3714      	adds	r7, #20
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr
	...

080088b4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b085      	sub	sp, #20
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	781b      	ldrb	r3, [r3, #0]
 80088c6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	785b      	ldrb	r3, [r3, #1]
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d161      	bne.n	8008994 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	015a      	lsls	r2, r3, #5
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	4413      	add	r3, r2
 80088d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088e6:	d11f      	bne.n	8008928 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	015a      	lsls	r2, r3, #5
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	4413      	add	r3, r2
 80088f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	68ba      	ldr	r2, [r7, #8]
 80088f8:	0151      	lsls	r1, r2, #5
 80088fa:	68fa      	ldr	r2, [r7, #12]
 80088fc:	440a      	add	r2, r1
 80088fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008902:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008906:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	015a      	lsls	r2, r3, #5
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	4413      	add	r3, r2
 8008910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	68ba      	ldr	r2, [r7, #8]
 8008918:	0151      	lsls	r1, r2, #5
 800891a:	68fa      	ldr	r2, [r7, #12]
 800891c:	440a      	add	r2, r1
 800891e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008922:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008926:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800892e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	f003 030f 	and.w	r3, r3, #15
 8008938:	2101      	movs	r1, #1
 800893a:	fa01 f303 	lsl.w	r3, r1, r3
 800893e:	b29b      	uxth	r3, r3
 8008940:	43db      	mvns	r3, r3
 8008942:	68f9      	ldr	r1, [r7, #12]
 8008944:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008948:	4013      	ands	r3, r2
 800894a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008952:	69da      	ldr	r2, [r3, #28]
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	781b      	ldrb	r3, [r3, #0]
 8008958:	f003 030f 	and.w	r3, r3, #15
 800895c:	2101      	movs	r1, #1
 800895e:	fa01 f303 	lsl.w	r3, r1, r3
 8008962:	b29b      	uxth	r3, r3
 8008964:	43db      	mvns	r3, r3
 8008966:	68f9      	ldr	r1, [r7, #12]
 8008968:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800896c:	4013      	ands	r3, r2
 800896e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	015a      	lsls	r2, r3, #5
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	4413      	add	r3, r2
 8008978:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	0159      	lsls	r1, r3, #5
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	440b      	add	r3, r1
 8008986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800898a:	4619      	mov	r1, r3
 800898c:	4b35      	ldr	r3, [pc, #212]	; (8008a64 <USB_DeactivateEndpoint+0x1b0>)
 800898e:	4013      	ands	r3, r2
 8008990:	600b      	str	r3, [r1, #0]
 8008992:	e060      	b.n	8008a56 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	015a      	lsls	r2, r3, #5
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	4413      	add	r3, r2
 800899c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80089a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80089aa:	d11f      	bne.n	80089ec <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	015a      	lsls	r2, r3, #5
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	4413      	add	r3, r2
 80089b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	68ba      	ldr	r2, [r7, #8]
 80089bc:	0151      	lsls	r1, r2, #5
 80089be:	68fa      	ldr	r2, [r7, #12]
 80089c0:	440a      	add	r2, r1
 80089c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80089ca:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	015a      	lsls	r2, r3, #5
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	4413      	add	r3, r2
 80089d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	68ba      	ldr	r2, [r7, #8]
 80089dc:	0151      	lsls	r1, r2, #5
 80089de:	68fa      	ldr	r2, [r7, #12]
 80089e0:	440a      	add	r2, r1
 80089e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	781b      	ldrb	r3, [r3, #0]
 80089f8:	f003 030f 	and.w	r3, r3, #15
 80089fc:	2101      	movs	r1, #1
 80089fe:	fa01 f303 	lsl.w	r3, r1, r3
 8008a02:	041b      	lsls	r3, r3, #16
 8008a04:	43db      	mvns	r3, r3
 8008a06:	68f9      	ldr	r1, [r7, #12]
 8008a08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a0c:	4013      	ands	r3, r2
 8008a0e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a16:	69da      	ldr	r2, [r3, #28]
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	781b      	ldrb	r3, [r3, #0]
 8008a1c:	f003 030f 	and.w	r3, r3, #15
 8008a20:	2101      	movs	r1, #1
 8008a22:	fa01 f303 	lsl.w	r3, r1, r3
 8008a26:	041b      	lsls	r3, r3, #16
 8008a28:	43db      	mvns	r3, r3
 8008a2a:	68f9      	ldr	r1, [r7, #12]
 8008a2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a30:	4013      	ands	r3, r2
 8008a32:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	015a      	lsls	r2, r3, #5
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	4413      	add	r3, r2
 8008a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a40:	681a      	ldr	r2, [r3, #0]
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	0159      	lsls	r1, r3, #5
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	440b      	add	r3, r1
 8008a4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a4e:	4619      	mov	r1, r3
 8008a50:	4b05      	ldr	r3, [pc, #20]	; (8008a68 <USB_DeactivateEndpoint+0x1b4>)
 8008a52:	4013      	ands	r3, r2
 8008a54:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008a56:	2300      	movs	r3, #0
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3714      	adds	r7, #20
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr
 8008a64:	ec337800 	.word	0xec337800
 8008a68:	eff37800 	.word	0xeff37800

08008a6c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b08a      	sub	sp, #40	; 0x28
 8008a70:	af02      	add	r7, sp, #8
 8008a72:	60f8      	str	r0, [r7, #12]
 8008a74:	60b9      	str	r1, [r7, #8]
 8008a76:	4613      	mov	r3, r2
 8008a78:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	781b      	ldrb	r3, [r3, #0]
 8008a82:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	785b      	ldrb	r3, [r3, #1]
 8008a88:	2b01      	cmp	r3, #1
 8008a8a:	f040 815c 	bne.w	8008d46 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	699b      	ldr	r3, [r3, #24]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d132      	bne.n	8008afc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008a96:	69bb      	ldr	r3, [r7, #24]
 8008a98:	015a      	lsls	r2, r3, #5
 8008a9a:	69fb      	ldr	r3, [r7, #28]
 8008a9c:	4413      	add	r3, r2
 8008a9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aa2:	691b      	ldr	r3, [r3, #16]
 8008aa4:	69ba      	ldr	r2, [r7, #24]
 8008aa6:	0151      	lsls	r1, r2, #5
 8008aa8:	69fa      	ldr	r2, [r7, #28]
 8008aaa:	440a      	add	r2, r1
 8008aac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ab0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008ab4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008ab8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008aba:	69bb      	ldr	r3, [r7, #24]
 8008abc:	015a      	lsls	r2, r3, #5
 8008abe:	69fb      	ldr	r3, [r7, #28]
 8008ac0:	4413      	add	r3, r2
 8008ac2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ac6:	691b      	ldr	r3, [r3, #16]
 8008ac8:	69ba      	ldr	r2, [r7, #24]
 8008aca:	0151      	lsls	r1, r2, #5
 8008acc:	69fa      	ldr	r2, [r7, #28]
 8008ace:	440a      	add	r2, r1
 8008ad0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ad4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ad8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008ada:	69bb      	ldr	r3, [r7, #24]
 8008adc:	015a      	lsls	r2, r3, #5
 8008ade:	69fb      	ldr	r3, [r7, #28]
 8008ae0:	4413      	add	r3, r2
 8008ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ae6:	691b      	ldr	r3, [r3, #16]
 8008ae8:	69ba      	ldr	r2, [r7, #24]
 8008aea:	0151      	lsls	r1, r2, #5
 8008aec:	69fa      	ldr	r2, [r7, #28]
 8008aee:	440a      	add	r2, r1
 8008af0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008af4:	0cdb      	lsrs	r3, r3, #19
 8008af6:	04db      	lsls	r3, r3, #19
 8008af8:	6113      	str	r3, [r2, #16]
 8008afa:	e074      	b.n	8008be6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008afc:	69bb      	ldr	r3, [r7, #24]
 8008afe:	015a      	lsls	r2, r3, #5
 8008b00:	69fb      	ldr	r3, [r7, #28]
 8008b02:	4413      	add	r3, r2
 8008b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b08:	691b      	ldr	r3, [r3, #16]
 8008b0a:	69ba      	ldr	r2, [r7, #24]
 8008b0c:	0151      	lsls	r1, r2, #5
 8008b0e:	69fa      	ldr	r2, [r7, #28]
 8008b10:	440a      	add	r2, r1
 8008b12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b16:	0cdb      	lsrs	r3, r3, #19
 8008b18:	04db      	lsls	r3, r3, #19
 8008b1a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008b1c:	69bb      	ldr	r3, [r7, #24]
 8008b1e:	015a      	lsls	r2, r3, #5
 8008b20:	69fb      	ldr	r3, [r7, #28]
 8008b22:	4413      	add	r3, r2
 8008b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b28:	691b      	ldr	r3, [r3, #16]
 8008b2a:	69ba      	ldr	r2, [r7, #24]
 8008b2c:	0151      	lsls	r1, r2, #5
 8008b2e:	69fa      	ldr	r2, [r7, #28]
 8008b30:	440a      	add	r2, r1
 8008b32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b36:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008b3a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008b3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008b40:	69bb      	ldr	r3, [r7, #24]
 8008b42:	015a      	lsls	r2, r3, #5
 8008b44:	69fb      	ldr	r3, [r7, #28]
 8008b46:	4413      	add	r3, r2
 8008b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b4c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	6999      	ldr	r1, [r3, #24]
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	68db      	ldr	r3, [r3, #12]
 8008b56:	440b      	add	r3, r1
 8008b58:	1e59      	subs	r1, r3, #1
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	68db      	ldr	r3, [r3, #12]
 8008b5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008b62:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008b64:	4b9d      	ldr	r3, [pc, #628]	; (8008ddc <USB_EPStartXfer+0x370>)
 8008b66:	400b      	ands	r3, r1
 8008b68:	69b9      	ldr	r1, [r7, #24]
 8008b6a:	0148      	lsls	r0, r1, #5
 8008b6c:	69f9      	ldr	r1, [r7, #28]
 8008b6e:	4401      	add	r1, r0
 8008b70:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008b74:	4313      	orrs	r3, r2
 8008b76:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008b78:	69bb      	ldr	r3, [r7, #24]
 8008b7a:	015a      	lsls	r2, r3, #5
 8008b7c:	69fb      	ldr	r3, [r7, #28]
 8008b7e:	4413      	add	r3, r2
 8008b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b84:	691a      	ldr	r2, [r3, #16]
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	699b      	ldr	r3, [r3, #24]
 8008b8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b8e:	69b9      	ldr	r1, [r7, #24]
 8008b90:	0148      	lsls	r0, r1, #5
 8008b92:	69f9      	ldr	r1, [r7, #28]
 8008b94:	4401      	add	r1, r0
 8008b96:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	791b      	ldrb	r3, [r3, #4]
 8008ba2:	2b01      	cmp	r3, #1
 8008ba4:	d11f      	bne.n	8008be6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008ba6:	69bb      	ldr	r3, [r7, #24]
 8008ba8:	015a      	lsls	r2, r3, #5
 8008baa:	69fb      	ldr	r3, [r7, #28]
 8008bac:	4413      	add	r3, r2
 8008bae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bb2:	691b      	ldr	r3, [r3, #16]
 8008bb4:	69ba      	ldr	r2, [r7, #24]
 8008bb6:	0151      	lsls	r1, r2, #5
 8008bb8:	69fa      	ldr	r2, [r7, #28]
 8008bba:	440a      	add	r2, r1
 8008bbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bc0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008bc4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008bc6:	69bb      	ldr	r3, [r7, #24]
 8008bc8:	015a      	lsls	r2, r3, #5
 8008bca:	69fb      	ldr	r3, [r7, #28]
 8008bcc:	4413      	add	r3, r2
 8008bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bd2:	691b      	ldr	r3, [r3, #16]
 8008bd4:	69ba      	ldr	r2, [r7, #24]
 8008bd6:	0151      	lsls	r1, r2, #5
 8008bd8:	69fa      	ldr	r2, [r7, #28]
 8008bda:	440a      	add	r2, r1
 8008bdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008be0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008be4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008be6:	79fb      	ldrb	r3, [r7, #7]
 8008be8:	2b01      	cmp	r3, #1
 8008bea:	d14b      	bne.n	8008c84 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	695b      	ldr	r3, [r3, #20]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d009      	beq.n	8008c08 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008bf4:	69bb      	ldr	r3, [r7, #24]
 8008bf6:	015a      	lsls	r2, r3, #5
 8008bf8:	69fb      	ldr	r3, [r7, #28]
 8008bfa:	4413      	add	r3, r2
 8008bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c00:	461a      	mov	r2, r3
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	695b      	ldr	r3, [r3, #20]
 8008c06:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	791b      	ldrb	r3, [r3, #4]
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d128      	bne.n	8008c62 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008c10:	69fb      	ldr	r3, [r7, #28]
 8008c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c16:	689b      	ldr	r3, [r3, #8]
 8008c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d110      	bne.n	8008c42 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008c20:	69bb      	ldr	r3, [r7, #24]
 8008c22:	015a      	lsls	r2, r3, #5
 8008c24:	69fb      	ldr	r3, [r7, #28]
 8008c26:	4413      	add	r3, r2
 8008c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	69ba      	ldr	r2, [r7, #24]
 8008c30:	0151      	lsls	r1, r2, #5
 8008c32:	69fa      	ldr	r2, [r7, #28]
 8008c34:	440a      	add	r2, r1
 8008c36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c3a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008c3e:	6013      	str	r3, [r2, #0]
 8008c40:	e00f      	b.n	8008c62 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008c42:	69bb      	ldr	r3, [r7, #24]
 8008c44:	015a      	lsls	r2, r3, #5
 8008c46:	69fb      	ldr	r3, [r7, #28]
 8008c48:	4413      	add	r3, r2
 8008c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	69ba      	ldr	r2, [r7, #24]
 8008c52:	0151      	lsls	r1, r2, #5
 8008c54:	69fa      	ldr	r2, [r7, #28]
 8008c56:	440a      	add	r2, r1
 8008c58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c60:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008c62:	69bb      	ldr	r3, [r7, #24]
 8008c64:	015a      	lsls	r2, r3, #5
 8008c66:	69fb      	ldr	r3, [r7, #28]
 8008c68:	4413      	add	r3, r2
 8008c6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	69ba      	ldr	r2, [r7, #24]
 8008c72:	0151      	lsls	r1, r2, #5
 8008c74:	69fa      	ldr	r2, [r7, #28]
 8008c76:	440a      	add	r2, r1
 8008c78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c7c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008c80:	6013      	str	r3, [r2, #0]
 8008c82:	e133      	b.n	8008eec <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008c84:	69bb      	ldr	r3, [r7, #24]
 8008c86:	015a      	lsls	r2, r3, #5
 8008c88:	69fb      	ldr	r3, [r7, #28]
 8008c8a:	4413      	add	r3, r2
 8008c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	69ba      	ldr	r2, [r7, #24]
 8008c94:	0151      	lsls	r1, r2, #5
 8008c96:	69fa      	ldr	r2, [r7, #28]
 8008c98:	440a      	add	r2, r1
 8008c9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c9e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008ca2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	791b      	ldrb	r3, [r3, #4]
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d015      	beq.n	8008cd8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	699b      	ldr	r3, [r3, #24]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	f000 811b 	beq.w	8008eec <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008cb6:	69fb      	ldr	r3, [r7, #28]
 8008cb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	781b      	ldrb	r3, [r3, #0]
 8008cc2:	f003 030f 	and.w	r3, r3, #15
 8008cc6:	2101      	movs	r1, #1
 8008cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8008ccc:	69f9      	ldr	r1, [r7, #28]
 8008cce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	634b      	str	r3, [r1, #52]	; 0x34
 8008cd6:	e109      	b.n	8008eec <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008cd8:	69fb      	ldr	r3, [r7, #28]
 8008cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d110      	bne.n	8008d0a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008ce8:	69bb      	ldr	r3, [r7, #24]
 8008cea:	015a      	lsls	r2, r3, #5
 8008cec:	69fb      	ldr	r3, [r7, #28]
 8008cee:	4413      	add	r3, r2
 8008cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	69ba      	ldr	r2, [r7, #24]
 8008cf8:	0151      	lsls	r1, r2, #5
 8008cfa:	69fa      	ldr	r2, [r7, #28]
 8008cfc:	440a      	add	r2, r1
 8008cfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d02:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008d06:	6013      	str	r3, [r2, #0]
 8008d08:	e00f      	b.n	8008d2a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008d0a:	69bb      	ldr	r3, [r7, #24]
 8008d0c:	015a      	lsls	r2, r3, #5
 8008d0e:	69fb      	ldr	r3, [r7, #28]
 8008d10:	4413      	add	r3, r2
 8008d12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	69ba      	ldr	r2, [r7, #24]
 8008d1a:	0151      	lsls	r1, r2, #5
 8008d1c:	69fa      	ldr	r2, [r7, #28]
 8008d1e:	440a      	add	r2, r1
 8008d20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d28:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	6919      	ldr	r1, [r3, #16]
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	781a      	ldrb	r2, [r3, #0]
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	699b      	ldr	r3, [r3, #24]
 8008d36:	b298      	uxth	r0, r3
 8008d38:	79fb      	ldrb	r3, [r7, #7]
 8008d3a:	9300      	str	r3, [sp, #0]
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	68f8      	ldr	r0, [r7, #12]
 8008d40:	f000 fade 	bl	8009300 <USB_WritePacket>
 8008d44:	e0d2      	b.n	8008eec <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008d46:	69bb      	ldr	r3, [r7, #24]
 8008d48:	015a      	lsls	r2, r3, #5
 8008d4a:	69fb      	ldr	r3, [r7, #28]
 8008d4c:	4413      	add	r3, r2
 8008d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d52:	691b      	ldr	r3, [r3, #16]
 8008d54:	69ba      	ldr	r2, [r7, #24]
 8008d56:	0151      	lsls	r1, r2, #5
 8008d58:	69fa      	ldr	r2, [r7, #28]
 8008d5a:	440a      	add	r2, r1
 8008d5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d60:	0cdb      	lsrs	r3, r3, #19
 8008d62:	04db      	lsls	r3, r3, #19
 8008d64:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008d66:	69bb      	ldr	r3, [r7, #24]
 8008d68:	015a      	lsls	r2, r3, #5
 8008d6a:	69fb      	ldr	r3, [r7, #28]
 8008d6c:	4413      	add	r3, r2
 8008d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d72:	691b      	ldr	r3, [r3, #16]
 8008d74:	69ba      	ldr	r2, [r7, #24]
 8008d76:	0151      	lsls	r1, r2, #5
 8008d78:	69fa      	ldr	r2, [r7, #28]
 8008d7a:	440a      	add	r2, r1
 8008d7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d80:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008d84:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008d88:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	699b      	ldr	r3, [r3, #24]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d126      	bne.n	8008de0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008d92:	69bb      	ldr	r3, [r7, #24]
 8008d94:	015a      	lsls	r2, r3, #5
 8008d96:	69fb      	ldr	r3, [r7, #28]
 8008d98:	4413      	add	r3, r2
 8008d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d9e:	691a      	ldr	r2, [r3, #16]
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	68db      	ldr	r3, [r3, #12]
 8008da4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008da8:	69b9      	ldr	r1, [r7, #24]
 8008daa:	0148      	lsls	r0, r1, #5
 8008dac:	69f9      	ldr	r1, [r7, #28]
 8008dae:	4401      	add	r1, r0
 8008db0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008db4:	4313      	orrs	r3, r2
 8008db6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008db8:	69bb      	ldr	r3, [r7, #24]
 8008dba:	015a      	lsls	r2, r3, #5
 8008dbc:	69fb      	ldr	r3, [r7, #28]
 8008dbe:	4413      	add	r3, r2
 8008dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dc4:	691b      	ldr	r3, [r3, #16]
 8008dc6:	69ba      	ldr	r2, [r7, #24]
 8008dc8:	0151      	lsls	r1, r2, #5
 8008dca:	69fa      	ldr	r2, [r7, #28]
 8008dcc:	440a      	add	r2, r1
 8008dce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008dd2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008dd6:	6113      	str	r3, [r2, #16]
 8008dd8:	e03a      	b.n	8008e50 <USB_EPStartXfer+0x3e4>
 8008dda:	bf00      	nop
 8008ddc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	699a      	ldr	r2, [r3, #24]
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	68db      	ldr	r3, [r3, #12]
 8008de8:	4413      	add	r3, r2
 8008dea:	1e5a      	subs	r2, r3, #1
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	68db      	ldr	r3, [r3, #12]
 8008df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008df4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	68db      	ldr	r3, [r3, #12]
 8008dfa:	8afa      	ldrh	r2, [r7, #22]
 8008dfc:	fb03 f202 	mul.w	r2, r3, r2
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008e04:	69bb      	ldr	r3, [r7, #24]
 8008e06:	015a      	lsls	r2, r3, #5
 8008e08:	69fb      	ldr	r3, [r7, #28]
 8008e0a:	4413      	add	r3, r2
 8008e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e10:	691a      	ldr	r2, [r3, #16]
 8008e12:	8afb      	ldrh	r3, [r7, #22]
 8008e14:	04d9      	lsls	r1, r3, #19
 8008e16:	4b38      	ldr	r3, [pc, #224]	; (8008ef8 <USB_EPStartXfer+0x48c>)
 8008e18:	400b      	ands	r3, r1
 8008e1a:	69b9      	ldr	r1, [r7, #24]
 8008e1c:	0148      	lsls	r0, r1, #5
 8008e1e:	69f9      	ldr	r1, [r7, #28]
 8008e20:	4401      	add	r1, r0
 8008e22:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008e26:	4313      	orrs	r3, r2
 8008e28:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008e2a:	69bb      	ldr	r3, [r7, #24]
 8008e2c:	015a      	lsls	r2, r3, #5
 8008e2e:	69fb      	ldr	r3, [r7, #28]
 8008e30:	4413      	add	r3, r2
 8008e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e36:	691a      	ldr	r2, [r3, #16]
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	69db      	ldr	r3, [r3, #28]
 8008e3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e40:	69b9      	ldr	r1, [r7, #24]
 8008e42:	0148      	lsls	r0, r1, #5
 8008e44:	69f9      	ldr	r1, [r7, #28]
 8008e46:	4401      	add	r1, r0
 8008e48:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008e4c:	4313      	orrs	r3, r2
 8008e4e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008e50:	79fb      	ldrb	r3, [r7, #7]
 8008e52:	2b01      	cmp	r3, #1
 8008e54:	d10d      	bne.n	8008e72 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	691b      	ldr	r3, [r3, #16]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d009      	beq.n	8008e72 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	6919      	ldr	r1, [r3, #16]
 8008e62:	69bb      	ldr	r3, [r7, #24]
 8008e64:	015a      	lsls	r2, r3, #5
 8008e66:	69fb      	ldr	r3, [r7, #28]
 8008e68:	4413      	add	r3, r2
 8008e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e6e:	460a      	mov	r2, r1
 8008e70:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	791b      	ldrb	r3, [r3, #4]
 8008e76:	2b01      	cmp	r3, #1
 8008e78:	d128      	bne.n	8008ecc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008e7a:	69fb      	ldr	r3, [r7, #28]
 8008e7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e80:	689b      	ldr	r3, [r3, #8]
 8008e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d110      	bne.n	8008eac <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008e8a:	69bb      	ldr	r3, [r7, #24]
 8008e8c:	015a      	lsls	r2, r3, #5
 8008e8e:	69fb      	ldr	r3, [r7, #28]
 8008e90:	4413      	add	r3, r2
 8008e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	69ba      	ldr	r2, [r7, #24]
 8008e9a:	0151      	lsls	r1, r2, #5
 8008e9c:	69fa      	ldr	r2, [r7, #28]
 8008e9e:	440a      	add	r2, r1
 8008ea0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ea4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008ea8:	6013      	str	r3, [r2, #0]
 8008eaa:	e00f      	b.n	8008ecc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008eac:	69bb      	ldr	r3, [r7, #24]
 8008eae:	015a      	lsls	r2, r3, #5
 8008eb0:	69fb      	ldr	r3, [r7, #28]
 8008eb2:	4413      	add	r3, r2
 8008eb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	69ba      	ldr	r2, [r7, #24]
 8008ebc:	0151      	lsls	r1, r2, #5
 8008ebe:	69fa      	ldr	r2, [r7, #28]
 8008ec0:	440a      	add	r2, r1
 8008ec2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ec6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008eca:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008ecc:	69bb      	ldr	r3, [r7, #24]
 8008ece:	015a      	lsls	r2, r3, #5
 8008ed0:	69fb      	ldr	r3, [r7, #28]
 8008ed2:	4413      	add	r3, r2
 8008ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	69ba      	ldr	r2, [r7, #24]
 8008edc:	0151      	lsls	r1, r2, #5
 8008ede:	69fa      	ldr	r2, [r7, #28]
 8008ee0:	440a      	add	r2, r1
 8008ee2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ee6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008eea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008eec:	2300      	movs	r3, #0
}
 8008eee:	4618      	mov	r0, r3
 8008ef0:	3720      	adds	r7, #32
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd80      	pop	{r7, pc}
 8008ef6:	bf00      	nop
 8008ef8:	1ff80000 	.word	0x1ff80000

08008efc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b087      	sub	sp, #28
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	60f8      	str	r0, [r7, #12]
 8008f04:	60b9      	str	r1, [r7, #8]
 8008f06:	4613      	mov	r3, r2
 8008f08:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	781b      	ldrb	r3, [r3, #0]
 8008f12:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	785b      	ldrb	r3, [r3, #1]
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	f040 80ce 	bne.w	80090ba <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	699b      	ldr	r3, [r3, #24]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d132      	bne.n	8008f8c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	015a      	lsls	r2, r3, #5
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	4413      	add	r3, r2
 8008f2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f32:	691b      	ldr	r3, [r3, #16]
 8008f34:	693a      	ldr	r2, [r7, #16]
 8008f36:	0151      	lsls	r1, r2, #5
 8008f38:	697a      	ldr	r2, [r7, #20]
 8008f3a:	440a      	add	r2, r1
 8008f3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f40:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008f44:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008f48:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	015a      	lsls	r2, r3, #5
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	4413      	add	r3, r2
 8008f52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f56:	691b      	ldr	r3, [r3, #16]
 8008f58:	693a      	ldr	r2, [r7, #16]
 8008f5a:	0151      	lsls	r1, r2, #5
 8008f5c:	697a      	ldr	r2, [r7, #20]
 8008f5e:	440a      	add	r2, r1
 8008f60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f64:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008f68:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	015a      	lsls	r2, r3, #5
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	4413      	add	r3, r2
 8008f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f76:	691b      	ldr	r3, [r3, #16]
 8008f78:	693a      	ldr	r2, [r7, #16]
 8008f7a:	0151      	lsls	r1, r2, #5
 8008f7c:	697a      	ldr	r2, [r7, #20]
 8008f7e:	440a      	add	r2, r1
 8008f80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f84:	0cdb      	lsrs	r3, r3, #19
 8008f86:	04db      	lsls	r3, r3, #19
 8008f88:	6113      	str	r3, [r2, #16]
 8008f8a:	e04e      	b.n	800902a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	015a      	lsls	r2, r3, #5
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	4413      	add	r3, r2
 8008f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f98:	691b      	ldr	r3, [r3, #16]
 8008f9a:	693a      	ldr	r2, [r7, #16]
 8008f9c:	0151      	lsls	r1, r2, #5
 8008f9e:	697a      	ldr	r2, [r7, #20]
 8008fa0:	440a      	add	r2, r1
 8008fa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fa6:	0cdb      	lsrs	r3, r3, #19
 8008fa8:	04db      	lsls	r3, r3, #19
 8008faa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008fac:	693b      	ldr	r3, [r7, #16]
 8008fae:	015a      	lsls	r2, r3, #5
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	4413      	add	r3, r2
 8008fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fb8:	691b      	ldr	r3, [r3, #16]
 8008fba:	693a      	ldr	r2, [r7, #16]
 8008fbc:	0151      	lsls	r1, r2, #5
 8008fbe:	697a      	ldr	r2, [r7, #20]
 8008fc0:	440a      	add	r2, r1
 8008fc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fc6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008fca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008fce:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	699a      	ldr	r2, [r3, #24]
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	68db      	ldr	r3, [r3, #12]
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	d903      	bls.n	8008fe4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	68da      	ldr	r2, [r3, #12]
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	015a      	lsls	r2, r3, #5
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	4413      	add	r3, r2
 8008fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ff0:	691b      	ldr	r3, [r3, #16]
 8008ff2:	693a      	ldr	r2, [r7, #16]
 8008ff4:	0151      	lsls	r1, r2, #5
 8008ff6:	697a      	ldr	r2, [r7, #20]
 8008ff8:	440a      	add	r2, r1
 8008ffa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ffe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009002:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	015a      	lsls	r2, r3, #5
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	4413      	add	r3, r2
 800900c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009010:	691a      	ldr	r2, [r3, #16]
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	699b      	ldr	r3, [r3, #24]
 8009016:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800901a:	6939      	ldr	r1, [r7, #16]
 800901c:	0148      	lsls	r0, r1, #5
 800901e:	6979      	ldr	r1, [r7, #20]
 8009020:	4401      	add	r1, r0
 8009022:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009026:	4313      	orrs	r3, r2
 8009028:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800902a:	79fb      	ldrb	r3, [r7, #7]
 800902c:	2b01      	cmp	r3, #1
 800902e:	d11e      	bne.n	800906e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	695b      	ldr	r3, [r3, #20]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d009      	beq.n	800904c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009038:	693b      	ldr	r3, [r7, #16]
 800903a:	015a      	lsls	r2, r3, #5
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	4413      	add	r3, r2
 8009040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009044:	461a      	mov	r2, r3
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	695b      	ldr	r3, [r3, #20]
 800904a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	015a      	lsls	r2, r3, #5
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	4413      	add	r3, r2
 8009054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	693a      	ldr	r2, [r7, #16]
 800905c:	0151      	lsls	r1, r2, #5
 800905e:	697a      	ldr	r2, [r7, #20]
 8009060:	440a      	add	r2, r1
 8009062:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009066:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800906a:	6013      	str	r3, [r2, #0]
 800906c:	e097      	b.n	800919e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	015a      	lsls	r2, r3, #5
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	4413      	add	r3, r2
 8009076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	693a      	ldr	r2, [r7, #16]
 800907e:	0151      	lsls	r1, r2, #5
 8009080:	697a      	ldr	r2, [r7, #20]
 8009082:	440a      	add	r2, r1
 8009084:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009088:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800908c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800908e:	68bb      	ldr	r3, [r7, #8]
 8009090:	699b      	ldr	r3, [r3, #24]
 8009092:	2b00      	cmp	r3, #0
 8009094:	f000 8083 	beq.w	800919e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800909e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	781b      	ldrb	r3, [r3, #0]
 80090a4:	f003 030f 	and.w	r3, r3, #15
 80090a8:	2101      	movs	r1, #1
 80090aa:	fa01 f303 	lsl.w	r3, r1, r3
 80090ae:	6979      	ldr	r1, [r7, #20]
 80090b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80090b4:	4313      	orrs	r3, r2
 80090b6:	634b      	str	r3, [r1, #52]	; 0x34
 80090b8:	e071      	b.n	800919e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	015a      	lsls	r2, r3, #5
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	4413      	add	r3, r2
 80090c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090c6:	691b      	ldr	r3, [r3, #16]
 80090c8:	693a      	ldr	r2, [r7, #16]
 80090ca:	0151      	lsls	r1, r2, #5
 80090cc:	697a      	ldr	r2, [r7, #20]
 80090ce:	440a      	add	r2, r1
 80090d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090d4:	0cdb      	lsrs	r3, r3, #19
 80090d6:	04db      	lsls	r3, r3, #19
 80090d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	015a      	lsls	r2, r3, #5
 80090de:	697b      	ldr	r3, [r7, #20]
 80090e0:	4413      	add	r3, r2
 80090e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090e6:	691b      	ldr	r3, [r3, #16]
 80090e8:	693a      	ldr	r2, [r7, #16]
 80090ea:	0151      	lsls	r1, r2, #5
 80090ec:	697a      	ldr	r2, [r7, #20]
 80090ee:	440a      	add	r2, r1
 80090f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80090f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80090fc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	699b      	ldr	r3, [r3, #24]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d003      	beq.n	800910e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	68da      	ldr	r2, [r3, #12]
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	68da      	ldr	r2, [r3, #12]
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	015a      	lsls	r2, r3, #5
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	4413      	add	r3, r2
 800911e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009122:	691b      	ldr	r3, [r3, #16]
 8009124:	693a      	ldr	r2, [r7, #16]
 8009126:	0151      	lsls	r1, r2, #5
 8009128:	697a      	ldr	r2, [r7, #20]
 800912a:	440a      	add	r2, r1
 800912c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009130:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009134:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	015a      	lsls	r2, r3, #5
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	4413      	add	r3, r2
 800913e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009142:	691a      	ldr	r2, [r3, #16]
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	69db      	ldr	r3, [r3, #28]
 8009148:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800914c:	6939      	ldr	r1, [r7, #16]
 800914e:	0148      	lsls	r0, r1, #5
 8009150:	6979      	ldr	r1, [r7, #20]
 8009152:	4401      	add	r1, r0
 8009154:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009158:	4313      	orrs	r3, r2
 800915a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800915c:	79fb      	ldrb	r3, [r7, #7]
 800915e:	2b01      	cmp	r3, #1
 8009160:	d10d      	bne.n	800917e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	691b      	ldr	r3, [r3, #16]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d009      	beq.n	800917e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	6919      	ldr	r1, [r3, #16]
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	015a      	lsls	r2, r3, #5
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	4413      	add	r3, r2
 8009176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800917a:	460a      	mov	r2, r1
 800917c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800917e:	693b      	ldr	r3, [r7, #16]
 8009180:	015a      	lsls	r2, r3, #5
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	4413      	add	r3, r2
 8009186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	693a      	ldr	r2, [r7, #16]
 800918e:	0151      	lsls	r1, r2, #5
 8009190:	697a      	ldr	r2, [r7, #20]
 8009192:	440a      	add	r2, r1
 8009194:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009198:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800919c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800919e:	2300      	movs	r3, #0
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	371c      	adds	r7, #28
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr

080091ac <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b087      	sub	sp, #28
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80091b6:	2300      	movs	r3, #0
 80091b8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80091ba:	2300      	movs	r3, #0
 80091bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	785b      	ldrb	r3, [r3, #1]
 80091c6:	2b01      	cmp	r3, #1
 80091c8:	d14a      	bne.n	8009260 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	781b      	ldrb	r3, [r3, #0]
 80091ce:	015a      	lsls	r2, r3, #5
 80091d0:	693b      	ldr	r3, [r7, #16]
 80091d2:	4413      	add	r3, r2
 80091d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091e2:	f040 8086 	bne.w	80092f2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	781b      	ldrb	r3, [r3, #0]
 80091ea:	015a      	lsls	r2, r3, #5
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	4413      	add	r3, r2
 80091f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	683a      	ldr	r2, [r7, #0]
 80091f8:	7812      	ldrb	r2, [r2, #0]
 80091fa:	0151      	lsls	r1, r2, #5
 80091fc:	693a      	ldr	r2, [r7, #16]
 80091fe:	440a      	add	r2, r1
 8009200:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009204:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009208:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	781b      	ldrb	r3, [r3, #0]
 800920e:	015a      	lsls	r2, r3, #5
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	4413      	add	r3, r2
 8009214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	683a      	ldr	r2, [r7, #0]
 800921c:	7812      	ldrb	r2, [r2, #0]
 800921e:	0151      	lsls	r1, r2, #5
 8009220:	693a      	ldr	r2, [r7, #16]
 8009222:	440a      	add	r2, r1
 8009224:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009228:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800922c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	3301      	adds	r3, #1
 8009232:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	f242 7210 	movw	r2, #10000	; 0x2710
 800923a:	4293      	cmp	r3, r2
 800923c:	d902      	bls.n	8009244 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800923e:	2301      	movs	r3, #1
 8009240:	75fb      	strb	r3, [r7, #23]
          break;
 8009242:	e056      	b.n	80092f2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	781b      	ldrb	r3, [r3, #0]
 8009248:	015a      	lsls	r2, r3, #5
 800924a:	693b      	ldr	r3, [r7, #16]
 800924c:	4413      	add	r3, r2
 800924e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009258:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800925c:	d0e7      	beq.n	800922e <USB_EPStopXfer+0x82>
 800925e:	e048      	b.n	80092f2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	015a      	lsls	r2, r3, #5
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	4413      	add	r3, r2
 800926a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009274:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009278:	d13b      	bne.n	80092f2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	781b      	ldrb	r3, [r3, #0]
 800927e:	015a      	lsls	r2, r3, #5
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	4413      	add	r3, r2
 8009284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	683a      	ldr	r2, [r7, #0]
 800928c:	7812      	ldrb	r2, [r2, #0]
 800928e:	0151      	lsls	r1, r2, #5
 8009290:	693a      	ldr	r2, [r7, #16]
 8009292:	440a      	add	r2, r1
 8009294:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009298:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800929c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	781b      	ldrb	r3, [r3, #0]
 80092a2:	015a      	lsls	r2, r3, #5
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	4413      	add	r3, r2
 80092a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	683a      	ldr	r2, [r7, #0]
 80092b0:	7812      	ldrb	r2, [r2, #0]
 80092b2:	0151      	lsls	r1, r2, #5
 80092b4:	693a      	ldr	r2, [r7, #16]
 80092b6:	440a      	add	r2, r1
 80092b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80092c0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	3301      	adds	r3, #1
 80092c6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f242 7210 	movw	r2, #10000	; 0x2710
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d902      	bls.n	80092d8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80092d2:	2301      	movs	r3, #1
 80092d4:	75fb      	strb	r3, [r7, #23]
          break;
 80092d6:	e00c      	b.n	80092f2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	015a      	lsls	r2, r3, #5
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	4413      	add	r3, r2
 80092e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80092ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80092f0:	d0e7      	beq.n	80092c2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80092f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	371c      	adds	r7, #28
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr

08009300 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009300:	b480      	push	{r7}
 8009302:	b089      	sub	sp, #36	; 0x24
 8009304:	af00      	add	r7, sp, #0
 8009306:	60f8      	str	r0, [r7, #12]
 8009308:	60b9      	str	r1, [r7, #8]
 800930a:	4611      	mov	r1, r2
 800930c:	461a      	mov	r2, r3
 800930e:	460b      	mov	r3, r1
 8009310:	71fb      	strb	r3, [r7, #7]
 8009312:	4613      	mov	r3, r2
 8009314:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800931e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009322:	2b00      	cmp	r3, #0
 8009324:	d123      	bne.n	800936e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009326:	88bb      	ldrh	r3, [r7, #4]
 8009328:	3303      	adds	r3, #3
 800932a:	089b      	lsrs	r3, r3, #2
 800932c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800932e:	2300      	movs	r3, #0
 8009330:	61bb      	str	r3, [r7, #24]
 8009332:	e018      	b.n	8009366 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009334:	79fb      	ldrb	r3, [r7, #7]
 8009336:	031a      	lsls	r2, r3, #12
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	4413      	add	r3, r2
 800933c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009340:	461a      	mov	r2, r3
 8009342:	69fb      	ldr	r3, [r7, #28]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009348:	69fb      	ldr	r3, [r7, #28]
 800934a:	3301      	adds	r3, #1
 800934c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800934e:	69fb      	ldr	r3, [r7, #28]
 8009350:	3301      	adds	r3, #1
 8009352:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009354:	69fb      	ldr	r3, [r7, #28]
 8009356:	3301      	adds	r3, #1
 8009358:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800935a:	69fb      	ldr	r3, [r7, #28]
 800935c:	3301      	adds	r3, #1
 800935e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009360:	69bb      	ldr	r3, [r7, #24]
 8009362:	3301      	adds	r3, #1
 8009364:	61bb      	str	r3, [r7, #24]
 8009366:	69ba      	ldr	r2, [r7, #24]
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	429a      	cmp	r2, r3
 800936c:	d3e2      	bcc.n	8009334 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800936e:	2300      	movs	r3, #0
}
 8009370:	4618      	mov	r0, r3
 8009372:	3724      	adds	r7, #36	; 0x24
 8009374:	46bd      	mov	sp, r7
 8009376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937a:	4770      	bx	lr

0800937c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800937c:	b480      	push	{r7}
 800937e:	b08b      	sub	sp, #44	; 0x2c
 8009380:	af00      	add	r7, sp, #0
 8009382:	60f8      	str	r0, [r7, #12]
 8009384:	60b9      	str	r1, [r7, #8]
 8009386:	4613      	mov	r3, r2
 8009388:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009392:	88fb      	ldrh	r3, [r7, #6]
 8009394:	089b      	lsrs	r3, r3, #2
 8009396:	b29b      	uxth	r3, r3
 8009398:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800939a:	88fb      	ldrh	r3, [r7, #6]
 800939c:	f003 0303 	and.w	r3, r3, #3
 80093a0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80093a2:	2300      	movs	r3, #0
 80093a4:	623b      	str	r3, [r7, #32]
 80093a6:	e014      	b.n	80093d2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80093a8:	69bb      	ldr	r3, [r7, #24]
 80093aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093ae:	681a      	ldr	r2, [r3, #0]
 80093b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b2:	601a      	str	r2, [r3, #0]
    pDest++;
 80093b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b6:	3301      	adds	r3, #1
 80093b8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80093ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093bc:	3301      	adds	r3, #1
 80093be:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80093c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c2:	3301      	adds	r3, #1
 80093c4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80093c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c8:	3301      	adds	r3, #1
 80093ca:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80093cc:	6a3b      	ldr	r3, [r7, #32]
 80093ce:	3301      	adds	r3, #1
 80093d0:	623b      	str	r3, [r7, #32]
 80093d2:	6a3a      	ldr	r2, [r7, #32]
 80093d4:	697b      	ldr	r3, [r7, #20]
 80093d6:	429a      	cmp	r2, r3
 80093d8:	d3e6      	bcc.n	80093a8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80093da:	8bfb      	ldrh	r3, [r7, #30]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d01e      	beq.n	800941e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80093e0:	2300      	movs	r3, #0
 80093e2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80093e4:	69bb      	ldr	r3, [r7, #24]
 80093e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80093ea:	461a      	mov	r2, r3
 80093ec:	f107 0310 	add.w	r3, r7, #16
 80093f0:	6812      	ldr	r2, [r2, #0]
 80093f2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80093f4:	693a      	ldr	r2, [r7, #16]
 80093f6:	6a3b      	ldr	r3, [r7, #32]
 80093f8:	b2db      	uxtb	r3, r3
 80093fa:	00db      	lsls	r3, r3, #3
 80093fc:	fa22 f303 	lsr.w	r3, r2, r3
 8009400:	b2da      	uxtb	r2, r3
 8009402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009404:	701a      	strb	r2, [r3, #0]
      i++;
 8009406:	6a3b      	ldr	r3, [r7, #32]
 8009408:	3301      	adds	r3, #1
 800940a:	623b      	str	r3, [r7, #32]
      pDest++;
 800940c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800940e:	3301      	adds	r3, #1
 8009410:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009412:	8bfb      	ldrh	r3, [r7, #30]
 8009414:	3b01      	subs	r3, #1
 8009416:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009418:	8bfb      	ldrh	r3, [r7, #30]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d1ea      	bne.n	80093f4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800941e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009420:	4618      	mov	r0, r3
 8009422:	372c      	adds	r7, #44	; 0x2c
 8009424:	46bd      	mov	sp, r7
 8009426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942a:	4770      	bx	lr

0800942c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800942c:	b480      	push	{r7}
 800942e:	b085      	sub	sp, #20
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	781b      	ldrb	r3, [r3, #0]
 800943e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	785b      	ldrb	r3, [r3, #1]
 8009444:	2b01      	cmp	r3, #1
 8009446:	d12c      	bne.n	80094a2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	015a      	lsls	r2, r3, #5
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	4413      	add	r3, r2
 8009450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	2b00      	cmp	r3, #0
 8009458:	db12      	blt.n	8009480 <USB_EPSetStall+0x54>
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d00f      	beq.n	8009480 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	015a      	lsls	r2, r3, #5
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	4413      	add	r3, r2
 8009468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	68ba      	ldr	r2, [r7, #8]
 8009470:	0151      	lsls	r1, r2, #5
 8009472:	68fa      	ldr	r2, [r7, #12]
 8009474:	440a      	add	r2, r1
 8009476:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800947a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800947e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	015a      	lsls	r2, r3, #5
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	4413      	add	r3, r2
 8009488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	68ba      	ldr	r2, [r7, #8]
 8009490:	0151      	lsls	r1, r2, #5
 8009492:	68fa      	ldr	r2, [r7, #12]
 8009494:	440a      	add	r2, r1
 8009496:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800949a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800949e:	6013      	str	r3, [r2, #0]
 80094a0:	e02b      	b.n	80094fa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	015a      	lsls	r2, r3, #5
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	4413      	add	r3, r2
 80094aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	db12      	blt.n	80094da <USB_EPSetStall+0xae>
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d00f      	beq.n	80094da <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	015a      	lsls	r2, r3, #5
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	4413      	add	r3, r2
 80094c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	68ba      	ldr	r2, [r7, #8]
 80094ca:	0151      	lsls	r1, r2, #5
 80094cc:	68fa      	ldr	r2, [r7, #12]
 80094ce:	440a      	add	r2, r1
 80094d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094d4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80094d8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	015a      	lsls	r2, r3, #5
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	4413      	add	r3, r2
 80094e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	68ba      	ldr	r2, [r7, #8]
 80094ea:	0151      	lsls	r1, r2, #5
 80094ec:	68fa      	ldr	r2, [r7, #12]
 80094ee:	440a      	add	r2, r1
 80094f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80094f8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80094fa:	2300      	movs	r3, #0
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3714      	adds	r7, #20
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr

08009508 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009508:	b480      	push	{r7}
 800950a:	b085      	sub	sp, #20
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	781b      	ldrb	r3, [r3, #0]
 800951a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	785b      	ldrb	r3, [r3, #1]
 8009520:	2b01      	cmp	r3, #1
 8009522:	d128      	bne.n	8009576 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	015a      	lsls	r2, r3, #5
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	4413      	add	r3, r2
 800952c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	68ba      	ldr	r2, [r7, #8]
 8009534:	0151      	lsls	r1, r2, #5
 8009536:	68fa      	ldr	r2, [r7, #12]
 8009538:	440a      	add	r2, r1
 800953a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800953e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009542:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	791b      	ldrb	r3, [r3, #4]
 8009548:	2b03      	cmp	r3, #3
 800954a:	d003      	beq.n	8009554 <USB_EPClearStall+0x4c>
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	791b      	ldrb	r3, [r3, #4]
 8009550:	2b02      	cmp	r3, #2
 8009552:	d138      	bne.n	80095c6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	015a      	lsls	r2, r3, #5
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	4413      	add	r3, r2
 800955c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	68ba      	ldr	r2, [r7, #8]
 8009564:	0151      	lsls	r1, r2, #5
 8009566:	68fa      	ldr	r2, [r7, #12]
 8009568:	440a      	add	r2, r1
 800956a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800956e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009572:	6013      	str	r3, [r2, #0]
 8009574:	e027      	b.n	80095c6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	015a      	lsls	r2, r3, #5
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	4413      	add	r3, r2
 800957e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	68ba      	ldr	r2, [r7, #8]
 8009586:	0151      	lsls	r1, r2, #5
 8009588:	68fa      	ldr	r2, [r7, #12]
 800958a:	440a      	add	r2, r1
 800958c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009590:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009594:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	791b      	ldrb	r3, [r3, #4]
 800959a:	2b03      	cmp	r3, #3
 800959c:	d003      	beq.n	80095a6 <USB_EPClearStall+0x9e>
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	791b      	ldrb	r3, [r3, #4]
 80095a2:	2b02      	cmp	r3, #2
 80095a4:	d10f      	bne.n	80095c6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	015a      	lsls	r2, r3, #5
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	4413      	add	r3, r2
 80095ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	68ba      	ldr	r2, [r7, #8]
 80095b6:	0151      	lsls	r1, r2, #5
 80095b8:	68fa      	ldr	r2, [r7, #12]
 80095ba:	440a      	add	r2, r1
 80095bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095c4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80095c6:	2300      	movs	r3, #0
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3714      	adds	r7, #20
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr

080095d4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b085      	sub	sp, #20
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	460b      	mov	r3, r1
 80095de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	68fa      	ldr	r2, [r7, #12]
 80095ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80095f2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80095f6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095fe:	681a      	ldr	r2, [r3, #0]
 8009600:	78fb      	ldrb	r3, [r7, #3]
 8009602:	011b      	lsls	r3, r3, #4
 8009604:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009608:	68f9      	ldr	r1, [r7, #12]
 800960a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800960e:	4313      	orrs	r3, r2
 8009610:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009612:	2300      	movs	r3, #0
}
 8009614:	4618      	mov	r0, r3
 8009616:	3714      	adds	r7, #20
 8009618:	46bd      	mov	sp, r7
 800961a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961e:	4770      	bx	lr

08009620 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009620:	b480      	push	{r7}
 8009622:	b085      	sub	sp, #20
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	68fa      	ldr	r2, [r7, #12]
 8009636:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800963a:	f023 0303 	bic.w	r3, r3, #3
 800963e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009646:	685b      	ldr	r3, [r3, #4]
 8009648:	68fa      	ldr	r2, [r7, #12]
 800964a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800964e:	f023 0302 	bic.w	r3, r3, #2
 8009652:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009654:	2300      	movs	r3, #0
}
 8009656:	4618      	mov	r0, r3
 8009658:	3714      	adds	r7, #20
 800965a:	46bd      	mov	sp, r7
 800965c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009660:	4770      	bx	lr

08009662 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009662:	b480      	push	{r7}
 8009664:	b085      	sub	sp, #20
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	68fa      	ldr	r2, [r7, #12]
 8009678:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800967c:	f023 0303 	bic.w	r3, r3, #3
 8009680:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009688:	685b      	ldr	r3, [r3, #4]
 800968a:	68fa      	ldr	r2, [r7, #12]
 800968c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009690:	f043 0302 	orr.w	r3, r3, #2
 8009694:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009696:	2300      	movs	r3, #0
}
 8009698:	4618      	mov	r0, r3
 800969a:	3714      	adds	r7, #20
 800969c:	46bd      	mov	sp, r7
 800969e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a2:	4770      	bx	lr

080096a4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b085      	sub	sp, #20
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	695b      	ldr	r3, [r3, #20]
 80096b0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	699b      	ldr	r3, [r3, #24]
 80096b6:	68fa      	ldr	r2, [r7, #12]
 80096b8:	4013      	ands	r3, r2
 80096ba:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80096bc:	68fb      	ldr	r3, [r7, #12]
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3714      	adds	r7, #20
 80096c2:	46bd      	mov	sp, r7
 80096c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c8:	4770      	bx	lr

080096ca <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80096ca:	b480      	push	{r7}
 80096cc:	b085      	sub	sp, #20
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096dc:	699b      	ldr	r3, [r3, #24]
 80096de:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096e6:	69db      	ldr	r3, [r3, #28]
 80096e8:	68ba      	ldr	r2, [r7, #8]
 80096ea:	4013      	ands	r3, r2
 80096ec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	0c1b      	lsrs	r3, r3, #16
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3714      	adds	r7, #20
 80096f6:	46bd      	mov	sp, r7
 80096f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fc:	4770      	bx	lr

080096fe <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80096fe:	b480      	push	{r7}
 8009700:	b085      	sub	sp, #20
 8009702:	af00      	add	r7, sp, #0
 8009704:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009710:	699b      	ldr	r3, [r3, #24]
 8009712:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800971a:	69db      	ldr	r3, [r3, #28]
 800971c:	68ba      	ldr	r2, [r7, #8]
 800971e:	4013      	ands	r3, r2
 8009720:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	b29b      	uxth	r3, r3
}
 8009726:	4618      	mov	r0, r3
 8009728:	3714      	adds	r7, #20
 800972a:	46bd      	mov	sp, r7
 800972c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009730:	4770      	bx	lr

08009732 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009732:	b480      	push	{r7}
 8009734:	b085      	sub	sp, #20
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
 800973a:	460b      	mov	r3, r1
 800973c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009742:	78fb      	ldrb	r3, [r7, #3]
 8009744:	015a      	lsls	r2, r3, #5
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	4413      	add	r3, r2
 800974a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800974e:	689b      	ldr	r3, [r3, #8]
 8009750:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009758:	695b      	ldr	r3, [r3, #20]
 800975a:	68ba      	ldr	r2, [r7, #8]
 800975c:	4013      	ands	r3, r2
 800975e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009760:	68bb      	ldr	r3, [r7, #8]
}
 8009762:	4618      	mov	r0, r3
 8009764:	3714      	adds	r7, #20
 8009766:	46bd      	mov	sp, r7
 8009768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976c:	4770      	bx	lr

0800976e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800976e:	b480      	push	{r7}
 8009770:	b087      	sub	sp, #28
 8009772:	af00      	add	r7, sp, #0
 8009774:	6078      	str	r0, [r7, #4]
 8009776:	460b      	mov	r3, r1
 8009778:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800977e:	697b      	ldr	r3, [r7, #20]
 8009780:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009784:	691b      	ldr	r3, [r3, #16]
 8009786:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800978e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009790:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009792:	78fb      	ldrb	r3, [r7, #3]
 8009794:	f003 030f 	and.w	r3, r3, #15
 8009798:	68fa      	ldr	r2, [r7, #12]
 800979a:	fa22 f303 	lsr.w	r3, r2, r3
 800979e:	01db      	lsls	r3, r3, #7
 80097a0:	b2db      	uxtb	r3, r3
 80097a2:	693a      	ldr	r2, [r7, #16]
 80097a4:	4313      	orrs	r3, r2
 80097a6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80097a8:	78fb      	ldrb	r3, [r7, #3]
 80097aa:	015a      	lsls	r2, r3, #5
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	4413      	add	r3, r2
 80097b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097b4:	689b      	ldr	r3, [r3, #8]
 80097b6:	693a      	ldr	r2, [r7, #16]
 80097b8:	4013      	ands	r3, r2
 80097ba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80097bc:	68bb      	ldr	r3, [r7, #8]
}
 80097be:	4618      	mov	r0, r3
 80097c0:	371c      	adds	r7, #28
 80097c2:	46bd      	mov	sp, r7
 80097c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c8:	4770      	bx	lr

080097ca <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80097ca:	b480      	push	{r7}
 80097cc:	b083      	sub	sp, #12
 80097ce:	af00      	add	r7, sp, #0
 80097d0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	695b      	ldr	r3, [r3, #20]
 80097d6:	f003 0301 	and.w	r3, r3, #1
}
 80097da:	4618      	mov	r0, r3
 80097dc:	370c      	adds	r7, #12
 80097de:	46bd      	mov	sp, r7
 80097e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e4:	4770      	bx	lr

080097e6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80097e6:	b480      	push	{r7}
 80097e8:	b085      	sub	sp, #20
 80097ea:	af00      	add	r7, sp, #0
 80097ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	68fa      	ldr	r2, [r7, #12]
 80097fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009800:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009804:	f023 0307 	bic.w	r3, r3, #7
 8009808:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009810:	685b      	ldr	r3, [r3, #4]
 8009812:	68fa      	ldr	r2, [r7, #12]
 8009814:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800981c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800981e:	2300      	movs	r3, #0
}
 8009820:	4618      	mov	r0, r3
 8009822:	3714      	adds	r7, #20
 8009824:	46bd      	mov	sp, r7
 8009826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982a:	4770      	bx	lr

0800982c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800982c:	b480      	push	{r7}
 800982e:	b087      	sub	sp, #28
 8009830:	af00      	add	r7, sp, #0
 8009832:	60f8      	str	r0, [r7, #12]
 8009834:	460b      	mov	r3, r1
 8009836:	607a      	str	r2, [r7, #4]
 8009838:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	333c      	adds	r3, #60	; 0x3c
 8009842:	3304      	adds	r3, #4
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	4a26      	ldr	r2, [pc, #152]	; (80098e4 <USB_EP0_OutStart+0xb8>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d90a      	bls.n	8009866 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800985c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009860:	d101      	bne.n	8009866 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009862:	2300      	movs	r3, #0
 8009864:	e037      	b.n	80098d6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800986c:	461a      	mov	r2, r3
 800986e:	2300      	movs	r3, #0
 8009870:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009878:	691b      	ldr	r3, [r3, #16]
 800987a:	697a      	ldr	r2, [r7, #20]
 800987c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009880:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009884:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800988c:	691b      	ldr	r3, [r3, #16]
 800988e:	697a      	ldr	r2, [r7, #20]
 8009890:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009894:	f043 0318 	orr.w	r3, r3, #24
 8009898:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098a0:	691b      	ldr	r3, [r3, #16]
 80098a2:	697a      	ldr	r2, [r7, #20]
 80098a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098a8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80098ac:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80098ae:	7afb      	ldrb	r3, [r7, #11]
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	d10f      	bne.n	80098d4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098ba:	461a      	mov	r2, r3
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	697a      	ldr	r2, [r7, #20]
 80098ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098ce:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80098d2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80098d4:	2300      	movs	r3, #0
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	371c      	adds	r7, #28
 80098da:	46bd      	mov	sp, r7
 80098dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e0:	4770      	bx	lr
 80098e2:	bf00      	nop
 80098e4:	4f54300a 	.word	0x4f54300a

080098e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b085      	sub	sp, #20
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80098f0:	2300      	movs	r3, #0
 80098f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	3301      	adds	r3, #1
 80098f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	4a13      	ldr	r2, [pc, #76]	; (800994c <USB_CoreReset+0x64>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d901      	bls.n	8009906 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009902:	2303      	movs	r3, #3
 8009904:	e01b      	b.n	800993e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	691b      	ldr	r3, [r3, #16]
 800990a:	2b00      	cmp	r3, #0
 800990c:	daf2      	bge.n	80098f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800990e:	2300      	movs	r3, #0
 8009910:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	691b      	ldr	r3, [r3, #16]
 8009916:	f043 0201 	orr.w	r2, r3, #1
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	3301      	adds	r3, #1
 8009922:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	4a09      	ldr	r2, [pc, #36]	; (800994c <USB_CoreReset+0x64>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d901      	bls.n	8009930 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800992c:	2303      	movs	r3, #3
 800992e:	e006      	b.n	800993e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	691b      	ldr	r3, [r3, #16]
 8009934:	f003 0301 	and.w	r3, r3, #1
 8009938:	2b01      	cmp	r3, #1
 800993a:	d0f0      	beq.n	800991e <USB_CoreReset+0x36>

  return HAL_OK;
 800993c:	2300      	movs	r3, #0
}
 800993e:	4618      	mov	r0, r3
 8009940:	3714      	adds	r7, #20
 8009942:	46bd      	mov	sp, r7
 8009944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009948:	4770      	bx	lr
 800994a:	bf00      	nop
 800994c:	00030d40 	.word	0x00030d40

08009950 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009950:	b480      	push	{r7}
 8009952:	b085      	sub	sp, #20
 8009954:	af00      	add	r7, sp, #0
 8009956:	4603      	mov	r3, r0
 8009958:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800995a:	2300      	movs	r3, #0
 800995c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800995e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009962:	2b84      	cmp	r3, #132	; 0x84
 8009964:	d005      	beq.n	8009972 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009966:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	4413      	add	r3, r2
 800996e:	3303      	adds	r3, #3
 8009970:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009972:	68fb      	ldr	r3, [r7, #12]
}
 8009974:	4618      	mov	r0, r3
 8009976:	3714      	adds	r7, #20
 8009978:	46bd      	mov	sp, r7
 800997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997e:	4770      	bx	lr

08009980 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009980:	b480      	push	{r7}
 8009982:	b083      	sub	sp, #12
 8009984:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009986:	f3ef 8305 	mrs	r3, IPSR
 800998a:	607b      	str	r3, [r7, #4]
  return(result);
 800998c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800998e:	2b00      	cmp	r3, #0
 8009990:	bf14      	ite	ne
 8009992:	2301      	movne	r3, #1
 8009994:	2300      	moveq	r3, #0
 8009996:	b2db      	uxtb	r3, r3
}
 8009998:	4618      	mov	r0, r3
 800999a:	370c      	adds	r7, #12
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr

080099a4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80099a8:	f001 feaa 	bl	800b700 <vTaskStartScheduler>
  
  return osOK;
 80099ac:	2300      	movs	r3, #0
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	bd80      	pop	{r7, pc}

080099b2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80099b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099b4:	b089      	sub	sp, #36	; 0x24
 80099b6:	af04      	add	r7, sp, #16
 80099b8:	6078      	str	r0, [r7, #4]
 80099ba:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	695b      	ldr	r3, [r3, #20]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d020      	beq.n	8009a06 <osThreadCreate+0x54>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	699b      	ldr	r3, [r3, #24]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d01c      	beq.n	8009a06 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	685c      	ldr	r4, [r3, #4]
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681d      	ldr	r5, [r3, #0]
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	691e      	ldr	r6, [r3, #16]
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80099de:	4618      	mov	r0, r3
 80099e0:	f7ff ffb6 	bl	8009950 <makeFreeRtosPriority>
 80099e4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	695b      	ldr	r3, [r3, #20]
 80099ea:	687a      	ldr	r2, [r7, #4]
 80099ec:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80099ee:	9202      	str	r2, [sp, #8]
 80099f0:	9301      	str	r3, [sp, #4]
 80099f2:	9100      	str	r1, [sp, #0]
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	4632      	mov	r2, r6
 80099f8:	4629      	mov	r1, r5
 80099fa:	4620      	mov	r0, r4
 80099fc:	f001 fcb8 	bl	800b370 <xTaskCreateStatic>
 8009a00:	4603      	mov	r3, r0
 8009a02:	60fb      	str	r3, [r7, #12]
 8009a04:	e01c      	b.n	8009a40 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	685c      	ldr	r4, [r3, #4]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009a12:	b29e      	uxth	r6, r3
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	f7ff ff98 	bl	8009950 <makeFreeRtosPriority>
 8009a20:	4602      	mov	r2, r0
 8009a22:	f107 030c 	add.w	r3, r7, #12
 8009a26:	9301      	str	r3, [sp, #4]
 8009a28:	9200      	str	r2, [sp, #0]
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	4632      	mov	r2, r6
 8009a2e:	4629      	mov	r1, r5
 8009a30:	4620      	mov	r0, r4
 8009a32:	f001 fcfa 	bl	800b42a <xTaskCreate>
 8009a36:	4603      	mov	r3, r0
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	d001      	beq.n	8009a40 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	e000      	b.n	8009a42 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009a40:	68fb      	ldr	r3, [r7, #12]
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3714      	adds	r7, #20
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009a4a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009a4a:	b580      	push	{r7, lr}
 8009a4c:	b084      	sub	sp, #16
 8009a4e:	af00      	add	r7, sp, #0
 8009a50:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d001      	beq.n	8009a60 <osDelay+0x16>
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	e000      	b.n	8009a62 <osDelay+0x18>
 8009a60:	2301      	movs	r3, #1
 8009a62:	4618      	mov	r0, r3
 8009a64:	f001 fe18 	bl	800b698 <vTaskDelay>
  
  return osOK;
 8009a68:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3710      	adds	r7, #16
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}
	...

08009a74 <osSignalSet>:
* @param  signals       specifies the signal flags of the thread that should be set.
* @retval previous signal flags of the specified thread or 0x80000000 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSignalSet shall be consistent in every CMSIS-RTOS.
*/
int32_t osSignalSet (osThreadId thread_id, int32_t signal)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b086      	sub	sp, #24
 8009a78:	af02      	add	r7, sp, #8
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	6039      	str	r1, [r7, #0]
#if( configUSE_TASK_NOTIFICATIONS == 1 )	
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	60fb      	str	r3, [r7, #12]
  uint32_t ulPreviousNotificationValue = 0;
 8009a82:	2300      	movs	r3, #0
 8009a84:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode())
 8009a86:	f7ff ff7b 	bl	8009980 <inHandlerMode>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d01c      	beq.n	8009aca <osSignalSet+0x56>
  {
    if(xTaskGenericNotifyFromISR( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue, &xHigherPriorityTaskWoken ) != pdPASS )
 8009a90:	6839      	ldr	r1, [r7, #0]
 8009a92:	f107 0208 	add.w	r2, r7, #8
 8009a96:	f107 030c 	add.w	r3, r7, #12
 8009a9a:	9300      	str	r3, [sp, #0]
 8009a9c:	4613      	mov	r3, r2
 8009a9e:	2201      	movs	r2, #1
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f002 fbdf 	bl	800c264 <xTaskGenericNotifyFromISR>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	2b01      	cmp	r3, #1
 8009aaa:	d002      	beq.n	8009ab2 <osSignalSet+0x3e>
      return 0x80000000;
 8009aac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009ab0:	e019      	b.n	8009ae6 <osSignalSet+0x72>
    
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d015      	beq.n	8009ae4 <osSignalSet+0x70>
 8009ab8:	4b0d      	ldr	r3, [pc, #52]	; (8009af0 <osSignalSet+0x7c>)
 8009aba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009abe:	601a      	str	r2, [r3, #0]
 8009ac0:	f3bf 8f4f 	dsb	sy
 8009ac4:	f3bf 8f6f 	isb	sy
 8009ac8:	e00c      	b.n	8009ae4 <osSignalSet+0x70>
  }  
  else if(xTaskGenericNotify( thread_id , (uint32_t)signal, eSetBits, &ulPreviousNotificationValue) != pdPASS )
 8009aca:	6839      	ldr	r1, [r7, #0]
 8009acc:	f107 0308 	add.w	r3, r7, #8
 8009ad0:	2201      	movs	r2, #1
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f002 fb10 	bl	800c0f8 <xTaskGenericNotify>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	2b01      	cmp	r3, #1
 8009adc:	d002      	beq.n	8009ae4 <osSignalSet+0x70>
    return 0x80000000;
 8009ade:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009ae2:	e000      	b.n	8009ae6 <osSignalSet+0x72>
  
  return ulPreviousNotificationValue;
 8009ae4:	68bb      	ldr	r3, [r7, #8]
  (void) thread_id;
  (void) signal;

  return 0x80000000; /* Task Notification not supported */ 	
#endif
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3710      	adds	r7, #16
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}
 8009aee:	bf00      	nop
 8009af0:	e000ed04 	.word	0xe000ed04

08009af4 <osSignalWait>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval  event flag information or error code.
* @note   MUST REMAIN UNCHANGED: \b osSignalWait shall be consistent in every CMSIS-RTOS.
*/
osEvent osSignalWait (int32_t signals, uint32_t millisec)
{
 8009af4:	b590      	push	{r4, r7, lr}
 8009af6:	b089      	sub	sp, #36	; 0x24
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	60f8      	str	r0, [r7, #12]
 8009afc:	60b9      	str	r1, [r7, #8]
 8009afe:	607a      	str	r2, [r7, #4]

#if( configUSE_TASK_NOTIFICATIONS == 1 )
	
  TickType_t ticks;

  ret.value.signals = 0;  
 8009b00:	2300      	movs	r3, #0
 8009b02:	617b      	str	r3, [r7, #20]
  ticks = 0;
 8009b04:	2300      	movs	r3, #0
 8009b06:	61fb      	str	r3, [r7, #28]
  if (millisec == osWaitForever) {
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b0e:	d103      	bne.n	8009b18 <osSignalWait+0x24>
    ticks = portMAX_DELAY;
 8009b10:	f04f 33ff 	mov.w	r3, #4294967295
 8009b14:	61fb      	str	r3, [r7, #28]
 8009b16:	e009      	b.n	8009b2c <osSignalWait+0x38>
  }
  else if (millisec != 0) {
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d006      	beq.n	8009b2c <osSignalWait+0x38>
    ticks = millisec / portTICK_PERIOD_MS;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	61fb      	str	r3, [r7, #28]
    if (ticks == 0) {
 8009b22:	69fb      	ldr	r3, [r7, #28]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d101      	bne.n	8009b2c <osSignalWait+0x38>
      ticks = 1;
 8009b28:	2301      	movs	r3, #1
 8009b2a:	61fb      	str	r3, [r7, #28]
    }
  }  
  
  if (inHandlerMode())
 8009b2c:	f7ff ff28 	bl	8009980 <inHandlerMode>
 8009b30:	4603      	mov	r3, r0
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d002      	beq.n	8009b3c <osSignalWait+0x48>
  {
    ret.status = osErrorISR;  /*Not allowed in ISR*/
 8009b36:	2382      	movs	r3, #130	; 0x82
 8009b38:	613b      	str	r3, [r7, #16]
 8009b3a:	e01b      	b.n	8009b74 <osSignalWait+0x80>
  }
  else
  {
    if(xTaskNotifyWait( 0,(uint32_t) signals, (uint32_t *)&ret.value.signals, ticks) != pdTRUE)
 8009b3c:	68b9      	ldr	r1, [r7, #8]
 8009b3e:	f107 0310 	add.w	r3, r7, #16
 8009b42:	1d1a      	adds	r2, r3, #4
 8009b44:	69fb      	ldr	r3, [r7, #28]
 8009b46:	2000      	movs	r0, #0
 8009b48:	f002 fa7c 	bl	800c044 <xTaskNotifyWait>
 8009b4c:	4603      	mov	r3, r0
 8009b4e:	2b01      	cmp	r3, #1
 8009b50:	d008      	beq.n	8009b64 <osSignalWait+0x70>
    {
      if(ticks == 0)  ret.status = osOK;
 8009b52:	69fb      	ldr	r3, [r7, #28]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d102      	bne.n	8009b5e <osSignalWait+0x6a>
 8009b58:	2300      	movs	r3, #0
 8009b5a:	613b      	str	r3, [r7, #16]
 8009b5c:	e00a      	b.n	8009b74 <osSignalWait+0x80>
      else  ret.status = osEventTimeout;
 8009b5e:	2340      	movs	r3, #64	; 0x40
 8009b60:	613b      	str	r3, [r7, #16]
 8009b62:	e007      	b.n	8009b74 <osSignalWait+0x80>
    }
    else if(ret.value.signals < 0)
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	da02      	bge.n	8009b70 <osSignalWait+0x7c>
    {
      ret.status =  osErrorValue;     
 8009b6a:	2386      	movs	r3, #134	; 0x86
 8009b6c:	613b      	str	r3, [r7, #16]
 8009b6e:	e001      	b.n	8009b74 <osSignalWait+0x80>
    }
    else  ret.status =  osEventSignal;
 8009b70:	2308      	movs	r3, #8
 8009b72:	613b      	str	r3, [r7, #16]
  (void) millisec;
	
  ret.status =  osErrorOS;	/* Task Notification not supported */
#endif
  
  return ret;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	461c      	mov	r4, r3
 8009b78:	f107 0310 	add.w	r3, r7, #16
 8009b7c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009b80:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009b84:	68f8      	ldr	r0, [r7, #12]
 8009b86:	3724      	adds	r7, #36	; 0x24
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd90      	pop	{r4, r7, pc}

08009b8c <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b086      	sub	sp, #24
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	685b      	ldr	r3, [r3, #4]
 8009b98:	3303      	adds	r3, #3
 8009b9a:	f023 0303 	bic.w	r3, r3, #3
 8009b9e:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8009ba0:	2014      	movs	r0, #20
 8009ba2:	f000 fa29 	bl	8009ff8 <pvPortMalloc>
 8009ba6:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d046      	beq.n	8009c3c <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681a      	ldr	r2, [r3, #0]
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8009bb6:	68fa      	ldr	r2, [r7, #12]
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f000 fa16 	bl	8009ff8 <pvPortMalloc>
 8009bcc:	4602      	mov	r2, r0
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	685b      	ldr	r3, [r3, #4]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d02b      	beq.n	8009c32 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	68fa      	ldr	r2, [r7, #12]
 8009be0:	fb02 f303 	mul.w	r3, r2, r3
 8009be4:	4618      	mov	r0, r3
 8009be6:	f000 fa07 	bl	8009ff8 <pvPortMalloc>
 8009bea:	4602      	mov	r2, r0
 8009bec:	697b      	ldr	r3, [r7, #20]
 8009bee:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d011      	beq.n	8009c1c <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	613b      	str	r3, [r7, #16]
 8009bfc:	e008      	b.n	8009c10 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	685a      	ldr	r2, [r3, #4]
 8009c02:	693b      	ldr	r3, [r7, #16]
 8009c04:	4413      	add	r3, r2
 8009c06:	2200      	movs	r2, #0
 8009c08:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	3301      	adds	r3, #1
 8009c0e:	613b      	str	r3, [r7, #16]
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	693a      	ldr	r2, [r7, #16]
 8009c16:	429a      	cmp	r2, r3
 8009c18:	d3f1      	bcc.n	8009bfe <osPoolCreate+0x72>
 8009c1a:	e00f      	b.n	8009c3c <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	685b      	ldr	r3, [r3, #4]
 8009c20:	4618      	mov	r0, r3
 8009c22:	f000 fab5 	bl	800a190 <vPortFree>
        vPortFree(thePool);
 8009c26:	6978      	ldr	r0, [r7, #20]
 8009c28:	f000 fab2 	bl	800a190 <vPortFree>
        thePool = NULL;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	617b      	str	r3, [r7, #20]
 8009c30:	e004      	b.n	8009c3c <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8009c32:	6978      	ldr	r0, [r7, #20]
 8009c34:	f000 faac 	bl	800a190 <vPortFree>
      thePool = NULL;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8009c3c:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3718      	adds	r7, #24
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}

08009c46 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8009c46:	b580      	push	{r7, lr}
 8009c48:	b08a      	sub	sp, #40	; 0x28
 8009c4a:	af00      	add	r7, sp, #0
 8009c4c:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 8009c52:	2300      	movs	r3, #0
 8009c54:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8009c56:	f7ff fe93 	bl	8009980 <inHandlerMode>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d00e      	beq.n	8009c7e <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009c60:	f3ef 8211 	mrs	r2, BASEPRI
 8009c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c68:	f383 8811 	msr	BASEPRI, r3
 8009c6c:	f3bf 8f6f 	isb	sy
 8009c70:	f3bf 8f4f 	dsb	sy
 8009c74:	617a      	str	r2, [r7, #20]
 8009c76:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009c78:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8009c7a:	627b      	str	r3, [r7, #36]	; 0x24
 8009c7c:	e001      	b.n	8009c82 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8009c7e:	f000 fd89 	bl	800a794 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8009c82:	2300      	movs	r3, #0
 8009c84:	61fb      	str	r3, [r7, #28]
 8009c86:	e029      	b.n	8009cdc <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	691a      	ldr	r2, [r3, #16]
 8009c8c:	69fb      	ldr	r3, [r7, #28]
 8009c8e:	4413      	add	r3, r2
 8009c90:	687a      	ldr	r2, [r7, #4]
 8009c92:	6892      	ldr	r2, [r2, #8]
 8009c94:	fbb3 f1f2 	udiv	r1, r3, r2
 8009c98:	fb01 f202 	mul.w	r2, r1, r2
 8009c9c:	1a9b      	subs	r3, r3, r2
 8009c9e:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	685a      	ldr	r2, [r3, #4]
 8009ca4:	69bb      	ldr	r3, [r7, #24]
 8009ca6:	4413      	add	r3, r2
 8009ca8:	781b      	ldrb	r3, [r3, #0]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d113      	bne.n	8009cd6 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	685a      	ldr	r2, [r3, #4]
 8009cb2:	69bb      	ldr	r3, [r7, #24]
 8009cb4:	4413      	add	r3, r2
 8009cb6:	2201      	movs	r2, #1
 8009cb8:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	4619      	mov	r1, r3
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	68db      	ldr	r3, [r3, #12]
 8009cc4:	69ba      	ldr	r2, [r7, #24]
 8009cc6:	fb02 f303 	mul.w	r3, r2, r3
 8009cca:	440b      	add	r3, r1
 8009ccc:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	69ba      	ldr	r2, [r7, #24]
 8009cd2:	611a      	str	r2, [r3, #16]
      break;
 8009cd4:	e007      	b.n	8009ce6 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 8009cd6:	69fb      	ldr	r3, [r7, #28]
 8009cd8:	3301      	adds	r3, #1
 8009cda:	61fb      	str	r3, [r7, #28]
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	689b      	ldr	r3, [r3, #8]
 8009ce0:	69fa      	ldr	r2, [r7, #28]
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	d3d0      	bcc.n	8009c88 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 8009ce6:	f7ff fe4b 	bl	8009980 <inHandlerMode>
 8009cea:	4603      	mov	r3, r0
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d005      	beq.n	8009cfc <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8009cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf2:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009cfa:	e001      	b.n	8009d00 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 8009cfc:	f000 fd7a 	bl	800a7f4 <vPortExitCritical>
  }
  
  return p;
 8009d00:	6a3b      	ldr	r3, [r7, #32]
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3728      	adds	r7, #40	; 0x28
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}

08009d0a <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 8009d0a:	b480      	push	{r7}
 8009d0c:	b085      	sub	sp, #20
 8009d0e:	af00      	add	r7, sp, #0
 8009d10:	6078      	str	r0, [r7, #4]
 8009d12:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d101      	bne.n	8009d1e <osPoolFree+0x14>
    return osErrorParameter;
 8009d1a:	2380      	movs	r3, #128	; 0x80
 8009d1c:	e030      	b.n	8009d80 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d101      	bne.n	8009d28 <osPoolFree+0x1e>
    return osErrorParameter;
 8009d24:	2380      	movs	r3, #128	; 0x80
 8009d26:	e02b      	b.n	8009d80 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	683a      	ldr	r2, [r7, #0]
 8009d2e:	429a      	cmp	r2, r3
 8009d30:	d201      	bcs.n	8009d36 <osPoolFree+0x2c>
    return osErrorParameter;
 8009d32:	2380      	movs	r3, #128	; 0x80
 8009d34:	e024      	b.n	8009d80 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	687a      	ldr	r2, [r7, #4]
 8009d3a:	6812      	ldr	r2, [r2, #0]
 8009d3c:	1a9b      	subs	r3, r3, r2
 8009d3e:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	68da      	ldr	r2, [r3, #12]
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	fbb3 f1f2 	udiv	r1, r3, r2
 8009d4a:	fb01 f202 	mul.w	r2, r1, r2
 8009d4e:	1a9b      	subs	r3, r3, r2
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d001      	beq.n	8009d58 <osPoolFree+0x4e>
    return osErrorParameter;
 8009d54:	2380      	movs	r3, #128	; 0x80
 8009d56:	e013      	b.n	8009d80 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	68db      	ldr	r3, [r3, #12]
 8009d5c:	68fa      	ldr	r2, [r7, #12]
 8009d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d62:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	689b      	ldr	r3, [r3, #8]
 8009d68:	68fa      	ldr	r2, [r7, #12]
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	d301      	bcc.n	8009d72 <osPoolFree+0x68>
    return osErrorParameter;
 8009d6e:	2380      	movs	r3, #128	; 0x80
 8009d70:	e006      	b.n	8009d80 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	685a      	ldr	r2, [r3, #4]
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	4413      	add	r3, r2
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 8009d7e:	2300      	movs	r3, #0
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3714      	adds	r7, #20
 8009d84:	46bd      	mov	sp, r7
 8009d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8a:	4770      	bx	lr

08009d8c <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 8009d8c:	b590      	push	{r4, r7, lr}
 8009d8e:	b087      	sub	sp, #28
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	60fb      	str	r3, [r7, #12]
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	685b      	ldr	r3, [r3, #4]
 8009da0:	613b      	str	r3, [r7, #16]
 8009da2:	2300      	movs	r3, #0
 8009da4:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	689c      	ldr	r4, [r3, #8]
 8009daa:	200c      	movs	r0, #12
 8009dac:	f000 f924 	bl	8009ff8 <pvPortMalloc>
 8009db0:	4603      	mov	r3, r0
 8009db2:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	689b      	ldr	r3, [r3, #8]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d101      	bne.n	8009dc2 <osMailCreate+0x36>
    return NULL;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	e038      	b.n	8009e34 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	689b      	ldr	r3, [r3, #8]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	687a      	ldr	r2, [r7, #4]
 8009dca:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6818      	ldr	r0, [r3, #0]
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	689b      	ldr	r3, [r3, #8]
 8009dd4:	681c      	ldr	r4, [r3, #0]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	2104      	movs	r1, #4
 8009dda:	f000 fe65 	bl	800aaa8 <xQueueGenericCreate>
 8009dde:	4603      	mov	r3, r0
 8009de0:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	689b      	ldr	r3, [r3, #8]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	685b      	ldr	r3, [r3, #4]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d107      	bne.n	8009dfe <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	689b      	ldr	r3, [r3, #8]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	4618      	mov	r0, r3
 8009df6:	f000 f9cb 	bl	800a190 <vPortFree>
    return NULL;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	e01a      	b.n	8009e34 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	689b      	ldr	r3, [r3, #8]
 8009e02:	681c      	ldr	r4, [r3, #0]
 8009e04:	f107 030c 	add.w	r3, r7, #12
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f7ff febf 	bl	8009b8c <osPoolCreate>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	689b      	ldr	r3, [r3, #8]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	689b      	ldr	r3, [r3, #8]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d107      	bne.n	8009e2e <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	689b      	ldr	r3, [r3, #8]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	4618      	mov	r0, r3
 8009e26:	f000 f9b3 	bl	800a190 <vPortFree>
    return NULL;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	e002      	b.n	8009e34 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	689b      	ldr	r3, [r3, #8]
 8009e32:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	371c      	adds	r7, #28
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd90      	pop	{r4, r7, pc}

08009e3c <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b084      	sub	sp, #16
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d101      	bne.n	8009e50 <osMailAlloc+0x14>
    return NULL;
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	e006      	b.n	8009e5e <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	689b      	ldr	r3, [r3, #8]
 8009e54:	4618      	mov	r0, r3
 8009e56:	f7ff fef6 	bl	8009c46 <osPoolAlloc>
 8009e5a:	60f8      	str	r0, [r7, #12]
  
  return p;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	3710      	adds	r7, #16
 8009e62:	46bd      	mov	sp, r7
 8009e64:	bd80      	pop	{r7, pc}
	...

08009e68 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b084      	sub	sp, #16
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
 8009e70:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d101      	bne.n	8009e7c <osMailPut+0x14>
    return osErrorParameter;
 8009e78:	2380      	movs	r3, #128	; 0x80
 8009e7a:	e02c      	b.n	8009ed6 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 8009e80:	f7ff fd7e 	bl	8009980 <inHandlerMode>
 8009e84:	4603      	mov	r3, r0
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d018      	beq.n	8009ebc <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6858      	ldr	r0, [r3, #4]
 8009e8e:	f107 020c 	add.w	r2, r7, #12
 8009e92:	4639      	mov	r1, r7
 8009e94:	2300      	movs	r3, #0
 8009e96:	f000 ff5f 	bl	800ad58 <xQueueGenericSendFromISR>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	2b01      	cmp	r3, #1
 8009e9e:	d001      	beq.n	8009ea4 <osMailPut+0x3c>
      return osErrorOS;
 8009ea0:	23ff      	movs	r3, #255	; 0xff
 8009ea2:	e018      	b.n	8009ed6 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d014      	beq.n	8009ed4 <osMailPut+0x6c>
 8009eaa:	4b0d      	ldr	r3, [pc, #52]	; (8009ee0 <osMailPut+0x78>)
 8009eac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009eb0:	601a      	str	r2, [r3, #0]
 8009eb2:	f3bf 8f4f 	dsb	sy
 8009eb6:	f3bf 8f6f 	isb	sy
 8009eba:	e00b      	b.n	8009ed4 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6858      	ldr	r0, [r3, #4]
 8009ec0:	4639      	mov	r1, r7
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	f000 fe49 	bl	800ab5c <xQueueGenericSend>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	2b01      	cmp	r3, #1
 8009ece:	d001      	beq.n	8009ed4 <osMailPut+0x6c>
      return osErrorOS;
 8009ed0:	23ff      	movs	r3, #255	; 0xff
 8009ed2:	e000      	b.n	8009ed6 <osMailPut+0x6e>
    }
  }
  
  return osOK;
 8009ed4:	2300      	movs	r3, #0
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	3710      	adds	r7, #16
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}
 8009ede:	bf00      	nop
 8009ee0:	e000ed04 	.word	0xe000ed04

08009ee4 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 8009ee4:	b590      	push	{r4, r7, lr}
 8009ee6:	b08b      	sub	sp, #44	; 0x2c
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	60f8      	str	r0, [r7, #12]
 8009eec:	60b9      	str	r1, [r7, #8]
 8009eee:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d10a      	bne.n	8009f10 <osMailGet+0x2c>
    event.status = osErrorParameter;
 8009efa:	2380      	movs	r3, #128	; 0x80
 8009efc:	617b      	str	r3, [r7, #20]
    return event;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	461c      	mov	r4, r3
 8009f02:	f107 0314 	add.w	r3, r7, #20
 8009f06:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009f0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009f0e:	e056      	b.n	8009fbe <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8009f10:	2300      	movs	r3, #0
 8009f12:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8009f14:	2300      	movs	r3, #0
 8009f16:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f1e:	d103      	bne.n	8009f28 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 8009f20:	f04f 33ff 	mov.w	r3, #4294967295
 8009f24:	627b      	str	r3, [r7, #36]	; 0x24
 8009f26:	e009      	b.n	8009f3c <osMailGet+0x58>
  }
  else if (millisec != 0) {
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d006      	beq.n	8009f3c <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8009f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d101      	bne.n	8009f3c <osMailGet+0x58>
      ticks = 1;
 8009f38:	2301      	movs	r3, #1
 8009f3a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8009f3c:	f7ff fd20 	bl	8009980 <inHandlerMode>
 8009f40:	4603      	mov	r3, r0
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d01d      	beq.n	8009f82 <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	6858      	ldr	r0, [r3, #4]
 8009f4a:	f107 0220 	add.w	r2, r7, #32
 8009f4e:	f107 0314 	add.w	r3, r7, #20
 8009f52:	3304      	adds	r3, #4
 8009f54:	4619      	mov	r1, r3
 8009f56:	f001 f87b 	bl	800b050 <xQueueReceiveFromISR>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	2b01      	cmp	r3, #1
 8009f5e:	d102      	bne.n	8009f66 <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 8009f60:	2320      	movs	r3, #32
 8009f62:	617b      	str	r3, [r7, #20]
 8009f64:	e001      	b.n	8009f6a <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 8009f66:	2300      	movs	r3, #0
 8009f68:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009f6a:	6a3b      	ldr	r3, [r7, #32]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d01e      	beq.n	8009fae <osMailGet+0xca>
 8009f70:	4b15      	ldr	r3, [pc, #84]	; (8009fc8 <osMailGet+0xe4>)
 8009f72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f76:	601a      	str	r2, [r3, #0]
 8009f78:	f3bf 8f4f 	dsb	sy
 8009f7c:	f3bf 8f6f 	isb	sy
 8009f80:	e015      	b.n	8009fae <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 8009f82:	68bb      	ldr	r3, [r7, #8]
 8009f84:	6858      	ldr	r0, [r3, #4]
 8009f86:	f107 0314 	add.w	r3, r7, #20
 8009f8a:	3304      	adds	r3, #4
 8009f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f8e:	4619      	mov	r1, r3
 8009f90:	f000 ff7e 	bl	800ae90 <xQueueReceive>
 8009f94:	4603      	mov	r3, r0
 8009f96:	2b01      	cmp	r3, #1
 8009f98:	d102      	bne.n	8009fa0 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 8009f9a:	2320      	movs	r3, #32
 8009f9c:	617b      	str	r3, [r7, #20]
 8009f9e:	e006      	b.n	8009fae <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8009fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d101      	bne.n	8009faa <osMailGet+0xc6>
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	e000      	b.n	8009fac <osMailGet+0xc8>
 8009faa:	2340      	movs	r3, #64	; 0x40
 8009fac:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	461c      	mov	r4, r3
 8009fb2:	f107 0314 	add.w	r3, r7, #20
 8009fb6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009fba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009fbe:	68f8      	ldr	r0, [r7, #12]
 8009fc0:	372c      	adds	r7, #44	; 0x2c
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd90      	pop	{r4, r7, pc}
 8009fc6:	bf00      	nop
 8009fc8:	e000ed04 	.word	0xe000ed04

08009fcc <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b082      	sub	sp, #8
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d101      	bne.n	8009fe0 <osMailFree+0x14>
    return osErrorParameter;
 8009fdc:	2380      	movs	r3, #128	; 0x80
 8009fde:	e006      	b.n	8009fee <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	689b      	ldr	r3, [r3, #8]
 8009fe4:	6839      	ldr	r1, [r7, #0]
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f7ff fe8f 	bl	8009d0a <osPoolFree>
 8009fec:	4603      	mov	r3, r0
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3708      	adds	r7, #8
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}
	...

08009ff8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b08a      	sub	sp, #40	; 0x28
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a000:	2300      	movs	r3, #0
 800a002:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a004:	f001 fbdc 	bl	800b7c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a008:	4b5b      	ldr	r3, [pc, #364]	; (800a178 <pvPortMalloc+0x180>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d101      	bne.n	800a014 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a010:	f000 f920 	bl	800a254 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a014:	4b59      	ldr	r3, [pc, #356]	; (800a17c <pvPortMalloc+0x184>)
 800a016:	681a      	ldr	r2, [r3, #0]
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	4013      	ands	r3, r2
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	f040 8093 	bne.w	800a148 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d01d      	beq.n	800a064 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a028:	2208      	movs	r2, #8
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	4413      	add	r3, r2
 800a02e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f003 0307 	and.w	r3, r3, #7
 800a036:	2b00      	cmp	r3, #0
 800a038:	d014      	beq.n	800a064 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f023 0307 	bic.w	r3, r3, #7
 800a040:	3308      	adds	r3, #8
 800a042:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f003 0307 	and.w	r3, r3, #7
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d00a      	beq.n	800a064 <pvPortMalloc+0x6c>
	__asm volatile
 800a04e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a052:	f383 8811 	msr	BASEPRI, r3
 800a056:	f3bf 8f6f 	isb	sy
 800a05a:	f3bf 8f4f 	dsb	sy
 800a05e:	617b      	str	r3, [r7, #20]
}
 800a060:	bf00      	nop
 800a062:	e7fe      	b.n	800a062 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d06e      	beq.n	800a148 <pvPortMalloc+0x150>
 800a06a:	4b45      	ldr	r3, [pc, #276]	; (800a180 <pvPortMalloc+0x188>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	687a      	ldr	r2, [r7, #4]
 800a070:	429a      	cmp	r2, r3
 800a072:	d869      	bhi.n	800a148 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a074:	4b43      	ldr	r3, [pc, #268]	; (800a184 <pvPortMalloc+0x18c>)
 800a076:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a078:	4b42      	ldr	r3, [pc, #264]	; (800a184 <pvPortMalloc+0x18c>)
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a07e:	e004      	b.n	800a08a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a082:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a08c:	685b      	ldr	r3, [r3, #4]
 800a08e:	687a      	ldr	r2, [r7, #4]
 800a090:	429a      	cmp	r2, r3
 800a092:	d903      	bls.n	800a09c <pvPortMalloc+0xa4>
 800a094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d1f1      	bne.n	800a080 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a09c:	4b36      	ldr	r3, [pc, #216]	; (800a178 <pvPortMalloc+0x180>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0a2:	429a      	cmp	r2, r3
 800a0a4:	d050      	beq.n	800a148 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a0a6:	6a3b      	ldr	r3, [r7, #32]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	2208      	movs	r2, #8
 800a0ac:	4413      	add	r3, r2
 800a0ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b2:	681a      	ldr	r2, [r3, #0]
 800a0b4:	6a3b      	ldr	r3, [r7, #32]
 800a0b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a0b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ba:	685a      	ldr	r2, [r3, #4]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	1ad2      	subs	r2, r2, r3
 800a0c0:	2308      	movs	r3, #8
 800a0c2:	005b      	lsls	r3, r3, #1
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d91f      	bls.n	800a108 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a0c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	4413      	add	r3, r2
 800a0ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a0d0:	69bb      	ldr	r3, [r7, #24]
 800a0d2:	f003 0307 	and.w	r3, r3, #7
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d00a      	beq.n	800a0f0 <pvPortMalloc+0xf8>
	__asm volatile
 800a0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0de:	f383 8811 	msr	BASEPRI, r3
 800a0e2:	f3bf 8f6f 	isb	sy
 800a0e6:	f3bf 8f4f 	dsb	sy
 800a0ea:	613b      	str	r3, [r7, #16]
}
 800a0ec:	bf00      	nop
 800a0ee:	e7fe      	b.n	800a0ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f2:	685a      	ldr	r2, [r3, #4]
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	1ad2      	subs	r2, r2, r3
 800a0f8:	69bb      	ldr	r3, [r7, #24]
 800a0fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0fe:	687a      	ldr	r2, [r7, #4]
 800a100:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a102:	69b8      	ldr	r0, [r7, #24]
 800a104:	f000 f908 	bl	800a318 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a108:	4b1d      	ldr	r3, [pc, #116]	; (800a180 <pvPortMalloc+0x188>)
 800a10a:	681a      	ldr	r2, [r3, #0]
 800a10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a10e:	685b      	ldr	r3, [r3, #4]
 800a110:	1ad3      	subs	r3, r2, r3
 800a112:	4a1b      	ldr	r2, [pc, #108]	; (800a180 <pvPortMalloc+0x188>)
 800a114:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a116:	4b1a      	ldr	r3, [pc, #104]	; (800a180 <pvPortMalloc+0x188>)
 800a118:	681a      	ldr	r2, [r3, #0]
 800a11a:	4b1b      	ldr	r3, [pc, #108]	; (800a188 <pvPortMalloc+0x190>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	429a      	cmp	r2, r3
 800a120:	d203      	bcs.n	800a12a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a122:	4b17      	ldr	r3, [pc, #92]	; (800a180 <pvPortMalloc+0x188>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	4a18      	ldr	r2, [pc, #96]	; (800a188 <pvPortMalloc+0x190>)
 800a128:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a12c:	685a      	ldr	r2, [r3, #4]
 800a12e:	4b13      	ldr	r3, [pc, #76]	; (800a17c <pvPortMalloc+0x184>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	431a      	orrs	r2, r3
 800a134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a136:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a13a:	2200      	movs	r2, #0
 800a13c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a13e:	4b13      	ldr	r3, [pc, #76]	; (800a18c <pvPortMalloc+0x194>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	3301      	adds	r3, #1
 800a144:	4a11      	ldr	r2, [pc, #68]	; (800a18c <pvPortMalloc+0x194>)
 800a146:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a148:	f001 fb48 	bl	800b7dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a14c:	69fb      	ldr	r3, [r7, #28]
 800a14e:	f003 0307 	and.w	r3, r3, #7
 800a152:	2b00      	cmp	r3, #0
 800a154:	d00a      	beq.n	800a16c <pvPortMalloc+0x174>
	__asm volatile
 800a156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a15a:	f383 8811 	msr	BASEPRI, r3
 800a15e:	f3bf 8f6f 	isb	sy
 800a162:	f3bf 8f4f 	dsb	sy
 800a166:	60fb      	str	r3, [r7, #12]
}
 800a168:	bf00      	nop
 800a16a:	e7fe      	b.n	800a16a <pvPortMalloc+0x172>
	return pvReturn;
 800a16c:	69fb      	ldr	r3, [r7, #28]
}
 800a16e:	4618      	mov	r0, r3
 800a170:	3728      	adds	r7, #40	; 0x28
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}
 800a176:	bf00      	nop
 800a178:	20004364 	.word	0x20004364
 800a17c:	20004378 	.word	0x20004378
 800a180:	20004368 	.word	0x20004368
 800a184:	2000435c 	.word	0x2000435c
 800a188:	2000436c 	.word	0x2000436c
 800a18c:	20004370 	.word	0x20004370

0800a190 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b086      	sub	sp, #24
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d04d      	beq.n	800a23e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a1a2:	2308      	movs	r3, #8
 800a1a4:	425b      	negs	r3, r3
 800a1a6:	697a      	ldr	r2, [r7, #20]
 800a1a8:	4413      	add	r3, r2
 800a1aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a1b0:	693b      	ldr	r3, [r7, #16]
 800a1b2:	685a      	ldr	r2, [r3, #4]
 800a1b4:	4b24      	ldr	r3, [pc, #144]	; (800a248 <vPortFree+0xb8>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4013      	ands	r3, r2
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d10a      	bne.n	800a1d4 <vPortFree+0x44>
	__asm volatile
 800a1be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c2:	f383 8811 	msr	BASEPRI, r3
 800a1c6:	f3bf 8f6f 	isb	sy
 800a1ca:	f3bf 8f4f 	dsb	sy
 800a1ce:	60fb      	str	r3, [r7, #12]
}
 800a1d0:	bf00      	nop
 800a1d2:	e7fe      	b.n	800a1d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a1d4:	693b      	ldr	r3, [r7, #16]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d00a      	beq.n	800a1f2 <vPortFree+0x62>
	__asm volatile
 800a1dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1e0:	f383 8811 	msr	BASEPRI, r3
 800a1e4:	f3bf 8f6f 	isb	sy
 800a1e8:	f3bf 8f4f 	dsb	sy
 800a1ec:	60bb      	str	r3, [r7, #8]
}
 800a1ee:	bf00      	nop
 800a1f0:	e7fe      	b.n	800a1f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a1f2:	693b      	ldr	r3, [r7, #16]
 800a1f4:	685a      	ldr	r2, [r3, #4]
 800a1f6:	4b14      	ldr	r3, [pc, #80]	; (800a248 <vPortFree+0xb8>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	4013      	ands	r3, r2
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d01e      	beq.n	800a23e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d11a      	bne.n	800a23e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	685a      	ldr	r2, [r3, #4]
 800a20c:	4b0e      	ldr	r3, [pc, #56]	; (800a248 <vPortFree+0xb8>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	43db      	mvns	r3, r3
 800a212:	401a      	ands	r2, r3
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a218:	f001 fad2 	bl	800b7c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	685a      	ldr	r2, [r3, #4]
 800a220:	4b0a      	ldr	r3, [pc, #40]	; (800a24c <vPortFree+0xbc>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	4413      	add	r3, r2
 800a226:	4a09      	ldr	r2, [pc, #36]	; (800a24c <vPortFree+0xbc>)
 800a228:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a22a:	6938      	ldr	r0, [r7, #16]
 800a22c:	f000 f874 	bl	800a318 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a230:	4b07      	ldr	r3, [pc, #28]	; (800a250 <vPortFree+0xc0>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	3301      	adds	r3, #1
 800a236:	4a06      	ldr	r2, [pc, #24]	; (800a250 <vPortFree+0xc0>)
 800a238:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a23a:	f001 facf 	bl	800b7dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a23e:	bf00      	nop
 800a240:	3718      	adds	r7, #24
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}
 800a246:	bf00      	nop
 800a248:	20004378 	.word	0x20004378
 800a24c:	20004368 	.word	0x20004368
 800a250:	20004374 	.word	0x20004374

0800a254 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a254:	b480      	push	{r7}
 800a256:	b085      	sub	sp, #20
 800a258:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a25a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a25e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a260:	4b27      	ldr	r3, [pc, #156]	; (800a300 <prvHeapInit+0xac>)
 800a262:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	f003 0307 	and.w	r3, r3, #7
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d00c      	beq.n	800a288 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	3307      	adds	r3, #7
 800a272:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	f023 0307 	bic.w	r3, r3, #7
 800a27a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a27c:	68ba      	ldr	r2, [r7, #8]
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	1ad3      	subs	r3, r2, r3
 800a282:	4a1f      	ldr	r2, [pc, #124]	; (800a300 <prvHeapInit+0xac>)
 800a284:	4413      	add	r3, r2
 800a286:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a28c:	4a1d      	ldr	r2, [pc, #116]	; (800a304 <prvHeapInit+0xb0>)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a292:	4b1c      	ldr	r3, [pc, #112]	; (800a304 <prvHeapInit+0xb0>)
 800a294:	2200      	movs	r2, #0
 800a296:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	68ba      	ldr	r2, [r7, #8]
 800a29c:	4413      	add	r3, r2
 800a29e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a2a0:	2208      	movs	r2, #8
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	1a9b      	subs	r3, r3, r2
 800a2a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f023 0307 	bic.w	r3, r3, #7
 800a2ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	4a15      	ldr	r2, [pc, #84]	; (800a308 <prvHeapInit+0xb4>)
 800a2b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a2b6:	4b14      	ldr	r3, [pc, #80]	; (800a308 <prvHeapInit+0xb4>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a2be:	4b12      	ldr	r3, [pc, #72]	; (800a308 <prvHeapInit+0xb4>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	68fa      	ldr	r2, [r7, #12]
 800a2ce:	1ad2      	subs	r2, r2, r3
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a2d4:	4b0c      	ldr	r3, [pc, #48]	; (800a308 <prvHeapInit+0xb4>)
 800a2d6:	681a      	ldr	r2, [r3, #0]
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	685b      	ldr	r3, [r3, #4]
 800a2e0:	4a0a      	ldr	r2, [pc, #40]	; (800a30c <prvHeapInit+0xb8>)
 800a2e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	685b      	ldr	r3, [r3, #4]
 800a2e8:	4a09      	ldr	r2, [pc, #36]	; (800a310 <prvHeapInit+0xbc>)
 800a2ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a2ec:	4b09      	ldr	r3, [pc, #36]	; (800a314 <prvHeapInit+0xc0>)
 800a2ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a2f2:	601a      	str	r2, [r3, #0]
}
 800a2f4:	bf00      	nop
 800a2f6:	3714      	adds	r7, #20
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fe:	4770      	bx	lr
 800a300:	2000075c 	.word	0x2000075c
 800a304:	2000435c 	.word	0x2000435c
 800a308:	20004364 	.word	0x20004364
 800a30c:	2000436c 	.word	0x2000436c
 800a310:	20004368 	.word	0x20004368
 800a314:	20004378 	.word	0x20004378

0800a318 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a318:	b480      	push	{r7}
 800a31a:	b085      	sub	sp, #20
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a320:	4b28      	ldr	r3, [pc, #160]	; (800a3c4 <prvInsertBlockIntoFreeList+0xac>)
 800a322:	60fb      	str	r3, [r7, #12]
 800a324:	e002      	b.n	800a32c <prvInsertBlockIntoFreeList+0x14>
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	60fb      	str	r3, [r7, #12]
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	687a      	ldr	r2, [r7, #4]
 800a332:	429a      	cmp	r2, r3
 800a334:	d8f7      	bhi.n	800a326 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	685b      	ldr	r3, [r3, #4]
 800a33e:	68ba      	ldr	r2, [r7, #8]
 800a340:	4413      	add	r3, r2
 800a342:	687a      	ldr	r2, [r7, #4]
 800a344:	429a      	cmp	r2, r3
 800a346:	d108      	bne.n	800a35a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	685a      	ldr	r2, [r3, #4]
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	685b      	ldr	r3, [r3, #4]
 800a350:	441a      	add	r2, r3
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	685b      	ldr	r3, [r3, #4]
 800a362:	68ba      	ldr	r2, [r7, #8]
 800a364:	441a      	add	r2, r3
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	429a      	cmp	r2, r3
 800a36c:	d118      	bne.n	800a3a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	681a      	ldr	r2, [r3, #0]
 800a372:	4b15      	ldr	r3, [pc, #84]	; (800a3c8 <prvInsertBlockIntoFreeList+0xb0>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	429a      	cmp	r2, r3
 800a378:	d00d      	beq.n	800a396 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	685a      	ldr	r2, [r3, #4]
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	441a      	add	r2, r3
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	681a      	ldr	r2, [r3, #0]
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	601a      	str	r2, [r3, #0]
 800a394:	e008      	b.n	800a3a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a396:	4b0c      	ldr	r3, [pc, #48]	; (800a3c8 <prvInsertBlockIntoFreeList+0xb0>)
 800a398:	681a      	ldr	r2, [r3, #0]
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	601a      	str	r2, [r3, #0]
 800a39e:	e003      	b.n	800a3a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	681a      	ldr	r2, [r3, #0]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a3a8:	68fa      	ldr	r2, [r7, #12]
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	429a      	cmp	r2, r3
 800a3ae:	d002      	beq.n	800a3b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	687a      	ldr	r2, [r7, #4]
 800a3b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a3b6:	bf00      	nop
 800a3b8:	3714      	adds	r7, #20
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c0:	4770      	bx	lr
 800a3c2:	bf00      	nop
 800a3c4:	2000435c 	.word	0x2000435c
 800a3c8:	20004364 	.word	0x20004364

0800a3cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a3cc:	b480      	push	{r7}
 800a3ce:	b083      	sub	sp, #12
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f103 0208 	add.w	r2, r3, #8
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f04f 32ff 	mov.w	r2, #4294967295
 800a3e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f103 0208 	add.w	r2, r3, #8
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f103 0208 	add.w	r2, r3, #8
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a400:	bf00      	nop
 800a402:	370c      	adds	r7, #12
 800a404:	46bd      	mov	sp, r7
 800a406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40a:	4770      	bx	lr

0800a40c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a40c:	b480      	push	{r7}
 800a40e:	b083      	sub	sp, #12
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	2200      	movs	r2, #0
 800a418:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a41a:	bf00      	nop
 800a41c:	370c      	adds	r7, #12
 800a41e:	46bd      	mov	sp, r7
 800a420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a424:	4770      	bx	lr

0800a426 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a426:	b480      	push	{r7}
 800a428:	b085      	sub	sp, #20
 800a42a:	af00      	add	r7, sp, #0
 800a42c:	6078      	str	r0, [r7, #4]
 800a42e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	685b      	ldr	r3, [r3, #4]
 800a434:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	68fa      	ldr	r2, [r7, #12]
 800a43a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	689a      	ldr	r2, [r3, #8]
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	689b      	ldr	r3, [r3, #8]
 800a448:	683a      	ldr	r2, [r7, #0]
 800a44a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	683a      	ldr	r2, [r7, #0]
 800a450:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	687a      	ldr	r2, [r7, #4]
 800a456:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	1c5a      	adds	r2, r3, #1
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	601a      	str	r2, [r3, #0]
}
 800a462:	bf00      	nop
 800a464:	3714      	adds	r7, #20
 800a466:	46bd      	mov	sp, r7
 800a468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46c:	4770      	bx	lr

0800a46e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a46e:	b480      	push	{r7}
 800a470:	b085      	sub	sp, #20
 800a472:	af00      	add	r7, sp, #0
 800a474:	6078      	str	r0, [r7, #4]
 800a476:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a484:	d103      	bne.n	800a48e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	691b      	ldr	r3, [r3, #16]
 800a48a:	60fb      	str	r3, [r7, #12]
 800a48c:	e00c      	b.n	800a4a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	3308      	adds	r3, #8
 800a492:	60fb      	str	r3, [r7, #12]
 800a494:	e002      	b.n	800a49c <vListInsert+0x2e>
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	685b      	ldr	r3, [r3, #4]
 800a49a:	60fb      	str	r3, [r7, #12]
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	685b      	ldr	r3, [r3, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	68ba      	ldr	r2, [r7, #8]
 800a4a4:	429a      	cmp	r2, r3
 800a4a6:	d2f6      	bcs.n	800a496 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	685a      	ldr	r2, [r3, #4]
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	685b      	ldr	r3, [r3, #4]
 800a4b4:	683a      	ldr	r2, [r7, #0]
 800a4b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	68fa      	ldr	r2, [r7, #12]
 800a4bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	683a      	ldr	r2, [r7, #0]
 800a4c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	687a      	ldr	r2, [r7, #4]
 800a4c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	1c5a      	adds	r2, r3, #1
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	601a      	str	r2, [r3, #0]
}
 800a4d4:	bf00      	nop
 800a4d6:	3714      	adds	r7, #20
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr

0800a4e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b085      	sub	sp, #20
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	691b      	ldr	r3, [r3, #16]
 800a4ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	685b      	ldr	r3, [r3, #4]
 800a4f2:	687a      	ldr	r2, [r7, #4]
 800a4f4:	6892      	ldr	r2, [r2, #8]
 800a4f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	689b      	ldr	r3, [r3, #8]
 800a4fc:	687a      	ldr	r2, [r7, #4]
 800a4fe:	6852      	ldr	r2, [r2, #4]
 800a500:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	685b      	ldr	r3, [r3, #4]
 800a506:	687a      	ldr	r2, [r7, #4]
 800a508:	429a      	cmp	r2, r3
 800a50a:	d103      	bne.n	800a514 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	689a      	ldr	r2, [r3, #8]
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2200      	movs	r2, #0
 800a518:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	1e5a      	subs	r2, r3, #1
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	681b      	ldr	r3, [r3, #0]
}
 800a528:	4618      	mov	r0, r3
 800a52a:	3714      	adds	r7, #20
 800a52c:	46bd      	mov	sp, r7
 800a52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a532:	4770      	bx	lr

0800a534 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a534:	b480      	push	{r7}
 800a536:	b085      	sub	sp, #20
 800a538:	af00      	add	r7, sp, #0
 800a53a:	60f8      	str	r0, [r7, #12]
 800a53c:	60b9      	str	r1, [r7, #8]
 800a53e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	3b04      	subs	r3, #4
 800a544:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a54c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	3b04      	subs	r3, #4
 800a552:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	f023 0201 	bic.w	r2, r3, #1
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	3b04      	subs	r3, #4
 800a562:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a564:	4a0c      	ldr	r2, [pc, #48]	; (800a598 <pxPortInitialiseStack+0x64>)
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	3b14      	subs	r3, #20
 800a56e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a570:	687a      	ldr	r2, [r7, #4]
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	3b04      	subs	r3, #4
 800a57a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	f06f 0202 	mvn.w	r2, #2
 800a582:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	3b20      	subs	r3, #32
 800a588:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a58a:	68fb      	ldr	r3, [r7, #12]
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	3714      	adds	r7, #20
 800a590:	46bd      	mov	sp, r7
 800a592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a596:	4770      	bx	lr
 800a598:	0800a59d 	.word	0x0800a59d

0800a59c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a59c:	b480      	push	{r7}
 800a59e:	b085      	sub	sp, #20
 800a5a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a5a6:	4b12      	ldr	r3, [pc, #72]	; (800a5f0 <prvTaskExitError+0x54>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5ae:	d00a      	beq.n	800a5c6 <prvTaskExitError+0x2a>
	__asm volatile
 800a5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b4:	f383 8811 	msr	BASEPRI, r3
 800a5b8:	f3bf 8f6f 	isb	sy
 800a5bc:	f3bf 8f4f 	dsb	sy
 800a5c0:	60fb      	str	r3, [r7, #12]
}
 800a5c2:	bf00      	nop
 800a5c4:	e7fe      	b.n	800a5c4 <prvTaskExitError+0x28>
	__asm volatile
 800a5c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ca:	f383 8811 	msr	BASEPRI, r3
 800a5ce:	f3bf 8f6f 	isb	sy
 800a5d2:	f3bf 8f4f 	dsb	sy
 800a5d6:	60bb      	str	r3, [r7, #8]
}
 800a5d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a5da:	bf00      	nop
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d0fc      	beq.n	800a5dc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a5e2:	bf00      	nop
 800a5e4:	bf00      	nop
 800a5e6:	3714      	adds	r7, #20
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ee:	4770      	bx	lr
 800a5f0:	20000088 	.word	0x20000088
	...

0800a600 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a600:	4b07      	ldr	r3, [pc, #28]	; (800a620 <pxCurrentTCBConst2>)
 800a602:	6819      	ldr	r1, [r3, #0]
 800a604:	6808      	ldr	r0, [r1, #0]
 800a606:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a60a:	f380 8809 	msr	PSP, r0
 800a60e:	f3bf 8f6f 	isb	sy
 800a612:	f04f 0000 	mov.w	r0, #0
 800a616:	f380 8811 	msr	BASEPRI, r0
 800a61a:	4770      	bx	lr
 800a61c:	f3af 8000 	nop.w

0800a620 <pxCurrentTCBConst2>:
 800a620:	20004384 	.word	0x20004384
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a624:	bf00      	nop
 800a626:	bf00      	nop

0800a628 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a628:	4808      	ldr	r0, [pc, #32]	; (800a64c <prvPortStartFirstTask+0x24>)
 800a62a:	6800      	ldr	r0, [r0, #0]
 800a62c:	6800      	ldr	r0, [r0, #0]
 800a62e:	f380 8808 	msr	MSP, r0
 800a632:	f04f 0000 	mov.w	r0, #0
 800a636:	f380 8814 	msr	CONTROL, r0
 800a63a:	b662      	cpsie	i
 800a63c:	b661      	cpsie	f
 800a63e:	f3bf 8f4f 	dsb	sy
 800a642:	f3bf 8f6f 	isb	sy
 800a646:	df00      	svc	0
 800a648:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a64a:	bf00      	nop
 800a64c:	e000ed08 	.word	0xe000ed08

0800a650 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b086      	sub	sp, #24
 800a654:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a656:	4b46      	ldr	r3, [pc, #280]	; (800a770 <xPortStartScheduler+0x120>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	4a46      	ldr	r2, [pc, #280]	; (800a774 <xPortStartScheduler+0x124>)
 800a65c:	4293      	cmp	r3, r2
 800a65e:	d10a      	bne.n	800a676 <xPortStartScheduler+0x26>
	__asm volatile
 800a660:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a664:	f383 8811 	msr	BASEPRI, r3
 800a668:	f3bf 8f6f 	isb	sy
 800a66c:	f3bf 8f4f 	dsb	sy
 800a670:	613b      	str	r3, [r7, #16]
}
 800a672:	bf00      	nop
 800a674:	e7fe      	b.n	800a674 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a676:	4b3e      	ldr	r3, [pc, #248]	; (800a770 <xPortStartScheduler+0x120>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	4a3f      	ldr	r2, [pc, #252]	; (800a778 <xPortStartScheduler+0x128>)
 800a67c:	4293      	cmp	r3, r2
 800a67e:	d10a      	bne.n	800a696 <xPortStartScheduler+0x46>
	__asm volatile
 800a680:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a684:	f383 8811 	msr	BASEPRI, r3
 800a688:	f3bf 8f6f 	isb	sy
 800a68c:	f3bf 8f4f 	dsb	sy
 800a690:	60fb      	str	r3, [r7, #12]
}
 800a692:	bf00      	nop
 800a694:	e7fe      	b.n	800a694 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a696:	4b39      	ldr	r3, [pc, #228]	; (800a77c <xPortStartScheduler+0x12c>)
 800a698:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a69a:	697b      	ldr	r3, [r7, #20]
 800a69c:	781b      	ldrb	r3, [r3, #0]
 800a69e:	b2db      	uxtb	r3, r3
 800a6a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	22ff      	movs	r2, #255	; 0xff
 800a6a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a6a8:	697b      	ldr	r3, [r7, #20]
 800a6aa:	781b      	ldrb	r3, [r3, #0]
 800a6ac:	b2db      	uxtb	r3, r3
 800a6ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a6b0:	78fb      	ldrb	r3, [r7, #3]
 800a6b2:	b2db      	uxtb	r3, r3
 800a6b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a6b8:	b2da      	uxtb	r2, r3
 800a6ba:	4b31      	ldr	r3, [pc, #196]	; (800a780 <xPortStartScheduler+0x130>)
 800a6bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a6be:	4b31      	ldr	r3, [pc, #196]	; (800a784 <xPortStartScheduler+0x134>)
 800a6c0:	2207      	movs	r2, #7
 800a6c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a6c4:	e009      	b.n	800a6da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a6c6:	4b2f      	ldr	r3, [pc, #188]	; (800a784 <xPortStartScheduler+0x134>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	3b01      	subs	r3, #1
 800a6cc:	4a2d      	ldr	r2, [pc, #180]	; (800a784 <xPortStartScheduler+0x134>)
 800a6ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a6d0:	78fb      	ldrb	r3, [r7, #3]
 800a6d2:	b2db      	uxtb	r3, r3
 800a6d4:	005b      	lsls	r3, r3, #1
 800a6d6:	b2db      	uxtb	r3, r3
 800a6d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a6da:	78fb      	ldrb	r3, [r7, #3]
 800a6dc:	b2db      	uxtb	r3, r3
 800a6de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6e2:	2b80      	cmp	r3, #128	; 0x80
 800a6e4:	d0ef      	beq.n	800a6c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a6e6:	4b27      	ldr	r3, [pc, #156]	; (800a784 <xPortStartScheduler+0x134>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f1c3 0307 	rsb	r3, r3, #7
 800a6ee:	2b04      	cmp	r3, #4
 800a6f0:	d00a      	beq.n	800a708 <xPortStartScheduler+0xb8>
	__asm volatile
 800a6f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6f6:	f383 8811 	msr	BASEPRI, r3
 800a6fa:	f3bf 8f6f 	isb	sy
 800a6fe:	f3bf 8f4f 	dsb	sy
 800a702:	60bb      	str	r3, [r7, #8]
}
 800a704:	bf00      	nop
 800a706:	e7fe      	b.n	800a706 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a708:	4b1e      	ldr	r3, [pc, #120]	; (800a784 <xPortStartScheduler+0x134>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	021b      	lsls	r3, r3, #8
 800a70e:	4a1d      	ldr	r2, [pc, #116]	; (800a784 <xPortStartScheduler+0x134>)
 800a710:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a712:	4b1c      	ldr	r3, [pc, #112]	; (800a784 <xPortStartScheduler+0x134>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a71a:	4a1a      	ldr	r2, [pc, #104]	; (800a784 <xPortStartScheduler+0x134>)
 800a71c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	b2da      	uxtb	r2, r3
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a726:	4b18      	ldr	r3, [pc, #96]	; (800a788 <xPortStartScheduler+0x138>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	4a17      	ldr	r2, [pc, #92]	; (800a788 <xPortStartScheduler+0x138>)
 800a72c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a730:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a732:	4b15      	ldr	r3, [pc, #84]	; (800a788 <xPortStartScheduler+0x138>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	4a14      	ldr	r2, [pc, #80]	; (800a788 <xPortStartScheduler+0x138>)
 800a738:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a73c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a73e:	f000 f8dd 	bl	800a8fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a742:	4b12      	ldr	r3, [pc, #72]	; (800a78c <xPortStartScheduler+0x13c>)
 800a744:	2200      	movs	r2, #0
 800a746:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a748:	f000 f8fc 	bl	800a944 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a74c:	4b10      	ldr	r3, [pc, #64]	; (800a790 <xPortStartScheduler+0x140>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	4a0f      	ldr	r2, [pc, #60]	; (800a790 <xPortStartScheduler+0x140>)
 800a752:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a756:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a758:	f7ff ff66 	bl	800a628 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a75c:	f001 f992 	bl	800ba84 <vTaskSwitchContext>
	prvTaskExitError();
 800a760:	f7ff ff1c 	bl	800a59c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a764:	2300      	movs	r3, #0
}
 800a766:	4618      	mov	r0, r3
 800a768:	3718      	adds	r7, #24
 800a76a:	46bd      	mov	sp, r7
 800a76c:	bd80      	pop	{r7, pc}
 800a76e:	bf00      	nop
 800a770:	e000ed00 	.word	0xe000ed00
 800a774:	410fc271 	.word	0x410fc271
 800a778:	410fc270 	.word	0x410fc270
 800a77c:	e000e400 	.word	0xe000e400
 800a780:	2000437c 	.word	0x2000437c
 800a784:	20004380 	.word	0x20004380
 800a788:	e000ed20 	.word	0xe000ed20
 800a78c:	20000088 	.word	0x20000088
 800a790:	e000ef34 	.word	0xe000ef34

0800a794 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a794:	b480      	push	{r7}
 800a796:	b083      	sub	sp, #12
 800a798:	af00      	add	r7, sp, #0
	__asm volatile
 800a79a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a79e:	f383 8811 	msr	BASEPRI, r3
 800a7a2:	f3bf 8f6f 	isb	sy
 800a7a6:	f3bf 8f4f 	dsb	sy
 800a7aa:	607b      	str	r3, [r7, #4]
}
 800a7ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a7ae:	4b0f      	ldr	r3, [pc, #60]	; (800a7ec <vPortEnterCritical+0x58>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	3301      	adds	r3, #1
 800a7b4:	4a0d      	ldr	r2, [pc, #52]	; (800a7ec <vPortEnterCritical+0x58>)
 800a7b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a7b8:	4b0c      	ldr	r3, [pc, #48]	; (800a7ec <vPortEnterCritical+0x58>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	2b01      	cmp	r3, #1
 800a7be:	d10f      	bne.n	800a7e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a7c0:	4b0b      	ldr	r3, [pc, #44]	; (800a7f0 <vPortEnterCritical+0x5c>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	b2db      	uxtb	r3, r3
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d00a      	beq.n	800a7e0 <vPortEnterCritical+0x4c>
	__asm volatile
 800a7ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7ce:	f383 8811 	msr	BASEPRI, r3
 800a7d2:	f3bf 8f6f 	isb	sy
 800a7d6:	f3bf 8f4f 	dsb	sy
 800a7da:	603b      	str	r3, [r7, #0]
}
 800a7dc:	bf00      	nop
 800a7de:	e7fe      	b.n	800a7de <vPortEnterCritical+0x4a>
	}
}
 800a7e0:	bf00      	nop
 800a7e2:	370c      	adds	r7, #12
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ea:	4770      	bx	lr
 800a7ec:	20000088 	.word	0x20000088
 800a7f0:	e000ed04 	.word	0xe000ed04

0800a7f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b083      	sub	sp, #12
 800a7f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a7fa:	4b12      	ldr	r3, [pc, #72]	; (800a844 <vPortExitCritical+0x50>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d10a      	bne.n	800a818 <vPortExitCritical+0x24>
	__asm volatile
 800a802:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a806:	f383 8811 	msr	BASEPRI, r3
 800a80a:	f3bf 8f6f 	isb	sy
 800a80e:	f3bf 8f4f 	dsb	sy
 800a812:	607b      	str	r3, [r7, #4]
}
 800a814:	bf00      	nop
 800a816:	e7fe      	b.n	800a816 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a818:	4b0a      	ldr	r3, [pc, #40]	; (800a844 <vPortExitCritical+0x50>)
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	3b01      	subs	r3, #1
 800a81e:	4a09      	ldr	r2, [pc, #36]	; (800a844 <vPortExitCritical+0x50>)
 800a820:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a822:	4b08      	ldr	r3, [pc, #32]	; (800a844 <vPortExitCritical+0x50>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d105      	bne.n	800a836 <vPortExitCritical+0x42>
 800a82a:	2300      	movs	r3, #0
 800a82c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	f383 8811 	msr	BASEPRI, r3
}
 800a834:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a836:	bf00      	nop
 800a838:	370c      	adds	r7, #12
 800a83a:	46bd      	mov	sp, r7
 800a83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a840:	4770      	bx	lr
 800a842:	bf00      	nop
 800a844:	20000088 	.word	0x20000088
	...

0800a850 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a850:	f3ef 8009 	mrs	r0, PSP
 800a854:	f3bf 8f6f 	isb	sy
 800a858:	4b15      	ldr	r3, [pc, #84]	; (800a8b0 <pxCurrentTCBConst>)
 800a85a:	681a      	ldr	r2, [r3, #0]
 800a85c:	f01e 0f10 	tst.w	lr, #16
 800a860:	bf08      	it	eq
 800a862:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a866:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a86a:	6010      	str	r0, [r2, #0]
 800a86c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a870:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a874:	f380 8811 	msr	BASEPRI, r0
 800a878:	f3bf 8f4f 	dsb	sy
 800a87c:	f3bf 8f6f 	isb	sy
 800a880:	f001 f900 	bl	800ba84 <vTaskSwitchContext>
 800a884:	f04f 0000 	mov.w	r0, #0
 800a888:	f380 8811 	msr	BASEPRI, r0
 800a88c:	bc09      	pop	{r0, r3}
 800a88e:	6819      	ldr	r1, [r3, #0]
 800a890:	6808      	ldr	r0, [r1, #0]
 800a892:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a896:	f01e 0f10 	tst.w	lr, #16
 800a89a:	bf08      	it	eq
 800a89c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a8a0:	f380 8809 	msr	PSP, r0
 800a8a4:	f3bf 8f6f 	isb	sy
 800a8a8:	4770      	bx	lr
 800a8aa:	bf00      	nop
 800a8ac:	f3af 8000 	nop.w

0800a8b0 <pxCurrentTCBConst>:
 800a8b0:	20004384 	.word	0x20004384
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a8b4:	bf00      	nop
 800a8b6:	bf00      	nop

0800a8b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b082      	sub	sp, #8
 800a8bc:	af00      	add	r7, sp, #0
	__asm volatile
 800a8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c2:	f383 8811 	msr	BASEPRI, r3
 800a8c6:	f3bf 8f6f 	isb	sy
 800a8ca:	f3bf 8f4f 	dsb	sy
 800a8ce:	607b      	str	r3, [r7, #4]
}
 800a8d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a8d2:	f001 f81f 	bl	800b914 <xTaskIncrementTick>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d003      	beq.n	800a8e4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a8dc:	4b06      	ldr	r3, [pc, #24]	; (800a8f8 <SysTick_Handler+0x40>)
 800a8de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8e2:	601a      	str	r2, [r3, #0]
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	f383 8811 	msr	BASEPRI, r3
}
 800a8ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a8f0:	bf00      	nop
 800a8f2:	3708      	adds	r7, #8
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}
 800a8f8:	e000ed04 	.word	0xe000ed04

0800a8fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a900:	4b0b      	ldr	r3, [pc, #44]	; (800a930 <vPortSetupTimerInterrupt+0x34>)
 800a902:	2200      	movs	r2, #0
 800a904:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a906:	4b0b      	ldr	r3, [pc, #44]	; (800a934 <vPortSetupTimerInterrupt+0x38>)
 800a908:	2200      	movs	r2, #0
 800a90a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a90c:	4b0a      	ldr	r3, [pc, #40]	; (800a938 <vPortSetupTimerInterrupt+0x3c>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	4a0a      	ldr	r2, [pc, #40]	; (800a93c <vPortSetupTimerInterrupt+0x40>)
 800a912:	fba2 2303 	umull	r2, r3, r2, r3
 800a916:	099b      	lsrs	r3, r3, #6
 800a918:	4a09      	ldr	r2, [pc, #36]	; (800a940 <vPortSetupTimerInterrupt+0x44>)
 800a91a:	3b01      	subs	r3, #1
 800a91c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a91e:	4b04      	ldr	r3, [pc, #16]	; (800a930 <vPortSetupTimerInterrupt+0x34>)
 800a920:	2207      	movs	r2, #7
 800a922:	601a      	str	r2, [r3, #0]
}
 800a924:	bf00      	nop
 800a926:	46bd      	mov	sp, r7
 800a928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92c:	4770      	bx	lr
 800a92e:	bf00      	nop
 800a930:	e000e010 	.word	0xe000e010
 800a934:	e000e018 	.word	0xe000e018
 800a938:	20000000 	.word	0x20000000
 800a93c:	10624dd3 	.word	0x10624dd3
 800a940:	e000e014 	.word	0xe000e014

0800a944 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a944:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a954 <vPortEnableVFP+0x10>
 800a948:	6801      	ldr	r1, [r0, #0]
 800a94a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a94e:	6001      	str	r1, [r0, #0]
 800a950:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a952:	bf00      	nop
 800a954:	e000ed88 	.word	0xe000ed88

0800a958 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a958:	b480      	push	{r7}
 800a95a:	b085      	sub	sp, #20
 800a95c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a95e:	f3ef 8305 	mrs	r3, IPSR
 800a962:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	2b0f      	cmp	r3, #15
 800a968:	d914      	bls.n	800a994 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a96a:	4a17      	ldr	r2, [pc, #92]	; (800a9c8 <vPortValidateInterruptPriority+0x70>)
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	4413      	add	r3, r2
 800a970:	781b      	ldrb	r3, [r3, #0]
 800a972:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a974:	4b15      	ldr	r3, [pc, #84]	; (800a9cc <vPortValidateInterruptPriority+0x74>)
 800a976:	781b      	ldrb	r3, [r3, #0]
 800a978:	7afa      	ldrb	r2, [r7, #11]
 800a97a:	429a      	cmp	r2, r3
 800a97c:	d20a      	bcs.n	800a994 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a97e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a982:	f383 8811 	msr	BASEPRI, r3
 800a986:	f3bf 8f6f 	isb	sy
 800a98a:	f3bf 8f4f 	dsb	sy
 800a98e:	607b      	str	r3, [r7, #4]
}
 800a990:	bf00      	nop
 800a992:	e7fe      	b.n	800a992 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a994:	4b0e      	ldr	r3, [pc, #56]	; (800a9d0 <vPortValidateInterruptPriority+0x78>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a99c:	4b0d      	ldr	r3, [pc, #52]	; (800a9d4 <vPortValidateInterruptPriority+0x7c>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	429a      	cmp	r2, r3
 800a9a2:	d90a      	bls.n	800a9ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a9a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a8:	f383 8811 	msr	BASEPRI, r3
 800a9ac:	f3bf 8f6f 	isb	sy
 800a9b0:	f3bf 8f4f 	dsb	sy
 800a9b4:	603b      	str	r3, [r7, #0]
}
 800a9b6:	bf00      	nop
 800a9b8:	e7fe      	b.n	800a9b8 <vPortValidateInterruptPriority+0x60>
	}
 800a9ba:	bf00      	nop
 800a9bc:	3714      	adds	r7, #20
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c4:	4770      	bx	lr
 800a9c6:	bf00      	nop
 800a9c8:	e000e3f0 	.word	0xe000e3f0
 800a9cc:	2000437c 	.word	0x2000437c
 800a9d0:	e000ed0c 	.word	0xe000ed0c
 800a9d4:	20004380 	.word	0x20004380

0800a9d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b084      	sub	sp, #16
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
 800a9e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d10a      	bne.n	800aa02 <xQueueGenericReset+0x2a>
	__asm volatile
 800a9ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9f0:	f383 8811 	msr	BASEPRI, r3
 800a9f4:	f3bf 8f6f 	isb	sy
 800a9f8:	f3bf 8f4f 	dsb	sy
 800a9fc:	60bb      	str	r3, [r7, #8]
}
 800a9fe:	bf00      	nop
 800aa00:	e7fe      	b.n	800aa00 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800aa02:	f7ff fec7 	bl	800a794 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	681a      	ldr	r2, [r3, #0]
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa0e:	68f9      	ldr	r1, [r7, #12]
 800aa10:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800aa12:	fb01 f303 	mul.w	r3, r1, r3
 800aa16:	441a      	add	r2, r3
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	681a      	ldr	r2, [r3, #0]
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681a      	ldr	r2, [r3, #0]
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa32:	3b01      	subs	r3, #1
 800aa34:	68f9      	ldr	r1, [r7, #12]
 800aa36:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800aa38:	fb01 f303 	mul.w	r3, r1, r3
 800aa3c:	441a      	add	r2, r3
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	22ff      	movs	r2, #255	; 0xff
 800aa46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	22ff      	movs	r2, #255	; 0xff
 800aa4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d114      	bne.n	800aa82 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	691b      	ldr	r3, [r3, #16]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d01a      	beq.n	800aa96 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	3310      	adds	r3, #16
 800aa64:	4618      	mov	r0, r3
 800aa66:	f001 f88d 	bl	800bb84 <xTaskRemoveFromEventList>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d012      	beq.n	800aa96 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800aa70:	4b0c      	ldr	r3, [pc, #48]	; (800aaa4 <xQueueGenericReset+0xcc>)
 800aa72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa76:	601a      	str	r2, [r3, #0]
 800aa78:	f3bf 8f4f 	dsb	sy
 800aa7c:	f3bf 8f6f 	isb	sy
 800aa80:	e009      	b.n	800aa96 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	3310      	adds	r3, #16
 800aa86:	4618      	mov	r0, r3
 800aa88:	f7ff fca0 	bl	800a3cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	3324      	adds	r3, #36	; 0x24
 800aa90:	4618      	mov	r0, r3
 800aa92:	f7ff fc9b 	bl	800a3cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800aa96:	f7ff fead 	bl	800a7f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800aa9a:	2301      	movs	r3, #1
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	3710      	adds	r7, #16
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	bd80      	pop	{r7, pc}
 800aaa4:	e000ed04 	.word	0xe000ed04

0800aaa8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b08a      	sub	sp, #40	; 0x28
 800aaac:	af02      	add	r7, sp, #8
 800aaae:	60f8      	str	r0, [r7, #12]
 800aab0:	60b9      	str	r1, [r7, #8]
 800aab2:	4613      	mov	r3, r2
 800aab4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d10a      	bne.n	800aad2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800aabc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aac0:	f383 8811 	msr	BASEPRI, r3
 800aac4:	f3bf 8f6f 	isb	sy
 800aac8:	f3bf 8f4f 	dsb	sy
 800aacc:	613b      	str	r3, [r7, #16]
}
 800aace:	bf00      	nop
 800aad0:	e7fe      	b.n	800aad0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	68ba      	ldr	r2, [r7, #8]
 800aad6:	fb02 f303 	mul.w	r3, r2, r3
 800aada:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800aadc:	69fb      	ldr	r3, [r7, #28]
 800aade:	3348      	adds	r3, #72	; 0x48
 800aae0:	4618      	mov	r0, r3
 800aae2:	f7ff fa89 	bl	8009ff8 <pvPortMalloc>
 800aae6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800aae8:	69bb      	ldr	r3, [r7, #24]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d011      	beq.n	800ab12 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800aaee:	69bb      	ldr	r3, [r7, #24]
 800aaf0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aaf2:	697b      	ldr	r3, [r7, #20]
 800aaf4:	3348      	adds	r3, #72	; 0x48
 800aaf6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800aaf8:	69bb      	ldr	r3, [r7, #24]
 800aafa:	2200      	movs	r2, #0
 800aafc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ab00:	79fa      	ldrb	r2, [r7, #7]
 800ab02:	69bb      	ldr	r3, [r7, #24]
 800ab04:	9300      	str	r3, [sp, #0]
 800ab06:	4613      	mov	r3, r2
 800ab08:	697a      	ldr	r2, [r7, #20]
 800ab0a:	68b9      	ldr	r1, [r7, #8]
 800ab0c:	68f8      	ldr	r0, [r7, #12]
 800ab0e:	f000 f805 	bl	800ab1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ab12:	69bb      	ldr	r3, [r7, #24]
	}
 800ab14:	4618      	mov	r0, r3
 800ab16:	3720      	adds	r7, #32
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	bd80      	pop	{r7, pc}

0800ab1c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b084      	sub	sp, #16
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	60f8      	str	r0, [r7, #12]
 800ab24:	60b9      	str	r1, [r7, #8]
 800ab26:	607a      	str	r2, [r7, #4]
 800ab28:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d103      	bne.n	800ab38 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ab30:	69bb      	ldr	r3, [r7, #24]
 800ab32:	69ba      	ldr	r2, [r7, #24]
 800ab34:	601a      	str	r2, [r3, #0]
 800ab36:	e002      	b.n	800ab3e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ab38:	69bb      	ldr	r3, [r7, #24]
 800ab3a:	687a      	ldr	r2, [r7, #4]
 800ab3c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ab3e:	69bb      	ldr	r3, [r7, #24]
 800ab40:	68fa      	ldr	r2, [r7, #12]
 800ab42:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ab44:	69bb      	ldr	r3, [r7, #24]
 800ab46:	68ba      	ldr	r2, [r7, #8]
 800ab48:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ab4a:	2101      	movs	r1, #1
 800ab4c:	69b8      	ldr	r0, [r7, #24]
 800ab4e:	f7ff ff43 	bl	800a9d8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ab52:	bf00      	nop
 800ab54:	3710      	adds	r7, #16
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}
	...

0800ab5c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b08e      	sub	sp, #56	; 0x38
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	60f8      	str	r0, [r7, #12]
 800ab64:	60b9      	str	r1, [r7, #8]
 800ab66:	607a      	str	r2, [r7, #4]
 800ab68:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ab72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d10a      	bne.n	800ab8e <xQueueGenericSend+0x32>
	__asm volatile
 800ab78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab7c:	f383 8811 	msr	BASEPRI, r3
 800ab80:	f3bf 8f6f 	isb	sy
 800ab84:	f3bf 8f4f 	dsb	sy
 800ab88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ab8a:	bf00      	nop
 800ab8c:	e7fe      	b.n	800ab8c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d103      	bne.n	800ab9c <xQueueGenericSend+0x40>
 800ab94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d101      	bne.n	800aba0 <xQueueGenericSend+0x44>
 800ab9c:	2301      	movs	r3, #1
 800ab9e:	e000      	b.n	800aba2 <xQueueGenericSend+0x46>
 800aba0:	2300      	movs	r3, #0
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d10a      	bne.n	800abbc <xQueueGenericSend+0x60>
	__asm volatile
 800aba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abaa:	f383 8811 	msr	BASEPRI, r3
 800abae:	f3bf 8f6f 	isb	sy
 800abb2:	f3bf 8f4f 	dsb	sy
 800abb6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800abb8:	bf00      	nop
 800abba:	e7fe      	b.n	800abba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	2b02      	cmp	r3, #2
 800abc0:	d103      	bne.n	800abca <xQueueGenericSend+0x6e>
 800abc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abc6:	2b01      	cmp	r3, #1
 800abc8:	d101      	bne.n	800abce <xQueueGenericSend+0x72>
 800abca:	2301      	movs	r3, #1
 800abcc:	e000      	b.n	800abd0 <xQueueGenericSend+0x74>
 800abce:	2300      	movs	r3, #0
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d10a      	bne.n	800abea <xQueueGenericSend+0x8e>
	__asm volatile
 800abd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd8:	f383 8811 	msr	BASEPRI, r3
 800abdc:	f3bf 8f6f 	isb	sy
 800abe0:	f3bf 8f4f 	dsb	sy
 800abe4:	623b      	str	r3, [r7, #32]
}
 800abe6:	bf00      	nop
 800abe8:	e7fe      	b.n	800abe8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800abea:	f001 f987 	bl	800befc <xTaskGetSchedulerState>
 800abee:	4603      	mov	r3, r0
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d102      	bne.n	800abfa <xQueueGenericSend+0x9e>
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d101      	bne.n	800abfe <xQueueGenericSend+0xa2>
 800abfa:	2301      	movs	r3, #1
 800abfc:	e000      	b.n	800ac00 <xQueueGenericSend+0xa4>
 800abfe:	2300      	movs	r3, #0
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d10a      	bne.n	800ac1a <xQueueGenericSend+0xbe>
	__asm volatile
 800ac04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac08:	f383 8811 	msr	BASEPRI, r3
 800ac0c:	f3bf 8f6f 	isb	sy
 800ac10:	f3bf 8f4f 	dsb	sy
 800ac14:	61fb      	str	r3, [r7, #28]
}
 800ac16:	bf00      	nop
 800ac18:	e7fe      	b.n	800ac18 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ac1a:	f7ff fdbb 	bl	800a794 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ac1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac26:	429a      	cmp	r2, r3
 800ac28:	d302      	bcc.n	800ac30 <xQueueGenericSend+0xd4>
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	2b02      	cmp	r3, #2
 800ac2e:	d129      	bne.n	800ac84 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ac30:	683a      	ldr	r2, [r7, #0]
 800ac32:	68b9      	ldr	r1, [r7, #8]
 800ac34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac36:	f000 fa8b 	bl	800b150 <prvCopyDataToQueue>
 800ac3a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ac3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d010      	beq.n	800ac66 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac46:	3324      	adds	r3, #36	; 0x24
 800ac48:	4618      	mov	r0, r3
 800ac4a:	f000 ff9b 	bl	800bb84 <xTaskRemoveFromEventList>
 800ac4e:	4603      	mov	r3, r0
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d013      	beq.n	800ac7c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ac54:	4b3f      	ldr	r3, [pc, #252]	; (800ad54 <xQueueGenericSend+0x1f8>)
 800ac56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac5a:	601a      	str	r2, [r3, #0]
 800ac5c:	f3bf 8f4f 	dsb	sy
 800ac60:	f3bf 8f6f 	isb	sy
 800ac64:	e00a      	b.n	800ac7c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ac66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d007      	beq.n	800ac7c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ac6c:	4b39      	ldr	r3, [pc, #228]	; (800ad54 <xQueueGenericSend+0x1f8>)
 800ac6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac72:	601a      	str	r2, [r3, #0]
 800ac74:	f3bf 8f4f 	dsb	sy
 800ac78:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ac7c:	f7ff fdba 	bl	800a7f4 <vPortExitCritical>
				return pdPASS;
 800ac80:	2301      	movs	r3, #1
 800ac82:	e063      	b.n	800ad4c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d103      	bne.n	800ac92 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ac8a:	f7ff fdb3 	bl	800a7f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ac8e:	2300      	movs	r3, #0
 800ac90:	e05c      	b.n	800ad4c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ac92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d106      	bne.n	800aca6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ac98:	f107 0314 	add.w	r3, r7, #20
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	f000 ffd3 	bl	800bc48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aca2:	2301      	movs	r3, #1
 800aca4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aca6:	f7ff fda5 	bl	800a7f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800acaa:	f000 fd89 	bl	800b7c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800acae:	f7ff fd71 	bl	800a794 <vPortEnterCritical>
 800acb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800acb8:	b25b      	sxtb	r3, r3
 800acba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acbe:	d103      	bne.n	800acc8 <xQueueGenericSend+0x16c>
 800acc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acc2:	2200      	movs	r2, #0
 800acc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800acc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800acce:	b25b      	sxtb	r3, r3
 800acd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acd4:	d103      	bne.n	800acde <xQueueGenericSend+0x182>
 800acd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd8:	2200      	movs	r2, #0
 800acda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800acde:	f7ff fd89 	bl	800a7f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ace2:	1d3a      	adds	r2, r7, #4
 800ace4:	f107 0314 	add.w	r3, r7, #20
 800ace8:	4611      	mov	r1, r2
 800acea:	4618      	mov	r0, r3
 800acec:	f000 ffc2 	bl	800bc74 <xTaskCheckForTimeOut>
 800acf0:	4603      	mov	r3, r0
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d124      	bne.n	800ad40 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800acf6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800acf8:	f000 fb22 	bl	800b340 <prvIsQueueFull>
 800acfc:	4603      	mov	r3, r0
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d018      	beq.n	800ad34 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ad02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad04:	3310      	adds	r3, #16
 800ad06:	687a      	ldr	r2, [r7, #4]
 800ad08:	4611      	mov	r1, r2
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f000 ff16 	bl	800bb3c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ad10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ad12:	f000 faad 	bl	800b270 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ad16:	f000 fd61 	bl	800b7dc <xTaskResumeAll>
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	f47f af7c 	bne.w	800ac1a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ad22:	4b0c      	ldr	r3, [pc, #48]	; (800ad54 <xQueueGenericSend+0x1f8>)
 800ad24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad28:	601a      	str	r2, [r3, #0]
 800ad2a:	f3bf 8f4f 	dsb	sy
 800ad2e:	f3bf 8f6f 	isb	sy
 800ad32:	e772      	b.n	800ac1a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ad34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ad36:	f000 fa9b 	bl	800b270 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ad3a:	f000 fd4f 	bl	800b7dc <xTaskResumeAll>
 800ad3e:	e76c      	b.n	800ac1a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ad40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ad42:	f000 fa95 	bl	800b270 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ad46:	f000 fd49 	bl	800b7dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ad4a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	3738      	adds	r7, #56	; 0x38
 800ad50:	46bd      	mov	sp, r7
 800ad52:	bd80      	pop	{r7, pc}
 800ad54:	e000ed04 	.word	0xe000ed04

0800ad58 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b090      	sub	sp, #64	; 0x40
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	60f8      	str	r0, [r7, #12]
 800ad60:	60b9      	str	r1, [r7, #8]
 800ad62:	607a      	str	r2, [r7, #4]
 800ad64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ad6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d10a      	bne.n	800ad86 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ad70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad74:	f383 8811 	msr	BASEPRI, r3
 800ad78:	f3bf 8f6f 	isb	sy
 800ad7c:	f3bf 8f4f 	dsb	sy
 800ad80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ad82:	bf00      	nop
 800ad84:	e7fe      	b.n	800ad84 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad86:	68bb      	ldr	r3, [r7, #8]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d103      	bne.n	800ad94 <xQueueGenericSendFromISR+0x3c>
 800ad8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d101      	bne.n	800ad98 <xQueueGenericSendFromISR+0x40>
 800ad94:	2301      	movs	r3, #1
 800ad96:	e000      	b.n	800ad9a <xQueueGenericSendFromISR+0x42>
 800ad98:	2300      	movs	r3, #0
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d10a      	bne.n	800adb4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ad9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada2:	f383 8811 	msr	BASEPRI, r3
 800ada6:	f3bf 8f6f 	isb	sy
 800adaa:	f3bf 8f4f 	dsb	sy
 800adae:	627b      	str	r3, [r7, #36]	; 0x24
}
 800adb0:	bf00      	nop
 800adb2:	e7fe      	b.n	800adb2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	2b02      	cmp	r3, #2
 800adb8:	d103      	bne.n	800adc2 <xQueueGenericSendFromISR+0x6a>
 800adba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adbe:	2b01      	cmp	r3, #1
 800adc0:	d101      	bne.n	800adc6 <xQueueGenericSendFromISR+0x6e>
 800adc2:	2301      	movs	r3, #1
 800adc4:	e000      	b.n	800adc8 <xQueueGenericSendFromISR+0x70>
 800adc6:	2300      	movs	r3, #0
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d10a      	bne.n	800ade2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800adcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add0:	f383 8811 	msr	BASEPRI, r3
 800add4:	f3bf 8f6f 	isb	sy
 800add8:	f3bf 8f4f 	dsb	sy
 800addc:	623b      	str	r3, [r7, #32]
}
 800adde:	bf00      	nop
 800ade0:	e7fe      	b.n	800ade0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ade2:	f7ff fdb9 	bl	800a958 <vPortValidateInterruptPriority>
	__asm volatile
 800ade6:	f3ef 8211 	mrs	r2, BASEPRI
 800adea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adee:	f383 8811 	msr	BASEPRI, r3
 800adf2:	f3bf 8f6f 	isb	sy
 800adf6:	f3bf 8f4f 	dsb	sy
 800adfa:	61fa      	str	r2, [r7, #28]
 800adfc:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800adfe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ae00:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ae02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae0a:	429a      	cmp	r2, r3
 800ae0c:	d302      	bcc.n	800ae14 <xQueueGenericSendFromISR+0xbc>
 800ae0e:	683b      	ldr	r3, [r7, #0]
 800ae10:	2b02      	cmp	r3, #2
 800ae12:	d12f      	bne.n	800ae74 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ae14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae22:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ae24:	683a      	ldr	r2, [r7, #0]
 800ae26:	68b9      	ldr	r1, [r7, #8]
 800ae28:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ae2a:	f000 f991 	bl	800b150 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ae2e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ae32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae36:	d112      	bne.n	800ae5e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d016      	beq.n	800ae6e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae42:	3324      	adds	r3, #36	; 0x24
 800ae44:	4618      	mov	r0, r3
 800ae46:	f000 fe9d 	bl	800bb84 <xTaskRemoveFromEventList>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d00e      	beq.n	800ae6e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d00b      	beq.n	800ae6e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	2201      	movs	r2, #1
 800ae5a:	601a      	str	r2, [r3, #0]
 800ae5c:	e007      	b.n	800ae6e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ae5e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ae62:	3301      	adds	r3, #1
 800ae64:	b2db      	uxtb	r3, r3
 800ae66:	b25a      	sxtb	r2, r3
 800ae68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ae6e:	2301      	movs	r3, #1
 800ae70:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ae72:	e001      	b.n	800ae78 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ae74:	2300      	movs	r3, #0
 800ae76:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae7a:	617b      	str	r3, [r7, #20]
	__asm volatile
 800ae7c:	697b      	ldr	r3, [r7, #20]
 800ae7e:	f383 8811 	msr	BASEPRI, r3
}
 800ae82:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ae84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ae86:	4618      	mov	r0, r3
 800ae88:	3740      	adds	r7, #64	; 0x40
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bd80      	pop	{r7, pc}
	...

0800ae90 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b08c      	sub	sp, #48	; 0x30
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	60f8      	str	r0, [r7, #12]
 800ae98:	60b9      	str	r1, [r7, #8]
 800ae9a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d10a      	bne.n	800aec0 <xQueueReceive+0x30>
	__asm volatile
 800aeaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeae:	f383 8811 	msr	BASEPRI, r3
 800aeb2:	f3bf 8f6f 	isb	sy
 800aeb6:	f3bf 8f4f 	dsb	sy
 800aeba:	623b      	str	r3, [r7, #32]
}
 800aebc:	bf00      	nop
 800aebe:	e7fe      	b.n	800aebe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d103      	bne.n	800aece <xQueueReceive+0x3e>
 800aec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d101      	bne.n	800aed2 <xQueueReceive+0x42>
 800aece:	2301      	movs	r3, #1
 800aed0:	e000      	b.n	800aed4 <xQueueReceive+0x44>
 800aed2:	2300      	movs	r3, #0
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d10a      	bne.n	800aeee <xQueueReceive+0x5e>
	__asm volatile
 800aed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aedc:	f383 8811 	msr	BASEPRI, r3
 800aee0:	f3bf 8f6f 	isb	sy
 800aee4:	f3bf 8f4f 	dsb	sy
 800aee8:	61fb      	str	r3, [r7, #28]
}
 800aeea:	bf00      	nop
 800aeec:	e7fe      	b.n	800aeec <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aeee:	f001 f805 	bl	800befc <xTaskGetSchedulerState>
 800aef2:	4603      	mov	r3, r0
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d102      	bne.n	800aefe <xQueueReceive+0x6e>
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d101      	bne.n	800af02 <xQueueReceive+0x72>
 800aefe:	2301      	movs	r3, #1
 800af00:	e000      	b.n	800af04 <xQueueReceive+0x74>
 800af02:	2300      	movs	r3, #0
 800af04:	2b00      	cmp	r3, #0
 800af06:	d10a      	bne.n	800af1e <xQueueReceive+0x8e>
	__asm volatile
 800af08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af0c:	f383 8811 	msr	BASEPRI, r3
 800af10:	f3bf 8f6f 	isb	sy
 800af14:	f3bf 8f4f 	dsb	sy
 800af18:	61bb      	str	r3, [r7, #24]
}
 800af1a:	bf00      	nop
 800af1c:	e7fe      	b.n	800af1c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800af1e:	f7ff fc39 	bl	800a794 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800af22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af26:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800af28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d01f      	beq.n	800af6e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800af2e:	68b9      	ldr	r1, [r7, #8]
 800af30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af32:	f000 f977 	bl	800b224 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800af36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af38:	1e5a      	subs	r2, r3, #1
 800af3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af3c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af40:	691b      	ldr	r3, [r3, #16]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d00f      	beq.n	800af66 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af48:	3310      	adds	r3, #16
 800af4a:	4618      	mov	r0, r3
 800af4c:	f000 fe1a 	bl	800bb84 <xTaskRemoveFromEventList>
 800af50:	4603      	mov	r3, r0
 800af52:	2b00      	cmp	r3, #0
 800af54:	d007      	beq.n	800af66 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800af56:	4b3d      	ldr	r3, [pc, #244]	; (800b04c <xQueueReceive+0x1bc>)
 800af58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af5c:	601a      	str	r2, [r3, #0]
 800af5e:	f3bf 8f4f 	dsb	sy
 800af62:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800af66:	f7ff fc45 	bl	800a7f4 <vPortExitCritical>
				return pdPASS;
 800af6a:	2301      	movs	r3, #1
 800af6c:	e069      	b.n	800b042 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d103      	bne.n	800af7c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800af74:	f7ff fc3e 	bl	800a7f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800af78:	2300      	movs	r3, #0
 800af7a:	e062      	b.n	800b042 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800af7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d106      	bne.n	800af90 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800af82:	f107 0310 	add.w	r3, r7, #16
 800af86:	4618      	mov	r0, r3
 800af88:	f000 fe5e 	bl	800bc48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800af8c:	2301      	movs	r3, #1
 800af8e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800af90:	f7ff fc30 	bl	800a7f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800af94:	f000 fc14 	bl	800b7c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800af98:	f7ff fbfc 	bl	800a794 <vPortEnterCritical>
 800af9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800afa2:	b25b      	sxtb	r3, r3
 800afa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afa8:	d103      	bne.n	800afb2 <xQueueReceive+0x122>
 800afaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afac:	2200      	movs	r2, #0
 800afae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800afb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800afb8:	b25b      	sxtb	r3, r3
 800afba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afbe:	d103      	bne.n	800afc8 <xQueueReceive+0x138>
 800afc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afc2:	2200      	movs	r2, #0
 800afc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800afc8:	f7ff fc14 	bl	800a7f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800afcc:	1d3a      	adds	r2, r7, #4
 800afce:	f107 0310 	add.w	r3, r7, #16
 800afd2:	4611      	mov	r1, r2
 800afd4:	4618      	mov	r0, r3
 800afd6:	f000 fe4d 	bl	800bc74 <xTaskCheckForTimeOut>
 800afda:	4603      	mov	r3, r0
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d123      	bne.n	800b028 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800afe0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800afe2:	f000 f997 	bl	800b314 <prvIsQueueEmpty>
 800afe6:	4603      	mov	r3, r0
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d017      	beq.n	800b01c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800afec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afee:	3324      	adds	r3, #36	; 0x24
 800aff0:	687a      	ldr	r2, [r7, #4]
 800aff2:	4611      	mov	r1, r2
 800aff4:	4618      	mov	r0, r3
 800aff6:	f000 fda1 	bl	800bb3c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800affa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800affc:	f000 f938 	bl	800b270 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b000:	f000 fbec 	bl	800b7dc <xTaskResumeAll>
 800b004:	4603      	mov	r3, r0
 800b006:	2b00      	cmp	r3, #0
 800b008:	d189      	bne.n	800af1e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b00a:	4b10      	ldr	r3, [pc, #64]	; (800b04c <xQueueReceive+0x1bc>)
 800b00c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b010:	601a      	str	r2, [r3, #0]
 800b012:	f3bf 8f4f 	dsb	sy
 800b016:	f3bf 8f6f 	isb	sy
 800b01a:	e780      	b.n	800af1e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b01c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b01e:	f000 f927 	bl	800b270 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b022:	f000 fbdb 	bl	800b7dc <xTaskResumeAll>
 800b026:	e77a      	b.n	800af1e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b028:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b02a:	f000 f921 	bl	800b270 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b02e:	f000 fbd5 	bl	800b7dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b032:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b034:	f000 f96e 	bl	800b314 <prvIsQueueEmpty>
 800b038:	4603      	mov	r3, r0
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	f43f af6f 	beq.w	800af1e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b040:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b042:	4618      	mov	r0, r3
 800b044:	3730      	adds	r7, #48	; 0x30
 800b046:	46bd      	mov	sp, r7
 800b048:	bd80      	pop	{r7, pc}
 800b04a:	bf00      	nop
 800b04c:	e000ed04 	.word	0xe000ed04

0800b050 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b08e      	sub	sp, #56	; 0x38
 800b054:	af00      	add	r7, sp, #0
 800b056:	60f8      	str	r0, [r7, #12]
 800b058:	60b9      	str	r1, [r7, #8]
 800b05a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b062:	2b00      	cmp	r3, #0
 800b064:	d10a      	bne.n	800b07c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800b066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b06a:	f383 8811 	msr	BASEPRI, r3
 800b06e:	f3bf 8f6f 	isb	sy
 800b072:	f3bf 8f4f 	dsb	sy
 800b076:	623b      	str	r3, [r7, #32]
}
 800b078:	bf00      	nop
 800b07a:	e7fe      	b.n	800b07a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d103      	bne.n	800b08a <xQueueReceiveFromISR+0x3a>
 800b082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b086:	2b00      	cmp	r3, #0
 800b088:	d101      	bne.n	800b08e <xQueueReceiveFromISR+0x3e>
 800b08a:	2301      	movs	r3, #1
 800b08c:	e000      	b.n	800b090 <xQueueReceiveFromISR+0x40>
 800b08e:	2300      	movs	r3, #0
 800b090:	2b00      	cmp	r3, #0
 800b092:	d10a      	bne.n	800b0aa <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800b094:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b098:	f383 8811 	msr	BASEPRI, r3
 800b09c:	f3bf 8f6f 	isb	sy
 800b0a0:	f3bf 8f4f 	dsb	sy
 800b0a4:	61fb      	str	r3, [r7, #28]
}
 800b0a6:	bf00      	nop
 800b0a8:	e7fe      	b.n	800b0a8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b0aa:	f7ff fc55 	bl	800a958 <vPortValidateInterruptPriority>
	__asm volatile
 800b0ae:	f3ef 8211 	mrs	r2, BASEPRI
 800b0b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0b6:	f383 8811 	msr	BASEPRI, r3
 800b0ba:	f3bf 8f6f 	isb	sy
 800b0be:	f3bf 8f4f 	dsb	sy
 800b0c2:	61ba      	str	r2, [r7, #24]
 800b0c4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b0c6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b0c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0ce:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d02f      	beq.n	800b136 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b0dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b0e0:	68b9      	ldr	r1, [r7, #8]
 800b0e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b0e4:	f000 f89e 	bl	800b224 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b0e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ea:	1e5a      	subs	r2, r3, #1
 800b0ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ee:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b0f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b0f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0f8:	d112      	bne.n	800b120 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b0fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0fc:	691b      	ldr	r3, [r3, #16]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d016      	beq.n	800b130 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b104:	3310      	adds	r3, #16
 800b106:	4618      	mov	r0, r3
 800b108:	f000 fd3c 	bl	800bb84 <xTaskRemoveFromEventList>
 800b10c:	4603      	mov	r3, r0
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d00e      	beq.n	800b130 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d00b      	beq.n	800b130 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2201      	movs	r2, #1
 800b11c:	601a      	str	r2, [r3, #0]
 800b11e:	e007      	b.n	800b130 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b120:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b124:	3301      	adds	r3, #1
 800b126:	b2db      	uxtb	r3, r3
 800b128:	b25a      	sxtb	r2, r3
 800b12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b12c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b130:	2301      	movs	r3, #1
 800b132:	637b      	str	r3, [r7, #52]	; 0x34
 800b134:	e001      	b.n	800b13a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800b136:	2300      	movs	r3, #0
 800b138:	637b      	str	r3, [r7, #52]	; 0x34
 800b13a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b13c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b13e:	693b      	ldr	r3, [r7, #16]
 800b140:	f383 8811 	msr	BASEPRI, r3
}
 800b144:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b148:	4618      	mov	r0, r3
 800b14a:	3738      	adds	r7, #56	; 0x38
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}

0800b150 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b086      	sub	sp, #24
 800b154:	af00      	add	r7, sp, #0
 800b156:	60f8      	str	r0, [r7, #12]
 800b158:	60b9      	str	r1, [r7, #8]
 800b15a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b15c:	2300      	movs	r3, #0
 800b15e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b164:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d10d      	bne.n	800b18a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d14d      	bne.n	800b212 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	689b      	ldr	r3, [r3, #8]
 800b17a:	4618      	mov	r0, r3
 800b17c:	f000 fedc 	bl	800bf38 <xTaskPriorityDisinherit>
 800b180:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	2200      	movs	r2, #0
 800b186:	609a      	str	r2, [r3, #8]
 800b188:	e043      	b.n	800b212 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d119      	bne.n	800b1c4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	6858      	ldr	r0, [r3, #4]
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b198:	461a      	mov	r2, r3
 800b19a:	68b9      	ldr	r1, [r7, #8]
 800b19c:	f003 fec0 	bl	800ef20 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	685a      	ldr	r2, [r3, #4]
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1a8:	441a      	add	r2, r3
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	685a      	ldr	r2, [r3, #4]
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	689b      	ldr	r3, [r3, #8]
 800b1b6:	429a      	cmp	r2, r3
 800b1b8:	d32b      	bcc.n	800b212 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	681a      	ldr	r2, [r3, #0]
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	605a      	str	r2, [r3, #4]
 800b1c2:	e026      	b.n	800b212 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	68d8      	ldr	r0, [r3, #12]
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1cc:	461a      	mov	r2, r3
 800b1ce:	68b9      	ldr	r1, [r7, #8]
 800b1d0:	f003 fea6 	bl	800ef20 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	68da      	ldr	r2, [r3, #12]
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1dc:	425b      	negs	r3, r3
 800b1de:	441a      	add	r2, r3
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	68da      	ldr	r2, [r3, #12]
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	429a      	cmp	r2, r3
 800b1ee:	d207      	bcs.n	800b200 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	689a      	ldr	r2, [r3, #8]
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1f8:	425b      	negs	r3, r3
 800b1fa:	441a      	add	r2, r3
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2b02      	cmp	r3, #2
 800b204:	d105      	bne.n	800b212 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b206:	693b      	ldr	r3, [r7, #16]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d002      	beq.n	800b212 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b20c:	693b      	ldr	r3, [r7, #16]
 800b20e:	3b01      	subs	r3, #1
 800b210:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b212:	693b      	ldr	r3, [r7, #16]
 800b214:	1c5a      	adds	r2, r3, #1
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b21a:	697b      	ldr	r3, [r7, #20]
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	3718      	adds	r7, #24
 800b220:	46bd      	mov	sp, r7
 800b222:	bd80      	pop	{r7, pc}

0800b224 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b082      	sub	sp, #8
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
 800b22c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b232:	2b00      	cmp	r3, #0
 800b234:	d018      	beq.n	800b268 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	68da      	ldr	r2, [r3, #12]
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b23e:	441a      	add	r2, r3
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	68da      	ldr	r2, [r3, #12]
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	689b      	ldr	r3, [r3, #8]
 800b24c:	429a      	cmp	r2, r3
 800b24e:	d303      	bcc.n	800b258 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681a      	ldr	r2, [r3, #0]
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	68d9      	ldr	r1, [r3, #12]
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b260:	461a      	mov	r2, r3
 800b262:	6838      	ldr	r0, [r7, #0]
 800b264:	f003 fe5c 	bl	800ef20 <memcpy>
	}
}
 800b268:	bf00      	nop
 800b26a:	3708      	adds	r7, #8
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}

0800b270 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b084      	sub	sp, #16
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b278:	f7ff fa8c 	bl	800a794 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b282:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b284:	e011      	b.n	800b2aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d012      	beq.n	800b2b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	3324      	adds	r3, #36	; 0x24
 800b292:	4618      	mov	r0, r3
 800b294:	f000 fc76 	bl	800bb84 <xTaskRemoveFromEventList>
 800b298:	4603      	mov	r3, r0
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d001      	beq.n	800b2a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b29e:	f000 fd4b 	bl	800bd38 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b2a2:	7bfb      	ldrb	r3, [r7, #15]
 800b2a4:	3b01      	subs	r3, #1
 800b2a6:	b2db      	uxtb	r3, r3
 800b2a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b2aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	dce9      	bgt.n	800b286 <prvUnlockQueue+0x16>
 800b2b2:	e000      	b.n	800b2b6 <prvUnlockQueue+0x46>
					break;
 800b2b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	22ff      	movs	r2, #255	; 0xff
 800b2ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b2be:	f7ff fa99 	bl	800a7f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b2c2:	f7ff fa67 	bl	800a794 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b2cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b2ce:	e011      	b.n	800b2f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	691b      	ldr	r3, [r3, #16]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d012      	beq.n	800b2fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	3310      	adds	r3, #16
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f000 fc51 	bl	800bb84 <xTaskRemoveFromEventList>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d001      	beq.n	800b2ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b2e8:	f000 fd26 	bl	800bd38 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b2ec:	7bbb      	ldrb	r3, [r7, #14]
 800b2ee:	3b01      	subs	r3, #1
 800b2f0:	b2db      	uxtb	r3, r3
 800b2f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b2f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	dce9      	bgt.n	800b2d0 <prvUnlockQueue+0x60>
 800b2fc:	e000      	b.n	800b300 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b2fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	22ff      	movs	r2, #255	; 0xff
 800b304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b308:	f7ff fa74 	bl	800a7f4 <vPortExitCritical>
}
 800b30c:	bf00      	nop
 800b30e:	3710      	adds	r7, #16
 800b310:	46bd      	mov	sp, r7
 800b312:	bd80      	pop	{r7, pc}

0800b314 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b084      	sub	sp, #16
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b31c:	f7ff fa3a 	bl	800a794 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b324:	2b00      	cmp	r3, #0
 800b326:	d102      	bne.n	800b32e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b328:	2301      	movs	r3, #1
 800b32a:	60fb      	str	r3, [r7, #12]
 800b32c:	e001      	b.n	800b332 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b32e:	2300      	movs	r3, #0
 800b330:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b332:	f7ff fa5f 	bl	800a7f4 <vPortExitCritical>

	return xReturn;
 800b336:	68fb      	ldr	r3, [r7, #12]
}
 800b338:	4618      	mov	r0, r3
 800b33a:	3710      	adds	r7, #16
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}

0800b340 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b084      	sub	sp, #16
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b348:	f7ff fa24 	bl	800a794 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b354:	429a      	cmp	r2, r3
 800b356:	d102      	bne.n	800b35e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b358:	2301      	movs	r3, #1
 800b35a:	60fb      	str	r3, [r7, #12]
 800b35c:	e001      	b.n	800b362 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b35e:	2300      	movs	r3, #0
 800b360:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b362:	f7ff fa47 	bl	800a7f4 <vPortExitCritical>

	return xReturn;
 800b366:	68fb      	ldr	r3, [r7, #12]
}
 800b368:	4618      	mov	r0, r3
 800b36a:	3710      	adds	r7, #16
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}

0800b370 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b370:	b580      	push	{r7, lr}
 800b372:	b08e      	sub	sp, #56	; 0x38
 800b374:	af04      	add	r7, sp, #16
 800b376:	60f8      	str	r0, [r7, #12]
 800b378:	60b9      	str	r1, [r7, #8]
 800b37a:	607a      	str	r2, [r7, #4]
 800b37c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b37e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b380:	2b00      	cmp	r3, #0
 800b382:	d10a      	bne.n	800b39a <xTaskCreateStatic+0x2a>
	__asm volatile
 800b384:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b388:	f383 8811 	msr	BASEPRI, r3
 800b38c:	f3bf 8f6f 	isb	sy
 800b390:	f3bf 8f4f 	dsb	sy
 800b394:	623b      	str	r3, [r7, #32]
}
 800b396:	bf00      	nop
 800b398:	e7fe      	b.n	800b398 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b39a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d10a      	bne.n	800b3b6 <xTaskCreateStatic+0x46>
	__asm volatile
 800b3a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3a4:	f383 8811 	msr	BASEPRI, r3
 800b3a8:	f3bf 8f6f 	isb	sy
 800b3ac:	f3bf 8f4f 	dsb	sy
 800b3b0:	61fb      	str	r3, [r7, #28]
}
 800b3b2:	bf00      	nop
 800b3b4:	e7fe      	b.n	800b3b4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b3b6:	2354      	movs	r3, #84	; 0x54
 800b3b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b3ba:	693b      	ldr	r3, [r7, #16]
 800b3bc:	2b54      	cmp	r3, #84	; 0x54
 800b3be:	d00a      	beq.n	800b3d6 <xTaskCreateStatic+0x66>
	__asm volatile
 800b3c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3c4:	f383 8811 	msr	BASEPRI, r3
 800b3c8:	f3bf 8f6f 	isb	sy
 800b3cc:	f3bf 8f4f 	dsb	sy
 800b3d0:	61bb      	str	r3, [r7, #24]
}
 800b3d2:	bf00      	nop
 800b3d4:	e7fe      	b.n	800b3d4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b3d6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d01e      	beq.n	800b41c <xTaskCreateStatic+0xac>
 800b3de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d01b      	beq.n	800b41c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b3e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3e6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b3ec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b3ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3f0:	2202      	movs	r2, #2
 800b3f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	9303      	str	r3, [sp, #12]
 800b3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3fc:	9302      	str	r3, [sp, #8]
 800b3fe:	f107 0314 	add.w	r3, r7, #20
 800b402:	9301      	str	r3, [sp, #4]
 800b404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b406:	9300      	str	r3, [sp, #0]
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	687a      	ldr	r2, [r7, #4]
 800b40c:	68b9      	ldr	r1, [r7, #8]
 800b40e:	68f8      	ldr	r0, [r7, #12]
 800b410:	f000 f850 	bl	800b4b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b414:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b416:	f000 f8d5 	bl	800b5c4 <prvAddNewTaskToReadyList>
 800b41a:	e001      	b.n	800b420 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b41c:	2300      	movs	r3, #0
 800b41e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b420:	697b      	ldr	r3, [r7, #20]
	}
 800b422:	4618      	mov	r0, r3
 800b424:	3728      	adds	r7, #40	; 0x28
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}

0800b42a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b42a:	b580      	push	{r7, lr}
 800b42c:	b08c      	sub	sp, #48	; 0x30
 800b42e:	af04      	add	r7, sp, #16
 800b430:	60f8      	str	r0, [r7, #12]
 800b432:	60b9      	str	r1, [r7, #8]
 800b434:	603b      	str	r3, [r7, #0]
 800b436:	4613      	mov	r3, r2
 800b438:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b43a:	88fb      	ldrh	r3, [r7, #6]
 800b43c:	009b      	lsls	r3, r3, #2
 800b43e:	4618      	mov	r0, r3
 800b440:	f7fe fdda 	bl	8009ff8 <pvPortMalloc>
 800b444:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b446:	697b      	ldr	r3, [r7, #20]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d00e      	beq.n	800b46a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b44c:	2054      	movs	r0, #84	; 0x54
 800b44e:	f7fe fdd3 	bl	8009ff8 <pvPortMalloc>
 800b452:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b454:	69fb      	ldr	r3, [r7, #28]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d003      	beq.n	800b462 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b45a:	69fb      	ldr	r3, [r7, #28]
 800b45c:	697a      	ldr	r2, [r7, #20]
 800b45e:	631a      	str	r2, [r3, #48]	; 0x30
 800b460:	e005      	b.n	800b46e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b462:	6978      	ldr	r0, [r7, #20]
 800b464:	f7fe fe94 	bl	800a190 <vPortFree>
 800b468:	e001      	b.n	800b46e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b46a:	2300      	movs	r3, #0
 800b46c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b46e:	69fb      	ldr	r3, [r7, #28]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d017      	beq.n	800b4a4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b474:	69fb      	ldr	r3, [r7, #28]
 800b476:	2200      	movs	r2, #0
 800b478:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b47c:	88fa      	ldrh	r2, [r7, #6]
 800b47e:	2300      	movs	r3, #0
 800b480:	9303      	str	r3, [sp, #12]
 800b482:	69fb      	ldr	r3, [r7, #28]
 800b484:	9302      	str	r3, [sp, #8]
 800b486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b488:	9301      	str	r3, [sp, #4]
 800b48a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b48c:	9300      	str	r3, [sp, #0]
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	68b9      	ldr	r1, [r7, #8]
 800b492:	68f8      	ldr	r0, [r7, #12]
 800b494:	f000 f80e 	bl	800b4b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b498:	69f8      	ldr	r0, [r7, #28]
 800b49a:	f000 f893 	bl	800b5c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b49e:	2301      	movs	r3, #1
 800b4a0:	61bb      	str	r3, [r7, #24]
 800b4a2:	e002      	b.n	800b4aa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b4a4:	f04f 33ff 	mov.w	r3, #4294967295
 800b4a8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b4aa:	69bb      	ldr	r3, [r7, #24]
	}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	3720      	adds	r7, #32
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}

0800b4b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b088      	sub	sp, #32
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	60f8      	str	r0, [r7, #12]
 800b4bc:	60b9      	str	r1, [r7, #8]
 800b4be:	607a      	str	r2, [r7, #4]
 800b4c0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b4c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b4cc:	3b01      	subs	r3, #1
 800b4ce:	009b      	lsls	r3, r3, #2
 800b4d0:	4413      	add	r3, r2
 800b4d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b4d4:	69bb      	ldr	r3, [r7, #24]
 800b4d6:	f023 0307 	bic.w	r3, r3, #7
 800b4da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b4dc:	69bb      	ldr	r3, [r7, #24]
 800b4de:	f003 0307 	and.w	r3, r3, #7
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d00a      	beq.n	800b4fc <prvInitialiseNewTask+0x48>
	__asm volatile
 800b4e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ea:	f383 8811 	msr	BASEPRI, r3
 800b4ee:	f3bf 8f6f 	isb	sy
 800b4f2:	f3bf 8f4f 	dsb	sy
 800b4f6:	617b      	str	r3, [r7, #20]
}
 800b4f8:	bf00      	nop
 800b4fa:	e7fe      	b.n	800b4fa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d01f      	beq.n	800b542 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b502:	2300      	movs	r3, #0
 800b504:	61fb      	str	r3, [r7, #28]
 800b506:	e012      	b.n	800b52e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b508:	68ba      	ldr	r2, [r7, #8]
 800b50a:	69fb      	ldr	r3, [r7, #28]
 800b50c:	4413      	add	r3, r2
 800b50e:	7819      	ldrb	r1, [r3, #0]
 800b510:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b512:	69fb      	ldr	r3, [r7, #28]
 800b514:	4413      	add	r3, r2
 800b516:	3334      	adds	r3, #52	; 0x34
 800b518:	460a      	mov	r2, r1
 800b51a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b51c:	68ba      	ldr	r2, [r7, #8]
 800b51e:	69fb      	ldr	r3, [r7, #28]
 800b520:	4413      	add	r3, r2
 800b522:	781b      	ldrb	r3, [r3, #0]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d006      	beq.n	800b536 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b528:	69fb      	ldr	r3, [r7, #28]
 800b52a:	3301      	adds	r3, #1
 800b52c:	61fb      	str	r3, [r7, #28]
 800b52e:	69fb      	ldr	r3, [r7, #28]
 800b530:	2b0f      	cmp	r3, #15
 800b532:	d9e9      	bls.n	800b508 <prvInitialiseNewTask+0x54>
 800b534:	e000      	b.n	800b538 <prvInitialiseNewTask+0x84>
			{
				break;
 800b536:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b53a:	2200      	movs	r2, #0
 800b53c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b540:	e003      	b.n	800b54a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b544:	2200      	movs	r2, #0
 800b546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b54a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b54c:	2b06      	cmp	r3, #6
 800b54e:	d901      	bls.n	800b554 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b550:	2306      	movs	r3, #6
 800b552:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b556:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b558:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b55a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b55c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b55e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b562:	2200      	movs	r2, #0
 800b564:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b568:	3304      	adds	r3, #4
 800b56a:	4618      	mov	r0, r3
 800b56c:	f7fe ff4e 	bl	800a40c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b572:	3318      	adds	r3, #24
 800b574:	4618      	mov	r0, r3
 800b576:	f7fe ff49 	bl	800a40c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b57c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b57e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b582:	f1c3 0207 	rsb	r2, r3, #7
 800b586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b588:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b58c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b58e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b592:	2200      	movs	r2, #0
 800b594:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b598:	2200      	movs	r2, #0
 800b59a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b59e:	683a      	ldr	r2, [r7, #0]
 800b5a0:	68f9      	ldr	r1, [r7, #12]
 800b5a2:	69b8      	ldr	r0, [r7, #24]
 800b5a4:	f7fe ffc6 	bl	800a534 <pxPortInitialiseStack>
 800b5a8:	4602      	mov	r2, r0
 800b5aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b5ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d002      	beq.n	800b5ba <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b5b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b5ba:	bf00      	nop
 800b5bc:	3720      	adds	r7, #32
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bd80      	pop	{r7, pc}
	...

0800b5c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b082      	sub	sp, #8
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b5cc:	f7ff f8e2 	bl	800a794 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b5d0:	4b2a      	ldr	r3, [pc, #168]	; (800b67c <prvAddNewTaskToReadyList+0xb8>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	3301      	adds	r3, #1
 800b5d6:	4a29      	ldr	r2, [pc, #164]	; (800b67c <prvAddNewTaskToReadyList+0xb8>)
 800b5d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b5da:	4b29      	ldr	r3, [pc, #164]	; (800b680 <prvAddNewTaskToReadyList+0xbc>)
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d109      	bne.n	800b5f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b5e2:	4a27      	ldr	r2, [pc, #156]	; (800b680 <prvAddNewTaskToReadyList+0xbc>)
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b5e8:	4b24      	ldr	r3, [pc, #144]	; (800b67c <prvAddNewTaskToReadyList+0xb8>)
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	2b01      	cmp	r3, #1
 800b5ee:	d110      	bne.n	800b612 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b5f0:	f000 fbc6 	bl	800bd80 <prvInitialiseTaskLists>
 800b5f4:	e00d      	b.n	800b612 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b5f6:	4b23      	ldr	r3, [pc, #140]	; (800b684 <prvAddNewTaskToReadyList+0xc0>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d109      	bne.n	800b612 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b5fe:	4b20      	ldr	r3, [pc, #128]	; (800b680 <prvAddNewTaskToReadyList+0xbc>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b608:	429a      	cmp	r2, r3
 800b60a:	d802      	bhi.n	800b612 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b60c:	4a1c      	ldr	r2, [pc, #112]	; (800b680 <prvAddNewTaskToReadyList+0xbc>)
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b612:	4b1d      	ldr	r3, [pc, #116]	; (800b688 <prvAddNewTaskToReadyList+0xc4>)
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	3301      	adds	r3, #1
 800b618:	4a1b      	ldr	r2, [pc, #108]	; (800b688 <prvAddNewTaskToReadyList+0xc4>)
 800b61a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b620:	2201      	movs	r2, #1
 800b622:	409a      	lsls	r2, r3
 800b624:	4b19      	ldr	r3, [pc, #100]	; (800b68c <prvAddNewTaskToReadyList+0xc8>)
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	4313      	orrs	r3, r2
 800b62a:	4a18      	ldr	r2, [pc, #96]	; (800b68c <prvAddNewTaskToReadyList+0xc8>)
 800b62c:	6013      	str	r3, [r2, #0]
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b632:	4613      	mov	r3, r2
 800b634:	009b      	lsls	r3, r3, #2
 800b636:	4413      	add	r3, r2
 800b638:	009b      	lsls	r3, r3, #2
 800b63a:	4a15      	ldr	r2, [pc, #84]	; (800b690 <prvAddNewTaskToReadyList+0xcc>)
 800b63c:	441a      	add	r2, r3
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	3304      	adds	r3, #4
 800b642:	4619      	mov	r1, r3
 800b644:	4610      	mov	r0, r2
 800b646:	f7fe feee 	bl	800a426 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b64a:	f7ff f8d3 	bl	800a7f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b64e:	4b0d      	ldr	r3, [pc, #52]	; (800b684 <prvAddNewTaskToReadyList+0xc0>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d00e      	beq.n	800b674 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b656:	4b0a      	ldr	r3, [pc, #40]	; (800b680 <prvAddNewTaskToReadyList+0xbc>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b660:	429a      	cmp	r2, r3
 800b662:	d207      	bcs.n	800b674 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b664:	4b0b      	ldr	r3, [pc, #44]	; (800b694 <prvAddNewTaskToReadyList+0xd0>)
 800b666:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b66a:	601a      	str	r2, [r3, #0]
 800b66c:	f3bf 8f4f 	dsb	sy
 800b670:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b674:	bf00      	nop
 800b676:	3708      	adds	r7, #8
 800b678:	46bd      	mov	sp, r7
 800b67a:	bd80      	pop	{r7, pc}
 800b67c:	20004484 	.word	0x20004484
 800b680:	20004384 	.word	0x20004384
 800b684:	20004490 	.word	0x20004490
 800b688:	200044a0 	.word	0x200044a0
 800b68c:	2000448c 	.word	0x2000448c
 800b690:	20004388 	.word	0x20004388
 800b694:	e000ed04 	.word	0xe000ed04

0800b698 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b084      	sub	sp, #16
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d017      	beq.n	800b6da <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b6aa:	4b13      	ldr	r3, [pc, #76]	; (800b6f8 <vTaskDelay+0x60>)
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d00a      	beq.n	800b6c8 <vTaskDelay+0x30>
	__asm volatile
 800b6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6b6:	f383 8811 	msr	BASEPRI, r3
 800b6ba:	f3bf 8f6f 	isb	sy
 800b6be:	f3bf 8f4f 	dsb	sy
 800b6c2:	60bb      	str	r3, [r7, #8]
}
 800b6c4:	bf00      	nop
 800b6c6:	e7fe      	b.n	800b6c6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b6c8:	f000 f87a 	bl	800b7c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b6cc:	2100      	movs	r1, #0
 800b6ce:	6878      	ldr	r0, [r7, #4]
 800b6d0:	f000 fea2 	bl	800c418 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b6d4:	f000 f882 	bl	800b7dc <xTaskResumeAll>
 800b6d8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d107      	bne.n	800b6f0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b6e0:	4b06      	ldr	r3, [pc, #24]	; (800b6fc <vTaskDelay+0x64>)
 800b6e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6e6:	601a      	str	r2, [r3, #0]
 800b6e8:	f3bf 8f4f 	dsb	sy
 800b6ec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b6f0:	bf00      	nop
 800b6f2:	3710      	adds	r7, #16
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}
 800b6f8:	200044ac 	.word	0x200044ac
 800b6fc:	e000ed04 	.word	0xe000ed04

0800b700 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b08a      	sub	sp, #40	; 0x28
 800b704:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b706:	2300      	movs	r3, #0
 800b708:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b70a:	2300      	movs	r3, #0
 800b70c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b70e:	463a      	mov	r2, r7
 800b710:	1d39      	adds	r1, r7, #4
 800b712:	f107 0308 	add.w	r3, r7, #8
 800b716:	4618      	mov	r0, r3
 800b718:	f7f5 fa7a 	bl	8000c10 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b71c:	6839      	ldr	r1, [r7, #0]
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	68ba      	ldr	r2, [r7, #8]
 800b722:	9202      	str	r2, [sp, #8]
 800b724:	9301      	str	r3, [sp, #4]
 800b726:	2300      	movs	r3, #0
 800b728:	9300      	str	r3, [sp, #0]
 800b72a:	2300      	movs	r3, #0
 800b72c:	460a      	mov	r2, r1
 800b72e:	491e      	ldr	r1, [pc, #120]	; (800b7a8 <vTaskStartScheduler+0xa8>)
 800b730:	481e      	ldr	r0, [pc, #120]	; (800b7ac <vTaskStartScheduler+0xac>)
 800b732:	f7ff fe1d 	bl	800b370 <xTaskCreateStatic>
 800b736:	4603      	mov	r3, r0
 800b738:	4a1d      	ldr	r2, [pc, #116]	; (800b7b0 <vTaskStartScheduler+0xb0>)
 800b73a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b73c:	4b1c      	ldr	r3, [pc, #112]	; (800b7b0 <vTaskStartScheduler+0xb0>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d002      	beq.n	800b74a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b744:	2301      	movs	r3, #1
 800b746:	617b      	str	r3, [r7, #20]
 800b748:	e001      	b.n	800b74e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b74a:	2300      	movs	r3, #0
 800b74c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b74e:	697b      	ldr	r3, [r7, #20]
 800b750:	2b01      	cmp	r3, #1
 800b752:	d116      	bne.n	800b782 <vTaskStartScheduler+0x82>
	__asm volatile
 800b754:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b758:	f383 8811 	msr	BASEPRI, r3
 800b75c:	f3bf 8f6f 	isb	sy
 800b760:	f3bf 8f4f 	dsb	sy
 800b764:	613b      	str	r3, [r7, #16]
}
 800b766:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b768:	4b12      	ldr	r3, [pc, #72]	; (800b7b4 <vTaskStartScheduler+0xb4>)
 800b76a:	f04f 32ff 	mov.w	r2, #4294967295
 800b76e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b770:	4b11      	ldr	r3, [pc, #68]	; (800b7b8 <vTaskStartScheduler+0xb8>)
 800b772:	2201      	movs	r2, #1
 800b774:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b776:	4b11      	ldr	r3, [pc, #68]	; (800b7bc <vTaskStartScheduler+0xbc>)
 800b778:	2200      	movs	r2, #0
 800b77a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b77c:	f7fe ff68 	bl	800a650 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b780:	e00e      	b.n	800b7a0 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b782:	697b      	ldr	r3, [r7, #20]
 800b784:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b788:	d10a      	bne.n	800b7a0 <vTaskStartScheduler+0xa0>
	__asm volatile
 800b78a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b78e:	f383 8811 	msr	BASEPRI, r3
 800b792:	f3bf 8f6f 	isb	sy
 800b796:	f3bf 8f4f 	dsb	sy
 800b79a:	60fb      	str	r3, [r7, #12]
}
 800b79c:	bf00      	nop
 800b79e:	e7fe      	b.n	800b79e <vTaskStartScheduler+0x9e>
}
 800b7a0:	bf00      	nop
 800b7a2:	3718      	adds	r7, #24
 800b7a4:	46bd      	mov	sp, r7
 800b7a6:	bd80      	pop	{r7, pc}
 800b7a8:	0800f8b4 	.word	0x0800f8b4
 800b7ac:	0800bd51 	.word	0x0800bd51
 800b7b0:	200044a8 	.word	0x200044a8
 800b7b4:	200044a4 	.word	0x200044a4
 800b7b8:	20004490 	.word	0x20004490
 800b7bc:	20004488 	.word	0x20004488

0800b7c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b7c0:	b480      	push	{r7}
 800b7c2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b7c4:	4b04      	ldr	r3, [pc, #16]	; (800b7d8 <vTaskSuspendAll+0x18>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	3301      	adds	r3, #1
 800b7ca:	4a03      	ldr	r2, [pc, #12]	; (800b7d8 <vTaskSuspendAll+0x18>)
 800b7cc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b7ce:	bf00      	nop
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d6:	4770      	bx	lr
 800b7d8:	200044ac 	.word	0x200044ac

0800b7dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b084      	sub	sp, #16
 800b7e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b7ea:	4b41      	ldr	r3, [pc, #260]	; (800b8f0 <xTaskResumeAll+0x114>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d10a      	bne.n	800b808 <xTaskResumeAll+0x2c>
	__asm volatile
 800b7f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7f6:	f383 8811 	msr	BASEPRI, r3
 800b7fa:	f3bf 8f6f 	isb	sy
 800b7fe:	f3bf 8f4f 	dsb	sy
 800b802:	603b      	str	r3, [r7, #0]
}
 800b804:	bf00      	nop
 800b806:	e7fe      	b.n	800b806 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b808:	f7fe ffc4 	bl	800a794 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b80c:	4b38      	ldr	r3, [pc, #224]	; (800b8f0 <xTaskResumeAll+0x114>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	3b01      	subs	r3, #1
 800b812:	4a37      	ldr	r2, [pc, #220]	; (800b8f0 <xTaskResumeAll+0x114>)
 800b814:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b816:	4b36      	ldr	r3, [pc, #216]	; (800b8f0 <xTaskResumeAll+0x114>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d161      	bne.n	800b8e2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b81e:	4b35      	ldr	r3, [pc, #212]	; (800b8f4 <xTaskResumeAll+0x118>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d05d      	beq.n	800b8e2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b826:	e02e      	b.n	800b886 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b828:	4b33      	ldr	r3, [pc, #204]	; (800b8f8 <xTaskResumeAll+0x11c>)
 800b82a:	68db      	ldr	r3, [r3, #12]
 800b82c:	68db      	ldr	r3, [r3, #12]
 800b82e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	3318      	adds	r3, #24
 800b834:	4618      	mov	r0, r3
 800b836:	f7fe fe53 	bl	800a4e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	3304      	adds	r3, #4
 800b83e:	4618      	mov	r0, r3
 800b840:	f7fe fe4e 	bl	800a4e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b848:	2201      	movs	r2, #1
 800b84a:	409a      	lsls	r2, r3
 800b84c:	4b2b      	ldr	r3, [pc, #172]	; (800b8fc <xTaskResumeAll+0x120>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	4313      	orrs	r3, r2
 800b852:	4a2a      	ldr	r2, [pc, #168]	; (800b8fc <xTaskResumeAll+0x120>)
 800b854:	6013      	str	r3, [r2, #0]
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b85a:	4613      	mov	r3, r2
 800b85c:	009b      	lsls	r3, r3, #2
 800b85e:	4413      	add	r3, r2
 800b860:	009b      	lsls	r3, r3, #2
 800b862:	4a27      	ldr	r2, [pc, #156]	; (800b900 <xTaskResumeAll+0x124>)
 800b864:	441a      	add	r2, r3
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	3304      	adds	r3, #4
 800b86a:	4619      	mov	r1, r3
 800b86c:	4610      	mov	r0, r2
 800b86e:	f7fe fdda 	bl	800a426 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b876:	4b23      	ldr	r3, [pc, #140]	; (800b904 <xTaskResumeAll+0x128>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b87c:	429a      	cmp	r2, r3
 800b87e:	d302      	bcc.n	800b886 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800b880:	4b21      	ldr	r3, [pc, #132]	; (800b908 <xTaskResumeAll+0x12c>)
 800b882:	2201      	movs	r2, #1
 800b884:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b886:	4b1c      	ldr	r3, [pc, #112]	; (800b8f8 <xTaskResumeAll+0x11c>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d1cc      	bne.n	800b828 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d001      	beq.n	800b898 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b894:	f000 fb12 	bl	800bebc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b898:	4b1c      	ldr	r3, [pc, #112]	; (800b90c <xTaskResumeAll+0x130>)
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d010      	beq.n	800b8c6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b8a4:	f000 f836 	bl	800b914 <xTaskIncrementTick>
 800b8a8:	4603      	mov	r3, r0
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d002      	beq.n	800b8b4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800b8ae:	4b16      	ldr	r3, [pc, #88]	; (800b908 <xTaskResumeAll+0x12c>)
 800b8b0:	2201      	movs	r2, #1
 800b8b2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	3b01      	subs	r3, #1
 800b8b8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d1f1      	bne.n	800b8a4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800b8c0:	4b12      	ldr	r3, [pc, #72]	; (800b90c <xTaskResumeAll+0x130>)
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b8c6:	4b10      	ldr	r3, [pc, #64]	; (800b908 <xTaskResumeAll+0x12c>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d009      	beq.n	800b8e2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b8ce:	2301      	movs	r3, #1
 800b8d0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b8d2:	4b0f      	ldr	r3, [pc, #60]	; (800b910 <xTaskResumeAll+0x134>)
 800b8d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8d8:	601a      	str	r2, [r3, #0]
 800b8da:	f3bf 8f4f 	dsb	sy
 800b8de:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b8e2:	f7fe ff87 	bl	800a7f4 <vPortExitCritical>

	return xAlreadyYielded;
 800b8e6:	68bb      	ldr	r3, [r7, #8]
}
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	3710      	adds	r7, #16
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd80      	pop	{r7, pc}
 800b8f0:	200044ac 	.word	0x200044ac
 800b8f4:	20004484 	.word	0x20004484
 800b8f8:	20004444 	.word	0x20004444
 800b8fc:	2000448c 	.word	0x2000448c
 800b900:	20004388 	.word	0x20004388
 800b904:	20004384 	.word	0x20004384
 800b908:	20004498 	.word	0x20004498
 800b90c:	20004494 	.word	0x20004494
 800b910:	e000ed04 	.word	0xe000ed04

0800b914 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b086      	sub	sp, #24
 800b918:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b91a:	2300      	movs	r3, #0
 800b91c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b91e:	4b4e      	ldr	r3, [pc, #312]	; (800ba58 <xTaskIncrementTick+0x144>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	2b00      	cmp	r3, #0
 800b924:	f040 808e 	bne.w	800ba44 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b928:	4b4c      	ldr	r3, [pc, #304]	; (800ba5c <xTaskIncrementTick+0x148>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	3301      	adds	r3, #1
 800b92e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b930:	4a4a      	ldr	r2, [pc, #296]	; (800ba5c <xTaskIncrementTick+0x148>)
 800b932:	693b      	ldr	r3, [r7, #16]
 800b934:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b936:	693b      	ldr	r3, [r7, #16]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d120      	bne.n	800b97e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b93c:	4b48      	ldr	r3, [pc, #288]	; (800ba60 <xTaskIncrementTick+0x14c>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d00a      	beq.n	800b95c <xTaskIncrementTick+0x48>
	__asm volatile
 800b946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b94a:	f383 8811 	msr	BASEPRI, r3
 800b94e:	f3bf 8f6f 	isb	sy
 800b952:	f3bf 8f4f 	dsb	sy
 800b956:	603b      	str	r3, [r7, #0]
}
 800b958:	bf00      	nop
 800b95a:	e7fe      	b.n	800b95a <xTaskIncrementTick+0x46>
 800b95c:	4b40      	ldr	r3, [pc, #256]	; (800ba60 <xTaskIncrementTick+0x14c>)
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	60fb      	str	r3, [r7, #12]
 800b962:	4b40      	ldr	r3, [pc, #256]	; (800ba64 <xTaskIncrementTick+0x150>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	4a3e      	ldr	r2, [pc, #248]	; (800ba60 <xTaskIncrementTick+0x14c>)
 800b968:	6013      	str	r3, [r2, #0]
 800b96a:	4a3e      	ldr	r2, [pc, #248]	; (800ba64 <xTaskIncrementTick+0x150>)
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	6013      	str	r3, [r2, #0]
 800b970:	4b3d      	ldr	r3, [pc, #244]	; (800ba68 <xTaskIncrementTick+0x154>)
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	3301      	adds	r3, #1
 800b976:	4a3c      	ldr	r2, [pc, #240]	; (800ba68 <xTaskIncrementTick+0x154>)
 800b978:	6013      	str	r3, [r2, #0]
 800b97a:	f000 fa9f 	bl	800bebc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b97e:	4b3b      	ldr	r3, [pc, #236]	; (800ba6c <xTaskIncrementTick+0x158>)
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	693a      	ldr	r2, [r7, #16]
 800b984:	429a      	cmp	r2, r3
 800b986:	d348      	bcc.n	800ba1a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b988:	4b35      	ldr	r3, [pc, #212]	; (800ba60 <xTaskIncrementTick+0x14c>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d104      	bne.n	800b99c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b992:	4b36      	ldr	r3, [pc, #216]	; (800ba6c <xTaskIncrementTick+0x158>)
 800b994:	f04f 32ff 	mov.w	r2, #4294967295
 800b998:	601a      	str	r2, [r3, #0]
					break;
 800b99a:	e03e      	b.n	800ba1a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b99c:	4b30      	ldr	r3, [pc, #192]	; (800ba60 <xTaskIncrementTick+0x14c>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	68db      	ldr	r3, [r3, #12]
 800b9a2:	68db      	ldr	r3, [r3, #12]
 800b9a4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	685b      	ldr	r3, [r3, #4]
 800b9aa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b9ac:	693a      	ldr	r2, [r7, #16]
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	429a      	cmp	r2, r3
 800b9b2:	d203      	bcs.n	800b9bc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b9b4:	4a2d      	ldr	r2, [pc, #180]	; (800ba6c <xTaskIncrementTick+0x158>)
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b9ba:	e02e      	b.n	800ba1a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	3304      	adds	r3, #4
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	f7fe fd8d 	bl	800a4e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d004      	beq.n	800b9d8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	3318      	adds	r3, #24
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f7fe fd84 	bl	800a4e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b9d8:	68bb      	ldr	r3, [r7, #8]
 800b9da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9dc:	2201      	movs	r2, #1
 800b9de:	409a      	lsls	r2, r3
 800b9e0:	4b23      	ldr	r3, [pc, #140]	; (800ba70 <xTaskIncrementTick+0x15c>)
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	4313      	orrs	r3, r2
 800b9e6:	4a22      	ldr	r2, [pc, #136]	; (800ba70 <xTaskIncrementTick+0x15c>)
 800b9e8:	6013      	str	r3, [r2, #0]
 800b9ea:	68bb      	ldr	r3, [r7, #8]
 800b9ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9ee:	4613      	mov	r3, r2
 800b9f0:	009b      	lsls	r3, r3, #2
 800b9f2:	4413      	add	r3, r2
 800b9f4:	009b      	lsls	r3, r3, #2
 800b9f6:	4a1f      	ldr	r2, [pc, #124]	; (800ba74 <xTaskIncrementTick+0x160>)
 800b9f8:	441a      	add	r2, r3
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	3304      	adds	r3, #4
 800b9fe:	4619      	mov	r1, r3
 800ba00:	4610      	mov	r0, r2
 800ba02:	f7fe fd10 	bl	800a426 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba0a:	4b1b      	ldr	r3, [pc, #108]	; (800ba78 <xTaskIncrementTick+0x164>)
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba10:	429a      	cmp	r2, r3
 800ba12:	d3b9      	bcc.n	800b988 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ba14:	2301      	movs	r3, #1
 800ba16:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba18:	e7b6      	b.n	800b988 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ba1a:	4b17      	ldr	r3, [pc, #92]	; (800ba78 <xTaskIncrementTick+0x164>)
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba20:	4914      	ldr	r1, [pc, #80]	; (800ba74 <xTaskIncrementTick+0x160>)
 800ba22:	4613      	mov	r3, r2
 800ba24:	009b      	lsls	r3, r3, #2
 800ba26:	4413      	add	r3, r2
 800ba28:	009b      	lsls	r3, r3, #2
 800ba2a:	440b      	add	r3, r1
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	2b01      	cmp	r3, #1
 800ba30:	d901      	bls.n	800ba36 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800ba32:	2301      	movs	r3, #1
 800ba34:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ba36:	4b11      	ldr	r3, [pc, #68]	; (800ba7c <xTaskIncrementTick+0x168>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d007      	beq.n	800ba4e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800ba3e:	2301      	movs	r3, #1
 800ba40:	617b      	str	r3, [r7, #20]
 800ba42:	e004      	b.n	800ba4e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ba44:	4b0e      	ldr	r3, [pc, #56]	; (800ba80 <xTaskIncrementTick+0x16c>)
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	3301      	adds	r3, #1
 800ba4a:	4a0d      	ldr	r2, [pc, #52]	; (800ba80 <xTaskIncrementTick+0x16c>)
 800ba4c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ba4e:	697b      	ldr	r3, [r7, #20]
}
 800ba50:	4618      	mov	r0, r3
 800ba52:	3718      	adds	r7, #24
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}
 800ba58:	200044ac 	.word	0x200044ac
 800ba5c:	20004488 	.word	0x20004488
 800ba60:	2000443c 	.word	0x2000443c
 800ba64:	20004440 	.word	0x20004440
 800ba68:	2000449c 	.word	0x2000449c
 800ba6c:	200044a4 	.word	0x200044a4
 800ba70:	2000448c 	.word	0x2000448c
 800ba74:	20004388 	.word	0x20004388
 800ba78:	20004384 	.word	0x20004384
 800ba7c:	20004498 	.word	0x20004498
 800ba80:	20004494 	.word	0x20004494

0800ba84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ba84:	b480      	push	{r7}
 800ba86:	b087      	sub	sp, #28
 800ba88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ba8a:	4b27      	ldr	r3, [pc, #156]	; (800bb28 <vTaskSwitchContext+0xa4>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d003      	beq.n	800ba9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ba92:	4b26      	ldr	r3, [pc, #152]	; (800bb2c <vTaskSwitchContext+0xa8>)
 800ba94:	2201      	movs	r2, #1
 800ba96:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ba98:	e03f      	b.n	800bb1a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800ba9a:	4b24      	ldr	r3, [pc, #144]	; (800bb2c <vTaskSwitchContext+0xa8>)
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800baa0:	4b23      	ldr	r3, [pc, #140]	; (800bb30 <vTaskSwitchContext+0xac>)
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	fab3 f383 	clz	r3, r3
 800baac:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800baae:	7afb      	ldrb	r3, [r7, #11]
 800bab0:	f1c3 031f 	rsb	r3, r3, #31
 800bab4:	617b      	str	r3, [r7, #20]
 800bab6:	491f      	ldr	r1, [pc, #124]	; (800bb34 <vTaskSwitchContext+0xb0>)
 800bab8:	697a      	ldr	r2, [r7, #20]
 800baba:	4613      	mov	r3, r2
 800babc:	009b      	lsls	r3, r3, #2
 800babe:	4413      	add	r3, r2
 800bac0:	009b      	lsls	r3, r3, #2
 800bac2:	440b      	add	r3, r1
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d10a      	bne.n	800bae0 <vTaskSwitchContext+0x5c>
	__asm volatile
 800baca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bace:	f383 8811 	msr	BASEPRI, r3
 800bad2:	f3bf 8f6f 	isb	sy
 800bad6:	f3bf 8f4f 	dsb	sy
 800bada:	607b      	str	r3, [r7, #4]
}
 800badc:	bf00      	nop
 800bade:	e7fe      	b.n	800bade <vTaskSwitchContext+0x5a>
 800bae0:	697a      	ldr	r2, [r7, #20]
 800bae2:	4613      	mov	r3, r2
 800bae4:	009b      	lsls	r3, r3, #2
 800bae6:	4413      	add	r3, r2
 800bae8:	009b      	lsls	r3, r3, #2
 800baea:	4a12      	ldr	r2, [pc, #72]	; (800bb34 <vTaskSwitchContext+0xb0>)
 800baec:	4413      	add	r3, r2
 800baee:	613b      	str	r3, [r7, #16]
 800baf0:	693b      	ldr	r3, [r7, #16]
 800baf2:	685b      	ldr	r3, [r3, #4]
 800baf4:	685a      	ldr	r2, [r3, #4]
 800baf6:	693b      	ldr	r3, [r7, #16]
 800baf8:	605a      	str	r2, [r3, #4]
 800bafa:	693b      	ldr	r3, [r7, #16]
 800bafc:	685a      	ldr	r2, [r3, #4]
 800bafe:	693b      	ldr	r3, [r7, #16]
 800bb00:	3308      	adds	r3, #8
 800bb02:	429a      	cmp	r2, r3
 800bb04:	d104      	bne.n	800bb10 <vTaskSwitchContext+0x8c>
 800bb06:	693b      	ldr	r3, [r7, #16]
 800bb08:	685b      	ldr	r3, [r3, #4]
 800bb0a:	685a      	ldr	r2, [r3, #4]
 800bb0c:	693b      	ldr	r3, [r7, #16]
 800bb0e:	605a      	str	r2, [r3, #4]
 800bb10:	693b      	ldr	r3, [r7, #16]
 800bb12:	685b      	ldr	r3, [r3, #4]
 800bb14:	68db      	ldr	r3, [r3, #12]
 800bb16:	4a08      	ldr	r2, [pc, #32]	; (800bb38 <vTaskSwitchContext+0xb4>)
 800bb18:	6013      	str	r3, [r2, #0]
}
 800bb1a:	bf00      	nop
 800bb1c:	371c      	adds	r7, #28
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb24:	4770      	bx	lr
 800bb26:	bf00      	nop
 800bb28:	200044ac 	.word	0x200044ac
 800bb2c:	20004498 	.word	0x20004498
 800bb30:	2000448c 	.word	0x2000448c
 800bb34:	20004388 	.word	0x20004388
 800bb38:	20004384 	.word	0x20004384

0800bb3c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b084      	sub	sp, #16
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
 800bb44:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d10a      	bne.n	800bb62 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bb4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb50:	f383 8811 	msr	BASEPRI, r3
 800bb54:	f3bf 8f6f 	isb	sy
 800bb58:	f3bf 8f4f 	dsb	sy
 800bb5c:	60fb      	str	r3, [r7, #12]
}
 800bb5e:	bf00      	nop
 800bb60:	e7fe      	b.n	800bb60 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bb62:	4b07      	ldr	r3, [pc, #28]	; (800bb80 <vTaskPlaceOnEventList+0x44>)
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	3318      	adds	r3, #24
 800bb68:	4619      	mov	r1, r3
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f7fe fc7f 	bl	800a46e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bb70:	2101      	movs	r1, #1
 800bb72:	6838      	ldr	r0, [r7, #0]
 800bb74:	f000 fc50 	bl	800c418 <prvAddCurrentTaskToDelayedList>
}
 800bb78:	bf00      	nop
 800bb7a:	3710      	adds	r7, #16
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}
 800bb80:	20004384 	.word	0x20004384

0800bb84 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b086      	sub	sp, #24
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	68db      	ldr	r3, [r3, #12]
 800bb90:	68db      	ldr	r3, [r3, #12]
 800bb92:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bb94:	693b      	ldr	r3, [r7, #16]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d10a      	bne.n	800bbb0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bb9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb9e:	f383 8811 	msr	BASEPRI, r3
 800bba2:	f3bf 8f6f 	isb	sy
 800bba6:	f3bf 8f4f 	dsb	sy
 800bbaa:	60fb      	str	r3, [r7, #12]
}
 800bbac:	bf00      	nop
 800bbae:	e7fe      	b.n	800bbae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bbb0:	693b      	ldr	r3, [r7, #16]
 800bbb2:	3318      	adds	r3, #24
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f7fe fc93 	bl	800a4e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bbba:	4b1d      	ldr	r3, [pc, #116]	; (800bc30 <xTaskRemoveFromEventList+0xac>)
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d11c      	bne.n	800bbfc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bbc2:	693b      	ldr	r3, [r7, #16]
 800bbc4:	3304      	adds	r3, #4
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	f7fe fc8a 	bl	800a4e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bbcc:	693b      	ldr	r3, [r7, #16]
 800bbce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbd0:	2201      	movs	r2, #1
 800bbd2:	409a      	lsls	r2, r3
 800bbd4:	4b17      	ldr	r3, [pc, #92]	; (800bc34 <xTaskRemoveFromEventList+0xb0>)
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	4313      	orrs	r3, r2
 800bbda:	4a16      	ldr	r2, [pc, #88]	; (800bc34 <xTaskRemoveFromEventList+0xb0>)
 800bbdc:	6013      	str	r3, [r2, #0]
 800bbde:	693b      	ldr	r3, [r7, #16]
 800bbe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbe2:	4613      	mov	r3, r2
 800bbe4:	009b      	lsls	r3, r3, #2
 800bbe6:	4413      	add	r3, r2
 800bbe8:	009b      	lsls	r3, r3, #2
 800bbea:	4a13      	ldr	r2, [pc, #76]	; (800bc38 <xTaskRemoveFromEventList+0xb4>)
 800bbec:	441a      	add	r2, r3
 800bbee:	693b      	ldr	r3, [r7, #16]
 800bbf0:	3304      	adds	r3, #4
 800bbf2:	4619      	mov	r1, r3
 800bbf4:	4610      	mov	r0, r2
 800bbf6:	f7fe fc16 	bl	800a426 <vListInsertEnd>
 800bbfa:	e005      	b.n	800bc08 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	3318      	adds	r3, #24
 800bc00:	4619      	mov	r1, r3
 800bc02:	480e      	ldr	r0, [pc, #56]	; (800bc3c <xTaskRemoveFromEventList+0xb8>)
 800bc04:	f7fe fc0f 	bl	800a426 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bc08:	693b      	ldr	r3, [r7, #16]
 800bc0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc0c:	4b0c      	ldr	r3, [pc, #48]	; (800bc40 <xTaskRemoveFromEventList+0xbc>)
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc12:	429a      	cmp	r2, r3
 800bc14:	d905      	bls.n	800bc22 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bc16:	2301      	movs	r3, #1
 800bc18:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bc1a:	4b0a      	ldr	r3, [pc, #40]	; (800bc44 <xTaskRemoveFromEventList+0xc0>)
 800bc1c:	2201      	movs	r2, #1
 800bc1e:	601a      	str	r2, [r3, #0]
 800bc20:	e001      	b.n	800bc26 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800bc22:	2300      	movs	r3, #0
 800bc24:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bc26:	697b      	ldr	r3, [r7, #20]
}
 800bc28:	4618      	mov	r0, r3
 800bc2a:	3718      	adds	r7, #24
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}
 800bc30:	200044ac 	.word	0x200044ac
 800bc34:	2000448c 	.word	0x2000448c
 800bc38:	20004388 	.word	0x20004388
 800bc3c:	20004444 	.word	0x20004444
 800bc40:	20004384 	.word	0x20004384
 800bc44:	20004498 	.word	0x20004498

0800bc48 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bc48:	b480      	push	{r7}
 800bc4a:	b083      	sub	sp, #12
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bc50:	4b06      	ldr	r3, [pc, #24]	; (800bc6c <vTaskInternalSetTimeOutState+0x24>)
 800bc52:	681a      	ldr	r2, [r3, #0]
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bc58:	4b05      	ldr	r3, [pc, #20]	; (800bc70 <vTaskInternalSetTimeOutState+0x28>)
 800bc5a:	681a      	ldr	r2, [r3, #0]
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	605a      	str	r2, [r3, #4]
}
 800bc60:	bf00      	nop
 800bc62:	370c      	adds	r7, #12
 800bc64:	46bd      	mov	sp, r7
 800bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6a:	4770      	bx	lr
 800bc6c:	2000449c 	.word	0x2000449c
 800bc70:	20004488 	.word	0x20004488

0800bc74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b088      	sub	sp, #32
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
 800bc7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d10a      	bne.n	800bc9a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bc84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc88:	f383 8811 	msr	BASEPRI, r3
 800bc8c:	f3bf 8f6f 	isb	sy
 800bc90:	f3bf 8f4f 	dsb	sy
 800bc94:	613b      	str	r3, [r7, #16]
}
 800bc96:	bf00      	nop
 800bc98:	e7fe      	b.n	800bc98 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d10a      	bne.n	800bcb6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bca4:	f383 8811 	msr	BASEPRI, r3
 800bca8:	f3bf 8f6f 	isb	sy
 800bcac:	f3bf 8f4f 	dsb	sy
 800bcb0:	60fb      	str	r3, [r7, #12]
}
 800bcb2:	bf00      	nop
 800bcb4:	e7fe      	b.n	800bcb4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bcb6:	f7fe fd6d 	bl	800a794 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bcba:	4b1d      	ldr	r3, [pc, #116]	; (800bd30 <xTaskCheckForTimeOut+0xbc>)
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	685b      	ldr	r3, [r3, #4]
 800bcc4:	69ba      	ldr	r2, [r7, #24]
 800bcc6:	1ad3      	subs	r3, r2, r3
 800bcc8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcd2:	d102      	bne.n	800bcda <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	61fb      	str	r3, [r7, #28]
 800bcd8:	e023      	b.n	800bd22 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681a      	ldr	r2, [r3, #0]
 800bcde:	4b15      	ldr	r3, [pc, #84]	; (800bd34 <xTaskCheckForTimeOut+0xc0>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	429a      	cmp	r2, r3
 800bce4:	d007      	beq.n	800bcf6 <xTaskCheckForTimeOut+0x82>
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	685b      	ldr	r3, [r3, #4]
 800bcea:	69ba      	ldr	r2, [r7, #24]
 800bcec:	429a      	cmp	r2, r3
 800bcee:	d302      	bcc.n	800bcf6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bcf0:	2301      	movs	r3, #1
 800bcf2:	61fb      	str	r3, [r7, #28]
 800bcf4:	e015      	b.n	800bd22 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	697a      	ldr	r2, [r7, #20]
 800bcfc:	429a      	cmp	r2, r3
 800bcfe:	d20b      	bcs.n	800bd18 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	681a      	ldr	r2, [r3, #0]
 800bd04:	697b      	ldr	r3, [r7, #20]
 800bd06:	1ad2      	subs	r2, r2, r3
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bd0c:	6878      	ldr	r0, [r7, #4]
 800bd0e:	f7ff ff9b 	bl	800bc48 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bd12:	2300      	movs	r3, #0
 800bd14:	61fb      	str	r3, [r7, #28]
 800bd16:	e004      	b.n	800bd22 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bd1e:	2301      	movs	r3, #1
 800bd20:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bd22:	f7fe fd67 	bl	800a7f4 <vPortExitCritical>

	return xReturn;
 800bd26:	69fb      	ldr	r3, [r7, #28]
}
 800bd28:	4618      	mov	r0, r3
 800bd2a:	3720      	adds	r7, #32
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	bd80      	pop	{r7, pc}
 800bd30:	20004488 	.word	0x20004488
 800bd34:	2000449c 	.word	0x2000449c

0800bd38 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bd38:	b480      	push	{r7}
 800bd3a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bd3c:	4b03      	ldr	r3, [pc, #12]	; (800bd4c <vTaskMissedYield+0x14>)
 800bd3e:	2201      	movs	r2, #1
 800bd40:	601a      	str	r2, [r3, #0]
}
 800bd42:	bf00      	nop
 800bd44:	46bd      	mov	sp, r7
 800bd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4a:	4770      	bx	lr
 800bd4c:	20004498 	.word	0x20004498

0800bd50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b082      	sub	sp, #8
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bd58:	f000 f852 	bl	800be00 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bd5c:	4b06      	ldr	r3, [pc, #24]	; (800bd78 <prvIdleTask+0x28>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	2b01      	cmp	r3, #1
 800bd62:	d9f9      	bls.n	800bd58 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bd64:	4b05      	ldr	r3, [pc, #20]	; (800bd7c <prvIdleTask+0x2c>)
 800bd66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd6a:	601a      	str	r2, [r3, #0]
 800bd6c:	f3bf 8f4f 	dsb	sy
 800bd70:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bd74:	e7f0      	b.n	800bd58 <prvIdleTask+0x8>
 800bd76:	bf00      	nop
 800bd78:	20004388 	.word	0x20004388
 800bd7c:	e000ed04 	.word	0xe000ed04

0800bd80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b082      	sub	sp, #8
 800bd84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd86:	2300      	movs	r3, #0
 800bd88:	607b      	str	r3, [r7, #4]
 800bd8a:	e00c      	b.n	800bda6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bd8c:	687a      	ldr	r2, [r7, #4]
 800bd8e:	4613      	mov	r3, r2
 800bd90:	009b      	lsls	r3, r3, #2
 800bd92:	4413      	add	r3, r2
 800bd94:	009b      	lsls	r3, r3, #2
 800bd96:	4a12      	ldr	r2, [pc, #72]	; (800bde0 <prvInitialiseTaskLists+0x60>)
 800bd98:	4413      	add	r3, r2
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f7fe fb16 	bl	800a3cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	3301      	adds	r3, #1
 800bda4:	607b      	str	r3, [r7, #4]
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2b06      	cmp	r3, #6
 800bdaa:	d9ef      	bls.n	800bd8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bdac:	480d      	ldr	r0, [pc, #52]	; (800bde4 <prvInitialiseTaskLists+0x64>)
 800bdae:	f7fe fb0d 	bl	800a3cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bdb2:	480d      	ldr	r0, [pc, #52]	; (800bde8 <prvInitialiseTaskLists+0x68>)
 800bdb4:	f7fe fb0a 	bl	800a3cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bdb8:	480c      	ldr	r0, [pc, #48]	; (800bdec <prvInitialiseTaskLists+0x6c>)
 800bdba:	f7fe fb07 	bl	800a3cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bdbe:	480c      	ldr	r0, [pc, #48]	; (800bdf0 <prvInitialiseTaskLists+0x70>)
 800bdc0:	f7fe fb04 	bl	800a3cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bdc4:	480b      	ldr	r0, [pc, #44]	; (800bdf4 <prvInitialiseTaskLists+0x74>)
 800bdc6:	f7fe fb01 	bl	800a3cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bdca:	4b0b      	ldr	r3, [pc, #44]	; (800bdf8 <prvInitialiseTaskLists+0x78>)
 800bdcc:	4a05      	ldr	r2, [pc, #20]	; (800bde4 <prvInitialiseTaskLists+0x64>)
 800bdce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bdd0:	4b0a      	ldr	r3, [pc, #40]	; (800bdfc <prvInitialiseTaskLists+0x7c>)
 800bdd2:	4a05      	ldr	r2, [pc, #20]	; (800bde8 <prvInitialiseTaskLists+0x68>)
 800bdd4:	601a      	str	r2, [r3, #0]
}
 800bdd6:	bf00      	nop
 800bdd8:	3708      	adds	r7, #8
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd80      	pop	{r7, pc}
 800bdde:	bf00      	nop
 800bde0:	20004388 	.word	0x20004388
 800bde4:	20004414 	.word	0x20004414
 800bde8:	20004428 	.word	0x20004428
 800bdec:	20004444 	.word	0x20004444
 800bdf0:	20004458 	.word	0x20004458
 800bdf4:	20004470 	.word	0x20004470
 800bdf8:	2000443c 	.word	0x2000443c
 800bdfc:	20004440 	.word	0x20004440

0800be00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b082      	sub	sp, #8
 800be04:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800be06:	e019      	b.n	800be3c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800be08:	f7fe fcc4 	bl	800a794 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be0c:	4b10      	ldr	r3, [pc, #64]	; (800be50 <prvCheckTasksWaitingTermination+0x50>)
 800be0e:	68db      	ldr	r3, [r3, #12]
 800be10:	68db      	ldr	r3, [r3, #12]
 800be12:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	3304      	adds	r3, #4
 800be18:	4618      	mov	r0, r3
 800be1a:	f7fe fb61 	bl	800a4e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800be1e:	4b0d      	ldr	r3, [pc, #52]	; (800be54 <prvCheckTasksWaitingTermination+0x54>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	3b01      	subs	r3, #1
 800be24:	4a0b      	ldr	r2, [pc, #44]	; (800be54 <prvCheckTasksWaitingTermination+0x54>)
 800be26:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800be28:	4b0b      	ldr	r3, [pc, #44]	; (800be58 <prvCheckTasksWaitingTermination+0x58>)
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	3b01      	subs	r3, #1
 800be2e:	4a0a      	ldr	r2, [pc, #40]	; (800be58 <prvCheckTasksWaitingTermination+0x58>)
 800be30:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800be32:	f7fe fcdf 	bl	800a7f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	f000 f810 	bl	800be5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800be3c:	4b06      	ldr	r3, [pc, #24]	; (800be58 <prvCheckTasksWaitingTermination+0x58>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d1e1      	bne.n	800be08 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800be44:	bf00      	nop
 800be46:	bf00      	nop
 800be48:	3708      	adds	r7, #8
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}
 800be4e:	bf00      	nop
 800be50:	20004458 	.word	0x20004458
 800be54:	20004484 	.word	0x20004484
 800be58:	2000446c 	.word	0x2000446c

0800be5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b084      	sub	sp, #16
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d108      	bne.n	800be80 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be72:	4618      	mov	r0, r3
 800be74:	f7fe f98c 	bl	800a190 <vPortFree>
				vPortFree( pxTCB );
 800be78:	6878      	ldr	r0, [r7, #4]
 800be7a:	f7fe f989 	bl	800a190 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800be7e:	e018      	b.n	800beb2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800be86:	2b01      	cmp	r3, #1
 800be88:	d103      	bne.n	800be92 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800be8a:	6878      	ldr	r0, [r7, #4]
 800be8c:	f7fe f980 	bl	800a190 <vPortFree>
	}
 800be90:	e00f      	b.n	800beb2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800be98:	2b02      	cmp	r3, #2
 800be9a:	d00a      	beq.n	800beb2 <prvDeleteTCB+0x56>
	__asm volatile
 800be9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bea0:	f383 8811 	msr	BASEPRI, r3
 800bea4:	f3bf 8f6f 	isb	sy
 800bea8:	f3bf 8f4f 	dsb	sy
 800beac:	60fb      	str	r3, [r7, #12]
}
 800beae:	bf00      	nop
 800beb0:	e7fe      	b.n	800beb0 <prvDeleteTCB+0x54>
	}
 800beb2:	bf00      	nop
 800beb4:	3710      	adds	r7, #16
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}
	...

0800bebc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bebc:	b480      	push	{r7}
 800bebe:	b083      	sub	sp, #12
 800bec0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bec2:	4b0c      	ldr	r3, [pc, #48]	; (800bef4 <prvResetNextTaskUnblockTime+0x38>)
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d104      	bne.n	800bed6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800becc:	4b0a      	ldr	r3, [pc, #40]	; (800bef8 <prvResetNextTaskUnblockTime+0x3c>)
 800bece:	f04f 32ff 	mov.w	r2, #4294967295
 800bed2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bed4:	e008      	b.n	800bee8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bed6:	4b07      	ldr	r3, [pc, #28]	; (800bef4 <prvResetNextTaskUnblockTime+0x38>)
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	68db      	ldr	r3, [r3, #12]
 800bedc:	68db      	ldr	r3, [r3, #12]
 800bede:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	685b      	ldr	r3, [r3, #4]
 800bee4:	4a04      	ldr	r2, [pc, #16]	; (800bef8 <prvResetNextTaskUnblockTime+0x3c>)
 800bee6:	6013      	str	r3, [r2, #0]
}
 800bee8:	bf00      	nop
 800beea:	370c      	adds	r7, #12
 800beec:	46bd      	mov	sp, r7
 800beee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef2:	4770      	bx	lr
 800bef4:	2000443c 	.word	0x2000443c
 800bef8:	200044a4 	.word	0x200044a4

0800befc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800befc:	b480      	push	{r7}
 800befe:	b083      	sub	sp, #12
 800bf00:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bf02:	4b0b      	ldr	r3, [pc, #44]	; (800bf30 <xTaskGetSchedulerState+0x34>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d102      	bne.n	800bf10 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bf0a:	2301      	movs	r3, #1
 800bf0c:	607b      	str	r3, [r7, #4]
 800bf0e:	e008      	b.n	800bf22 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf10:	4b08      	ldr	r3, [pc, #32]	; (800bf34 <xTaskGetSchedulerState+0x38>)
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d102      	bne.n	800bf1e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bf18:	2302      	movs	r3, #2
 800bf1a:	607b      	str	r3, [r7, #4]
 800bf1c:	e001      	b.n	800bf22 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bf22:	687b      	ldr	r3, [r7, #4]
	}
 800bf24:	4618      	mov	r0, r3
 800bf26:	370c      	adds	r7, #12
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2e:	4770      	bx	lr
 800bf30:	20004490 	.word	0x20004490
 800bf34:	200044ac 	.word	0x200044ac

0800bf38 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b086      	sub	sp, #24
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bf44:	2300      	movs	r3, #0
 800bf46:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d06e      	beq.n	800c02c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bf4e:	4b3a      	ldr	r3, [pc, #232]	; (800c038 <xTaskPriorityDisinherit+0x100>)
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	693a      	ldr	r2, [r7, #16]
 800bf54:	429a      	cmp	r2, r3
 800bf56:	d00a      	beq.n	800bf6e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800bf58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf5c:	f383 8811 	msr	BASEPRI, r3
 800bf60:	f3bf 8f6f 	isb	sy
 800bf64:	f3bf 8f4f 	dsb	sy
 800bf68:	60fb      	str	r3, [r7, #12]
}
 800bf6a:	bf00      	nop
 800bf6c:	e7fe      	b.n	800bf6c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bf6e:	693b      	ldr	r3, [r7, #16]
 800bf70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d10a      	bne.n	800bf8c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800bf76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf7a:	f383 8811 	msr	BASEPRI, r3
 800bf7e:	f3bf 8f6f 	isb	sy
 800bf82:	f3bf 8f4f 	dsb	sy
 800bf86:	60bb      	str	r3, [r7, #8]
}
 800bf88:	bf00      	nop
 800bf8a:	e7fe      	b.n	800bf8a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800bf8c:	693b      	ldr	r3, [r7, #16]
 800bf8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf90:	1e5a      	subs	r2, r3, #1
 800bf92:	693b      	ldr	r3, [r7, #16]
 800bf94:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bf96:	693b      	ldr	r3, [r7, #16]
 800bf98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf9a:	693b      	ldr	r3, [r7, #16]
 800bf9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf9e:	429a      	cmp	r2, r3
 800bfa0:	d044      	beq.n	800c02c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bfa2:	693b      	ldr	r3, [r7, #16]
 800bfa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d140      	bne.n	800c02c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bfaa:	693b      	ldr	r3, [r7, #16]
 800bfac:	3304      	adds	r3, #4
 800bfae:	4618      	mov	r0, r3
 800bfb0:	f7fe fa96 	bl	800a4e0 <uxListRemove>
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d115      	bne.n	800bfe6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800bfba:	693b      	ldr	r3, [r7, #16]
 800bfbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfbe:	491f      	ldr	r1, [pc, #124]	; (800c03c <xTaskPriorityDisinherit+0x104>)
 800bfc0:	4613      	mov	r3, r2
 800bfc2:	009b      	lsls	r3, r3, #2
 800bfc4:	4413      	add	r3, r2
 800bfc6:	009b      	lsls	r3, r3, #2
 800bfc8:	440b      	add	r3, r1
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d10a      	bne.n	800bfe6 <xTaskPriorityDisinherit+0xae>
 800bfd0:	693b      	ldr	r3, [r7, #16]
 800bfd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfd4:	2201      	movs	r2, #1
 800bfd6:	fa02 f303 	lsl.w	r3, r2, r3
 800bfda:	43da      	mvns	r2, r3
 800bfdc:	4b18      	ldr	r3, [pc, #96]	; (800c040 <xTaskPriorityDisinherit+0x108>)
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	4013      	ands	r3, r2
 800bfe2:	4a17      	ldr	r2, [pc, #92]	; (800c040 <xTaskPriorityDisinherit+0x108>)
 800bfe4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bfe6:	693b      	ldr	r3, [r7, #16]
 800bfe8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bfea:	693b      	ldr	r3, [r7, #16]
 800bfec:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bfee:	693b      	ldr	r3, [r7, #16]
 800bff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bff2:	f1c3 0207 	rsb	r2, r3, #7
 800bff6:	693b      	ldr	r3, [r7, #16]
 800bff8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bffa:	693b      	ldr	r3, [r7, #16]
 800bffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bffe:	2201      	movs	r2, #1
 800c000:	409a      	lsls	r2, r3
 800c002:	4b0f      	ldr	r3, [pc, #60]	; (800c040 <xTaskPriorityDisinherit+0x108>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	4313      	orrs	r3, r2
 800c008:	4a0d      	ldr	r2, [pc, #52]	; (800c040 <xTaskPriorityDisinherit+0x108>)
 800c00a:	6013      	str	r3, [r2, #0]
 800c00c:	693b      	ldr	r3, [r7, #16]
 800c00e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c010:	4613      	mov	r3, r2
 800c012:	009b      	lsls	r3, r3, #2
 800c014:	4413      	add	r3, r2
 800c016:	009b      	lsls	r3, r3, #2
 800c018:	4a08      	ldr	r2, [pc, #32]	; (800c03c <xTaskPriorityDisinherit+0x104>)
 800c01a:	441a      	add	r2, r3
 800c01c:	693b      	ldr	r3, [r7, #16]
 800c01e:	3304      	adds	r3, #4
 800c020:	4619      	mov	r1, r3
 800c022:	4610      	mov	r0, r2
 800c024:	f7fe f9ff 	bl	800a426 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c028:	2301      	movs	r3, #1
 800c02a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c02c:	697b      	ldr	r3, [r7, #20]
	}
 800c02e:	4618      	mov	r0, r3
 800c030:	3718      	adds	r7, #24
 800c032:	46bd      	mov	sp, r7
 800c034:	bd80      	pop	{r7, pc}
 800c036:	bf00      	nop
 800c038:	20004384 	.word	0x20004384
 800c03c:	20004388 	.word	0x20004388
 800c040:	2000448c 	.word	0x2000448c

0800c044 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800c044:	b580      	push	{r7, lr}
 800c046:	b086      	sub	sp, #24
 800c048:	af00      	add	r7, sp, #0
 800c04a:	60f8      	str	r0, [r7, #12]
 800c04c:	60b9      	str	r1, [r7, #8]
 800c04e:	607a      	str	r2, [r7, #4]
 800c050:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800c052:	f7fe fb9f 	bl	800a794 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800c056:	4b26      	ldr	r3, [pc, #152]	; (800c0f0 <xTaskNotifyWait+0xac>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c05e:	b2db      	uxtb	r3, r3
 800c060:	2b02      	cmp	r3, #2
 800c062:	d01a      	beq.n	800c09a <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800c064:	4b22      	ldr	r3, [pc, #136]	; (800c0f0 <xTaskNotifyWait+0xac>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800c06a:	68fa      	ldr	r2, [r7, #12]
 800c06c:	43d2      	mvns	r2, r2
 800c06e:	400a      	ands	r2, r1
 800c070:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800c072:	4b1f      	ldr	r3, [pc, #124]	; (800c0f0 <xTaskNotifyWait+0xac>)
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	2201      	movs	r2, #1
 800c078:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d00b      	beq.n	800c09a <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c082:	2101      	movs	r1, #1
 800c084:	6838      	ldr	r0, [r7, #0]
 800c086:	f000 f9c7 	bl	800c418 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800c08a:	4b1a      	ldr	r3, [pc, #104]	; (800c0f4 <xTaskNotifyWait+0xb0>)
 800c08c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c090:	601a      	str	r2, [r3, #0]
 800c092:	f3bf 8f4f 	dsb	sy
 800c096:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c09a:	f7fe fbab 	bl	800a7f4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800c09e:	f7fe fb79 	bl	800a794 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d004      	beq.n	800c0b2 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800c0a8:	4b11      	ldr	r3, [pc, #68]	; (800c0f0 <xTaskNotifyWait+0xac>)
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800c0b2:	4b0f      	ldr	r3, [pc, #60]	; (800c0f0 <xTaskNotifyWait+0xac>)
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c0ba:	b2db      	uxtb	r3, r3
 800c0bc:	2b02      	cmp	r3, #2
 800c0be:	d002      	beq.n	800c0c6 <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	617b      	str	r3, [r7, #20]
 800c0c4:	e008      	b.n	800c0d8 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800c0c6:	4b0a      	ldr	r3, [pc, #40]	; (800c0f0 <xTaskNotifyWait+0xac>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800c0cc:	68ba      	ldr	r2, [r7, #8]
 800c0ce:	43d2      	mvns	r2, r2
 800c0d0:	400a      	ands	r2, r1
 800c0d2:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 800c0d4:	2301      	movs	r3, #1
 800c0d6:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c0d8:	4b05      	ldr	r3, [pc, #20]	; (800c0f0 <xTaskNotifyWait+0xac>)
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	2200      	movs	r2, #0
 800c0de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 800c0e2:	f7fe fb87 	bl	800a7f4 <vPortExitCritical>

		return xReturn;
 800c0e6:	697b      	ldr	r3, [r7, #20]
	}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	3718      	adds	r7, #24
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}
 800c0f0:	20004384 	.word	0x20004384
 800c0f4:	e000ed04 	.word	0xe000ed04

0800c0f8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800c0f8:	b580      	push	{r7, lr}
 800c0fa:	b08a      	sub	sp, #40	; 0x28
 800c0fc:	af00      	add	r7, sp, #0
 800c0fe:	60f8      	str	r0, [r7, #12]
 800c100:	60b9      	str	r1, [r7, #8]
 800c102:	603b      	str	r3, [r7, #0]
 800c104:	4613      	mov	r3, r2
 800c106:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800c108:	2301      	movs	r3, #1
 800c10a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d10a      	bne.n	800c128 <xTaskGenericNotify+0x30>
	__asm volatile
 800c112:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c116:	f383 8811 	msr	BASEPRI, r3
 800c11a:	f3bf 8f6f 	isb	sy
 800c11e:	f3bf 8f4f 	dsb	sy
 800c122:	61bb      	str	r3, [r7, #24]
}
 800c124:	bf00      	nop
 800c126:	e7fe      	b.n	800c126 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800c12c:	f7fe fb32 	bl	800a794 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d003      	beq.n	800c13e <xTaskGenericNotify+0x46>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800c136:	6a3b      	ldr	r3, [r7, #32]
 800c138:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c13e:	6a3b      	ldr	r3, [r7, #32]
 800c140:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c144:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c146:	6a3b      	ldr	r3, [r7, #32]
 800c148:	2202      	movs	r2, #2
 800c14a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 800c14e:	79fb      	ldrb	r3, [r7, #7]
 800c150:	2b04      	cmp	r3, #4
 800c152:	d828      	bhi.n	800c1a6 <xTaskGenericNotify+0xae>
 800c154:	a201      	add	r2, pc, #4	; (adr r2, 800c15c <xTaskGenericNotify+0x64>)
 800c156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c15a:	bf00      	nop
 800c15c:	0800c1c7 	.word	0x0800c1c7
 800c160:	0800c171 	.word	0x0800c171
 800c164:	0800c17f 	.word	0x0800c17f
 800c168:	0800c18b 	.word	0x0800c18b
 800c16c:	0800c193 	.word	0x0800c193
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800c170:	6a3b      	ldr	r3, [r7, #32]
 800c172:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c174:	68bb      	ldr	r3, [r7, #8]
 800c176:	431a      	orrs	r2, r3
 800c178:	6a3b      	ldr	r3, [r7, #32]
 800c17a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800c17c:	e026      	b.n	800c1cc <xTaskGenericNotify+0xd4>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800c17e:	6a3b      	ldr	r3, [r7, #32]
 800c180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c182:	1c5a      	adds	r2, r3, #1
 800c184:	6a3b      	ldr	r3, [r7, #32]
 800c186:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800c188:	e020      	b.n	800c1cc <xTaskGenericNotify+0xd4>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800c18a:	6a3b      	ldr	r3, [r7, #32]
 800c18c:	68ba      	ldr	r2, [r7, #8]
 800c18e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800c190:	e01c      	b.n	800c1cc <xTaskGenericNotify+0xd4>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800c192:	7ffb      	ldrb	r3, [r7, #31]
 800c194:	2b02      	cmp	r3, #2
 800c196:	d003      	beq.n	800c1a0 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800c198:	6a3b      	ldr	r3, [r7, #32]
 800c19a:	68ba      	ldr	r2, [r7, #8]
 800c19c:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800c19e:	e015      	b.n	800c1cc <xTaskGenericNotify+0xd4>
						xReturn = pdFAIL;
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800c1a4:	e012      	b.n	800c1cc <xTaskGenericNotify+0xd4>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800c1a6:	6a3b      	ldr	r3, [r7, #32]
 800c1a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1ae:	d00c      	beq.n	800c1ca <xTaskGenericNotify+0xd2>
	__asm volatile
 800c1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1b4:	f383 8811 	msr	BASEPRI, r3
 800c1b8:	f3bf 8f6f 	isb	sy
 800c1bc:	f3bf 8f4f 	dsb	sy
 800c1c0:	617b      	str	r3, [r7, #20]
}
 800c1c2:	bf00      	nop
 800c1c4:	e7fe      	b.n	800c1c4 <xTaskGenericNotify+0xcc>
					break;
 800c1c6:	bf00      	nop
 800c1c8:	e000      	b.n	800c1cc <xTaskGenericNotify+0xd4>

					break;
 800c1ca:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c1cc:	7ffb      	ldrb	r3, [r7, #31]
 800c1ce:	2b01      	cmp	r3, #1
 800c1d0:	d139      	bne.n	800c246 <xTaskGenericNotify+0x14e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c1d2:	6a3b      	ldr	r3, [r7, #32]
 800c1d4:	3304      	adds	r3, #4
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	f7fe f982 	bl	800a4e0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800c1dc:	6a3b      	ldr	r3, [r7, #32]
 800c1de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1e0:	2201      	movs	r2, #1
 800c1e2:	409a      	lsls	r2, r3
 800c1e4:	4b1b      	ldr	r3, [pc, #108]	; (800c254 <xTaskGenericNotify+0x15c>)
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	4313      	orrs	r3, r2
 800c1ea:	4a1a      	ldr	r2, [pc, #104]	; (800c254 <xTaskGenericNotify+0x15c>)
 800c1ec:	6013      	str	r3, [r2, #0]
 800c1ee:	6a3b      	ldr	r3, [r7, #32]
 800c1f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1f2:	4613      	mov	r3, r2
 800c1f4:	009b      	lsls	r3, r3, #2
 800c1f6:	4413      	add	r3, r2
 800c1f8:	009b      	lsls	r3, r3, #2
 800c1fa:	4a17      	ldr	r2, [pc, #92]	; (800c258 <xTaskGenericNotify+0x160>)
 800c1fc:	441a      	add	r2, r3
 800c1fe:	6a3b      	ldr	r3, [r7, #32]
 800c200:	3304      	adds	r3, #4
 800c202:	4619      	mov	r1, r3
 800c204:	4610      	mov	r0, r2
 800c206:	f7fe f90e 	bl	800a426 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c20a:	6a3b      	ldr	r3, [r7, #32]
 800c20c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d00a      	beq.n	800c228 <xTaskGenericNotify+0x130>
	__asm volatile
 800c212:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c216:	f383 8811 	msr	BASEPRI, r3
 800c21a:	f3bf 8f6f 	isb	sy
 800c21e:	f3bf 8f4f 	dsb	sy
 800c222:	613b      	str	r3, [r7, #16]
}
 800c224:	bf00      	nop
 800c226:	e7fe      	b.n	800c226 <xTaskGenericNotify+0x12e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c228:	6a3b      	ldr	r3, [r7, #32]
 800c22a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c22c:	4b0b      	ldr	r3, [pc, #44]	; (800c25c <xTaskGenericNotify+0x164>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c232:	429a      	cmp	r2, r3
 800c234:	d907      	bls.n	800c246 <xTaskGenericNotify+0x14e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800c236:	4b0a      	ldr	r3, [pc, #40]	; (800c260 <xTaskGenericNotify+0x168>)
 800c238:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c23c:	601a      	str	r2, [r3, #0]
 800c23e:	f3bf 8f4f 	dsb	sy
 800c242:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c246:	f7fe fad5 	bl	800a7f4 <vPortExitCritical>

		return xReturn;
 800c24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800c24c:	4618      	mov	r0, r3
 800c24e:	3728      	adds	r7, #40	; 0x28
 800c250:	46bd      	mov	sp, r7
 800c252:	bd80      	pop	{r7, pc}
 800c254:	2000448c 	.word	0x2000448c
 800c258:	20004388 	.word	0x20004388
 800c25c:	20004384 	.word	0x20004384
 800c260:	e000ed04 	.word	0xe000ed04

0800c264 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c264:	b580      	push	{r7, lr}
 800c266:	b08e      	sub	sp, #56	; 0x38
 800c268:	af00      	add	r7, sp, #0
 800c26a:	60f8      	str	r0, [r7, #12]
 800c26c:	60b9      	str	r1, [r7, #8]
 800c26e:	603b      	str	r3, [r7, #0]
 800c270:	4613      	mov	r3, r2
 800c272:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800c274:	2301      	movs	r3, #1
 800c276:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d10a      	bne.n	800c294 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800c27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c282:	f383 8811 	msr	BASEPRI, r3
 800c286:	f3bf 8f6f 	isb	sy
 800c28a:	f3bf 8f4f 	dsb	sy
 800c28e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c290:	bf00      	nop
 800c292:	e7fe      	b.n	800c292 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c294:	f7fe fb60 	bl	800a958 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800c29c:	f3ef 8211 	mrs	r2, BASEPRI
 800c2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2a4:	f383 8811 	msr	BASEPRI, r3
 800c2a8:	f3bf 8f6f 	isb	sy
 800c2ac:	f3bf 8f4f 	dsb	sy
 800c2b0:	623a      	str	r2, [r7, #32]
 800c2b2:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800c2b4:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c2b6:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d003      	beq.n	800c2c6 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800c2be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c2c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c2cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c2d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2d2:	2202      	movs	r2, #2
 800c2d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 800c2d8:	79fb      	ldrb	r3, [r7, #7]
 800c2da:	2b04      	cmp	r3, #4
 800c2dc:	d828      	bhi.n	800c330 <xTaskGenericNotifyFromISR+0xcc>
 800c2de:	a201      	add	r2, pc, #4	; (adr r2, 800c2e4 <xTaskGenericNotifyFromISR+0x80>)
 800c2e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2e4:	0800c351 	.word	0x0800c351
 800c2e8:	0800c2f9 	.word	0x0800c2f9
 800c2ec:	0800c307 	.word	0x0800c307
 800c2f0:	0800c313 	.word	0x0800c313
 800c2f4:	0800c31b 	.word	0x0800c31b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800c2f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c2fc:	68bb      	ldr	r3, [r7, #8]
 800c2fe:	431a      	orrs	r2, r3
 800c300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c302:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800c304:	e027      	b.n	800c356 <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800c306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c30a:	1c5a      	adds	r2, r3, #1
 800c30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c30e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800c310:	e021      	b.n	800c356 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800c312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c314:	68ba      	ldr	r2, [r7, #8]
 800c316:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800c318:	e01d      	b.n	800c356 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800c31a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c31e:	2b02      	cmp	r3, #2
 800c320:	d003      	beq.n	800c32a <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800c322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c324:	68ba      	ldr	r2, [r7, #8]
 800c326:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800c328:	e015      	b.n	800c356 <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 800c32a:	2300      	movs	r3, #0
 800c32c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800c32e:	e012      	b.n	800c356 <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800c330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c334:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c338:	d00c      	beq.n	800c354 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 800c33a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c33e:	f383 8811 	msr	BASEPRI, r3
 800c342:	f3bf 8f6f 	isb	sy
 800c346:	f3bf 8f4f 	dsb	sy
 800c34a:	61bb      	str	r3, [r7, #24]
}
 800c34c:	bf00      	nop
 800c34e:	e7fe      	b.n	800c34e <xTaskGenericNotifyFromISR+0xea>
					break;
 800c350:	bf00      	nop
 800c352:	e000      	b.n	800c356 <xTaskGenericNotifyFromISR+0xf2>
					break;
 800c354:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c356:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c35a:	2b01      	cmp	r3, #1
 800c35c:	d145      	bne.n	800c3ea <xTaskGenericNotifyFromISR+0x186>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c362:	2b00      	cmp	r3, #0
 800c364:	d00a      	beq.n	800c37c <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 800c366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c36a:	f383 8811 	msr	BASEPRI, r3
 800c36e:	f3bf 8f6f 	isb	sy
 800c372:	f3bf 8f4f 	dsb	sy
 800c376:	617b      	str	r3, [r7, #20]
}
 800c378:	bf00      	nop
 800c37a:	e7fe      	b.n	800c37a <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c37c:	4b20      	ldr	r3, [pc, #128]	; (800c400 <xTaskGenericNotifyFromISR+0x19c>)
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d11c      	bne.n	800c3be <xTaskGenericNotifyFromISR+0x15a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c386:	3304      	adds	r3, #4
 800c388:	4618      	mov	r0, r3
 800c38a:	f7fe f8a9 	bl	800a4e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c392:	2201      	movs	r2, #1
 800c394:	409a      	lsls	r2, r3
 800c396:	4b1b      	ldr	r3, [pc, #108]	; (800c404 <xTaskGenericNotifyFromISR+0x1a0>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	4313      	orrs	r3, r2
 800c39c:	4a19      	ldr	r2, [pc, #100]	; (800c404 <xTaskGenericNotifyFromISR+0x1a0>)
 800c39e:	6013      	str	r3, [r2, #0]
 800c3a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3a4:	4613      	mov	r3, r2
 800c3a6:	009b      	lsls	r3, r3, #2
 800c3a8:	4413      	add	r3, r2
 800c3aa:	009b      	lsls	r3, r3, #2
 800c3ac:	4a16      	ldr	r2, [pc, #88]	; (800c408 <xTaskGenericNotifyFromISR+0x1a4>)
 800c3ae:	441a      	add	r2, r3
 800c3b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3b2:	3304      	adds	r3, #4
 800c3b4:	4619      	mov	r1, r3
 800c3b6:	4610      	mov	r0, r2
 800c3b8:	f7fe f835 	bl	800a426 <vListInsertEnd>
 800c3bc:	e005      	b.n	800c3ca <xTaskGenericNotifyFromISR+0x166>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800c3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c0:	3318      	adds	r3, #24
 800c3c2:	4619      	mov	r1, r3
 800c3c4:	4811      	ldr	r0, [pc, #68]	; (800c40c <xTaskGenericNotifyFromISR+0x1a8>)
 800c3c6:	f7fe f82e 	bl	800a426 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3ce:	4b10      	ldr	r3, [pc, #64]	; (800c410 <xTaskGenericNotifyFromISR+0x1ac>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3d4:	429a      	cmp	r2, r3
 800c3d6:	d908      	bls.n	800c3ea <xTaskGenericNotifyFromISR+0x186>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800c3d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d002      	beq.n	800c3e4 <xTaskGenericNotifyFromISR+0x180>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800c3de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c3e0:	2201      	movs	r2, #1
 800c3e2:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800c3e4:	4b0b      	ldr	r3, [pc, #44]	; (800c414 <xTaskGenericNotifyFromISR+0x1b0>)
 800c3e6:	2201      	movs	r2, #1
 800c3e8:	601a      	str	r2, [r3, #0]
 800c3ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ec:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c3ee:	693b      	ldr	r3, [r7, #16]
 800c3f0:	f383 8811 	msr	BASEPRI, r3
}
 800c3f4:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800c3f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	3738      	adds	r7, #56	; 0x38
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	bd80      	pop	{r7, pc}
 800c400:	200044ac 	.word	0x200044ac
 800c404:	2000448c 	.word	0x2000448c
 800c408:	20004388 	.word	0x20004388
 800c40c:	20004444 	.word	0x20004444
 800c410:	20004384 	.word	0x20004384
 800c414:	20004498 	.word	0x20004498

0800c418 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b084      	sub	sp, #16
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
 800c420:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c422:	4b29      	ldr	r3, [pc, #164]	; (800c4c8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c428:	4b28      	ldr	r3, [pc, #160]	; (800c4cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	3304      	adds	r3, #4
 800c42e:	4618      	mov	r0, r3
 800c430:	f7fe f856 	bl	800a4e0 <uxListRemove>
 800c434:	4603      	mov	r3, r0
 800c436:	2b00      	cmp	r3, #0
 800c438:	d10b      	bne.n	800c452 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c43a:	4b24      	ldr	r3, [pc, #144]	; (800c4cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c440:	2201      	movs	r2, #1
 800c442:	fa02 f303 	lsl.w	r3, r2, r3
 800c446:	43da      	mvns	r2, r3
 800c448:	4b21      	ldr	r3, [pc, #132]	; (800c4d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	4013      	ands	r3, r2
 800c44e:	4a20      	ldr	r2, [pc, #128]	; (800c4d0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c450:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c458:	d10a      	bne.n	800c470 <prvAddCurrentTaskToDelayedList+0x58>
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d007      	beq.n	800c470 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c460:	4b1a      	ldr	r3, [pc, #104]	; (800c4cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	3304      	adds	r3, #4
 800c466:	4619      	mov	r1, r3
 800c468:	481a      	ldr	r0, [pc, #104]	; (800c4d4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c46a:	f7fd ffdc 	bl	800a426 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c46e:	e026      	b.n	800c4be <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c470:	68fa      	ldr	r2, [r7, #12]
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	4413      	add	r3, r2
 800c476:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c478:	4b14      	ldr	r3, [pc, #80]	; (800c4cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	68ba      	ldr	r2, [r7, #8]
 800c47e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c480:	68ba      	ldr	r2, [r7, #8]
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	429a      	cmp	r2, r3
 800c486:	d209      	bcs.n	800c49c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c488:	4b13      	ldr	r3, [pc, #76]	; (800c4d8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c48a:	681a      	ldr	r2, [r3, #0]
 800c48c:	4b0f      	ldr	r3, [pc, #60]	; (800c4cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	3304      	adds	r3, #4
 800c492:	4619      	mov	r1, r3
 800c494:	4610      	mov	r0, r2
 800c496:	f7fd ffea 	bl	800a46e <vListInsert>
}
 800c49a:	e010      	b.n	800c4be <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c49c:	4b0f      	ldr	r3, [pc, #60]	; (800c4dc <prvAddCurrentTaskToDelayedList+0xc4>)
 800c49e:	681a      	ldr	r2, [r3, #0]
 800c4a0:	4b0a      	ldr	r3, [pc, #40]	; (800c4cc <prvAddCurrentTaskToDelayedList+0xb4>)
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	3304      	adds	r3, #4
 800c4a6:	4619      	mov	r1, r3
 800c4a8:	4610      	mov	r0, r2
 800c4aa:	f7fd ffe0 	bl	800a46e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c4ae:	4b0c      	ldr	r3, [pc, #48]	; (800c4e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	68ba      	ldr	r2, [r7, #8]
 800c4b4:	429a      	cmp	r2, r3
 800c4b6:	d202      	bcs.n	800c4be <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c4b8:	4a09      	ldr	r2, [pc, #36]	; (800c4e0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c4ba:	68bb      	ldr	r3, [r7, #8]
 800c4bc:	6013      	str	r3, [r2, #0]
}
 800c4be:	bf00      	nop
 800c4c0:	3710      	adds	r7, #16
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	bd80      	pop	{r7, pc}
 800c4c6:	bf00      	nop
 800c4c8:	20004488 	.word	0x20004488
 800c4cc:	20004384 	.word	0x20004384
 800c4d0:	2000448c 	.word	0x2000448c
 800c4d4:	20004470 	.word	0x20004470
 800c4d8:	20004440 	.word	0x20004440
 800c4dc:	2000443c 	.word	0x2000443c
 800c4e0:	200044a4 	.word	0x200044a4

0800c4e4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b084      	sub	sp, #16
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
 800c4ec:	460b      	mov	r3, r1
 800c4ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c4f0:	205c      	movs	r0, #92	; 0x5c
 800c4f2:	f002 fca7 	bl	800ee44 <USBD_static_malloc>
 800c4f6:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d109      	bne.n	800c512 <USBD_CDC_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	32b0      	adds	r2, #176	; 0xb0
 800c508:	2100      	movs	r1, #0
 800c50a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800c50e:	2302      	movs	r3, #2
 800c510:	e0ca      	b.n	800c6a8 <USBD_CDC_Init+0x1c4>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800c512:	225c      	movs	r2, #92	; 0x5c
 800c514:	2100      	movs	r1, #0
 800c516:	68f8      	ldr	r0, [r7, #12]
 800c518:	f002 fd10 	bl	800ef3c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	32b0      	adds	r2, #176	; 0xb0
 800c526:	68f9      	ldr	r1, [r7, #12]
 800c528:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	32b0      	adds	r2, #176	; 0xb0
 800c536:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	7c1b      	ldrb	r3, [r3, #16]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d136      	bne.n	800c5b6 <USBD_CDC_Init+0xd2>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c548:	4b59      	ldr	r3, [pc, #356]	; (800c6b0 <USBD_CDC_Init+0x1cc>)
 800c54a:	7819      	ldrb	r1, [r3, #0]
 800c54c:	2340      	movs	r3, #64	; 0x40
 800c54e:	2202      	movs	r2, #2
 800c550:	6878      	ldr	r0, [r7, #4]
 800c552:	f002 fb54 	bl	800ebfe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c556:	4b56      	ldr	r3, [pc, #344]	; (800c6b0 <USBD_CDC_Init+0x1cc>)
 800c558:	781b      	ldrb	r3, [r3, #0]
 800c55a:	f003 020f 	and.w	r2, r3, #15
 800c55e:	6879      	ldr	r1, [r7, #4]
 800c560:	4613      	mov	r3, r2
 800c562:	009b      	lsls	r3, r3, #2
 800c564:	4413      	add	r3, r2
 800c566:	009b      	lsls	r3, r3, #2
 800c568:	440b      	add	r3, r1
 800c56a:	3324      	adds	r3, #36	; 0x24
 800c56c:	2201      	movs	r2, #1
 800c56e:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c570:	4b50      	ldr	r3, [pc, #320]	; (800c6b4 <USBD_CDC_Init+0x1d0>)
 800c572:	7819      	ldrb	r1, [r3, #0]
 800c574:	2340      	movs	r3, #64	; 0x40
 800c576:	2202      	movs	r2, #2
 800c578:	6878      	ldr	r0, [r7, #4]
 800c57a:	f002 fb40 	bl	800ebfe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c57e:	4b4d      	ldr	r3, [pc, #308]	; (800c6b4 <USBD_CDC_Init+0x1d0>)
 800c580:	781b      	ldrb	r3, [r3, #0]
 800c582:	f003 020f 	and.w	r2, r3, #15
 800c586:	6879      	ldr	r1, [r7, #4]
 800c588:	4613      	mov	r3, r2
 800c58a:	009b      	lsls	r3, r3, #2
 800c58c:	4413      	add	r3, r2
 800c58e:	009b      	lsls	r3, r3, #2
 800c590:	440b      	add	r3, r1
 800c592:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c596:	2201      	movs	r2, #1
 800c598:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c59a:	4b47      	ldr	r3, [pc, #284]	; (800c6b8 <USBD_CDC_Init+0x1d4>)
 800c59c:	781b      	ldrb	r3, [r3, #0]
 800c59e:	f003 020f 	and.w	r2, r3, #15
 800c5a2:	6879      	ldr	r1, [r7, #4]
 800c5a4:	4613      	mov	r3, r2
 800c5a6:	009b      	lsls	r3, r3, #2
 800c5a8:	4413      	add	r3, r2
 800c5aa:	009b      	lsls	r3, r3, #2
 800c5ac:	440b      	add	r3, r1
 800c5ae:	3326      	adds	r3, #38	; 0x26
 800c5b0:	2210      	movs	r2, #16
 800c5b2:	801a      	strh	r2, [r3, #0]
 800c5b4:	e035      	b.n	800c622 <USBD_CDC_Init+0x13e>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c5b6:	4b3e      	ldr	r3, [pc, #248]	; (800c6b0 <USBD_CDC_Init+0x1cc>)
 800c5b8:	7819      	ldrb	r1, [r3, #0]
 800c5ba:	2340      	movs	r3, #64	; 0x40
 800c5bc:	2202      	movs	r2, #2
 800c5be:	6878      	ldr	r0, [r7, #4]
 800c5c0:	f002 fb1d 	bl	800ebfe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c5c4:	4b3a      	ldr	r3, [pc, #232]	; (800c6b0 <USBD_CDC_Init+0x1cc>)
 800c5c6:	781b      	ldrb	r3, [r3, #0]
 800c5c8:	f003 020f 	and.w	r2, r3, #15
 800c5cc:	6879      	ldr	r1, [r7, #4]
 800c5ce:	4613      	mov	r3, r2
 800c5d0:	009b      	lsls	r3, r3, #2
 800c5d2:	4413      	add	r3, r2
 800c5d4:	009b      	lsls	r3, r3, #2
 800c5d6:	440b      	add	r3, r1
 800c5d8:	3324      	adds	r3, #36	; 0x24
 800c5da:	2201      	movs	r2, #1
 800c5dc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c5de:	4b35      	ldr	r3, [pc, #212]	; (800c6b4 <USBD_CDC_Init+0x1d0>)
 800c5e0:	7819      	ldrb	r1, [r3, #0]
 800c5e2:	2340      	movs	r3, #64	; 0x40
 800c5e4:	2202      	movs	r2, #2
 800c5e6:	6878      	ldr	r0, [r7, #4]
 800c5e8:	f002 fb09 	bl	800ebfe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c5ec:	4b31      	ldr	r3, [pc, #196]	; (800c6b4 <USBD_CDC_Init+0x1d0>)
 800c5ee:	781b      	ldrb	r3, [r3, #0]
 800c5f0:	f003 020f 	and.w	r2, r3, #15
 800c5f4:	6879      	ldr	r1, [r7, #4]
 800c5f6:	4613      	mov	r3, r2
 800c5f8:	009b      	lsls	r3, r3, #2
 800c5fa:	4413      	add	r3, r2
 800c5fc:	009b      	lsls	r3, r3, #2
 800c5fe:	440b      	add	r3, r1
 800c600:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c604:	2201      	movs	r2, #1
 800c606:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c608:	4b2b      	ldr	r3, [pc, #172]	; (800c6b8 <USBD_CDC_Init+0x1d4>)
 800c60a:	781b      	ldrb	r3, [r3, #0]
 800c60c:	f003 020f 	and.w	r2, r3, #15
 800c610:	6879      	ldr	r1, [r7, #4]
 800c612:	4613      	mov	r3, r2
 800c614:	009b      	lsls	r3, r3, #2
 800c616:	4413      	add	r3, r2
 800c618:	009b      	lsls	r3, r3, #2
 800c61a:	440b      	add	r3, r1
 800c61c:	3326      	adds	r3, #38	; 0x26
 800c61e:	2210      	movs	r2, #16
 800c620:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c622:	4b25      	ldr	r3, [pc, #148]	; (800c6b8 <USBD_CDC_Init+0x1d4>)
 800c624:	7819      	ldrb	r1, [r3, #0]
 800c626:	2308      	movs	r3, #8
 800c628:	2203      	movs	r2, #3
 800c62a:	6878      	ldr	r0, [r7, #4]
 800c62c:	f002 fae7 	bl	800ebfe <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800c630:	4b21      	ldr	r3, [pc, #132]	; (800c6b8 <USBD_CDC_Init+0x1d4>)
 800c632:	781b      	ldrb	r3, [r3, #0]
 800c634:	f003 020f 	and.w	r2, r3, #15
 800c638:	6879      	ldr	r1, [r7, #4]
 800c63a:	4613      	mov	r3, r2
 800c63c:	009b      	lsls	r3, r3, #2
 800c63e:	4413      	add	r3, r2
 800c640:	009b      	lsls	r3, r3, #2
 800c642:	440b      	add	r3, r1
 800c644:	3324      	adds	r3, #36	; 0x24
 800c646:	2201      	movs	r2, #1
 800c648:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	2200      	movs	r2, #0
 800c64e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c656:	687a      	ldr	r2, [r7, #4]
 800c658:	33b0      	adds	r3, #176	; 0xb0
 800c65a:	009b      	lsls	r3, r3, #2
 800c65c:	4413      	add	r3, r2
 800c65e:	685b      	ldr	r3, [r3, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	2200      	movs	r2, #0
 800c668:	655a      	str	r2, [r3, #84]	; 0x54
  hcdc->RxState = 0U;
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	2200      	movs	r2, #0
 800c66e:	659a      	str	r2, [r3, #88]	; 0x58

  if (hcdc->RxBuffer == NULL)
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c674:	2b00      	cmp	r3, #0
 800c676:	d101      	bne.n	800c67c <USBD_CDC_Init+0x198>
  {
    return (uint8_t)USBD_EMEM;
 800c678:	2302      	movs	r3, #2
 800c67a:	e015      	b.n	800c6a8 <USBD_CDC_Init+0x1c4>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	7c1b      	ldrb	r3, [r3, #16]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d108      	bne.n	800c696 <USBD_CDC_Init+0x1b2>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c684:	4b0b      	ldr	r3, [pc, #44]	; (800c6b4 <USBD_CDC_Init+0x1d0>)
 800c686:	7819      	ldrb	r1, [r3, #0]
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c68c:	2340      	movs	r3, #64	; 0x40
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	f002 fba4 	bl	800eddc <USBD_LL_PrepareReceive>
 800c694:	e007      	b.n	800c6a6 <USBD_CDC_Init+0x1c2>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c696:	4b07      	ldr	r3, [pc, #28]	; (800c6b4 <USBD_CDC_Init+0x1d0>)
 800c698:	7819      	ldrb	r1, [r3, #0]
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c69e:	2340      	movs	r3, #64	; 0x40
 800c6a0:	6878      	ldr	r0, [r7, #4]
 800c6a2:	f002 fb9b 	bl	800eddc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c6a6:	2300      	movs	r3, #0
}
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	3710      	adds	r7, #16
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	bd80      	pop	{r7, pc}
 800c6b0:	20000113 	.word	0x20000113
 800c6b4:	20000114 	.word	0x20000114
 800c6b8:	20000115 	.word	0x20000115

0800c6bc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b082      	sub	sp, #8
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
 800c6c4:	460b      	mov	r3, r1
 800c6c6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800c6c8:	4b3a      	ldr	r3, [pc, #232]	; (800c7b4 <USBD_CDC_DeInit+0xf8>)
 800c6ca:	781b      	ldrb	r3, [r3, #0]
 800c6cc:	4619      	mov	r1, r3
 800c6ce:	6878      	ldr	r0, [r7, #4]
 800c6d0:	f002 fabb 	bl	800ec4a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800c6d4:	4b37      	ldr	r3, [pc, #220]	; (800c7b4 <USBD_CDC_DeInit+0xf8>)
 800c6d6:	781b      	ldrb	r3, [r3, #0]
 800c6d8:	f003 020f 	and.w	r2, r3, #15
 800c6dc:	6879      	ldr	r1, [r7, #4]
 800c6de:	4613      	mov	r3, r2
 800c6e0:	009b      	lsls	r3, r3, #2
 800c6e2:	4413      	add	r3, r2
 800c6e4:	009b      	lsls	r3, r3, #2
 800c6e6:	440b      	add	r3, r1
 800c6e8:	3324      	adds	r3, #36	; 0x24
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800c6ee:	4b32      	ldr	r3, [pc, #200]	; (800c7b8 <USBD_CDC_DeInit+0xfc>)
 800c6f0:	781b      	ldrb	r3, [r3, #0]
 800c6f2:	4619      	mov	r1, r3
 800c6f4:	6878      	ldr	r0, [r7, #4]
 800c6f6:	f002 faa8 	bl	800ec4a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800c6fa:	4b2f      	ldr	r3, [pc, #188]	; (800c7b8 <USBD_CDC_DeInit+0xfc>)
 800c6fc:	781b      	ldrb	r3, [r3, #0]
 800c6fe:	f003 020f 	and.w	r2, r3, #15
 800c702:	6879      	ldr	r1, [r7, #4]
 800c704:	4613      	mov	r3, r2
 800c706:	009b      	lsls	r3, r3, #2
 800c708:	4413      	add	r3, r2
 800c70a:	009b      	lsls	r3, r3, #2
 800c70c:	440b      	add	r3, r1
 800c70e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c712:	2200      	movs	r2, #0
 800c714:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800c716:	4b29      	ldr	r3, [pc, #164]	; (800c7bc <USBD_CDC_DeInit+0x100>)
 800c718:	781b      	ldrb	r3, [r3, #0]
 800c71a:	4619      	mov	r1, r3
 800c71c:	6878      	ldr	r0, [r7, #4]
 800c71e:	f002 fa94 	bl	800ec4a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800c722:	4b26      	ldr	r3, [pc, #152]	; (800c7bc <USBD_CDC_DeInit+0x100>)
 800c724:	781b      	ldrb	r3, [r3, #0]
 800c726:	f003 020f 	and.w	r2, r3, #15
 800c72a:	6879      	ldr	r1, [r7, #4]
 800c72c:	4613      	mov	r3, r2
 800c72e:	009b      	lsls	r3, r3, #2
 800c730:	4413      	add	r3, r2
 800c732:	009b      	lsls	r3, r3, #2
 800c734:	440b      	add	r3, r1
 800c736:	3324      	adds	r3, #36	; 0x24
 800c738:	2200      	movs	r2, #0
 800c73a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800c73c:	4b1f      	ldr	r3, [pc, #124]	; (800c7bc <USBD_CDC_DeInit+0x100>)
 800c73e:	781b      	ldrb	r3, [r3, #0]
 800c740:	f003 020f 	and.w	r2, r3, #15
 800c744:	6879      	ldr	r1, [r7, #4]
 800c746:	4613      	mov	r3, r2
 800c748:	009b      	lsls	r3, r3, #2
 800c74a:	4413      	add	r3, r2
 800c74c:	009b      	lsls	r3, r3, #2
 800c74e:	440b      	add	r3, r1
 800c750:	3326      	adds	r3, #38	; 0x26
 800c752:	2200      	movs	r2, #0
 800c754:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	32b0      	adds	r2, #176	; 0xb0
 800c760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d01f      	beq.n	800c7a8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c76e:	687a      	ldr	r2, [r7, #4]
 800c770:	33b0      	adds	r3, #176	; 0xb0
 800c772:	009b      	lsls	r3, r3, #2
 800c774:	4413      	add	r3, r2
 800c776:	685b      	ldr	r3, [r3, #4]
 800c778:	685b      	ldr	r3, [r3, #4]
 800c77a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	32b0      	adds	r2, #176	; 0xb0
 800c786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c78a:	4618      	mov	r0, r3
 800c78c:	f002 fb68 	bl	800ee60 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	32b0      	adds	r2, #176	; 0xb0
 800c79a:	2100      	movs	r1, #0
 800c79c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c7a8:	2300      	movs	r3, #0
}
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	3708      	adds	r7, #8
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	bd80      	pop	{r7, pc}
 800c7b2:	bf00      	nop
 800c7b4:	20000113 	.word	0x20000113
 800c7b8:	20000114 	.word	0x20000114
 800c7bc:	20000115 	.word	0x20000115

0800c7c0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b086      	sub	sp, #24
 800c7c4:	af00      	add	r7, sp, #0
 800c7c6:	6078      	str	r0, [r7, #4]
 800c7c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	32b0      	adds	r2, #176	; 0xb0
 800c7d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7d8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c7da:	2300      	movs	r3, #0
 800c7dc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c7de:	2300      	movs	r3, #0
 800c7e0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c7e6:	693b      	ldr	r3, [r7, #16]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d101      	bne.n	800c7f0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800c7ec:	2303      	movs	r3, #3
 800c7ee:	e0bf      	b.n	800c970 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	781b      	ldrb	r3, [r3, #0]
 800c7f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d050      	beq.n	800c89e <USBD_CDC_Setup+0xde>
 800c7fc:	2b20      	cmp	r3, #32
 800c7fe:	f040 80af 	bne.w	800c960 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c802:	683b      	ldr	r3, [r7, #0]
 800c804:	88db      	ldrh	r3, [r3, #6]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d03a      	beq.n	800c880 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c80a:	683b      	ldr	r3, [r7, #0]
 800c80c:	781b      	ldrb	r3, [r3, #0]
 800c80e:	b25b      	sxtb	r3, r3
 800c810:	2b00      	cmp	r3, #0
 800c812:	da1b      	bge.n	800c84c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c81a:	687a      	ldr	r2, [r7, #4]
 800c81c:	33b0      	adds	r3, #176	; 0xb0
 800c81e:	009b      	lsls	r3, r3, #2
 800c820:	4413      	add	r3, r2
 800c822:	685b      	ldr	r3, [r3, #4]
 800c824:	689b      	ldr	r3, [r3, #8]
 800c826:	683a      	ldr	r2, [r7, #0]
 800c828:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800c82a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c82c:	683a      	ldr	r2, [r7, #0]
 800c82e:	88d2      	ldrh	r2, [r2, #6]
 800c830:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	88db      	ldrh	r3, [r3, #6]
 800c836:	2b07      	cmp	r3, #7
 800c838:	bf28      	it	cs
 800c83a:	2307      	movcs	r3, #7
 800c83c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c83e:	693b      	ldr	r3, [r7, #16]
 800c840:	89fa      	ldrh	r2, [r7, #14]
 800c842:	4619      	mov	r1, r3
 800c844:	6878      	ldr	r0, [r7, #4]
 800c846:	f001 fd79 	bl	800e33c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800c84a:	e090      	b.n	800c96e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	785a      	ldrb	r2, [r3, #1]
 800c850:	693b      	ldr	r3, [r7, #16]
 800c852:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	88db      	ldrh	r3, [r3, #6]
 800c85a:	2b3f      	cmp	r3, #63	; 0x3f
 800c85c:	d803      	bhi.n	800c866 <USBD_CDC_Setup+0xa6>
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	88db      	ldrh	r3, [r3, #6]
 800c862:	b2da      	uxtb	r2, r3
 800c864:	e000      	b.n	800c868 <USBD_CDC_Setup+0xa8>
 800c866:	2240      	movs	r2, #64	; 0x40
 800c868:	693b      	ldr	r3, [r7, #16]
 800c86a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c86e:	6939      	ldr	r1, [r7, #16]
 800c870:	693b      	ldr	r3, [r7, #16]
 800c872:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c876:	461a      	mov	r2, r3
 800c878:	6878      	ldr	r0, [r7, #4]
 800c87a:	f001 fd8b 	bl	800e394 <USBD_CtlPrepareRx>
      break;
 800c87e:	e076      	b.n	800c96e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c886:	687a      	ldr	r2, [r7, #4]
 800c888:	33b0      	adds	r3, #176	; 0xb0
 800c88a:	009b      	lsls	r3, r3, #2
 800c88c:	4413      	add	r3, r2
 800c88e:	685b      	ldr	r3, [r3, #4]
 800c890:	689b      	ldr	r3, [r3, #8]
 800c892:	683a      	ldr	r2, [r7, #0]
 800c894:	7850      	ldrb	r0, [r2, #1]
 800c896:	2200      	movs	r2, #0
 800c898:	6839      	ldr	r1, [r7, #0]
 800c89a:	4798      	blx	r3
      break;
 800c89c:	e067      	b.n	800c96e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c89e:	683b      	ldr	r3, [r7, #0]
 800c8a0:	785b      	ldrb	r3, [r3, #1]
 800c8a2:	2b0b      	cmp	r3, #11
 800c8a4:	d851      	bhi.n	800c94a <USBD_CDC_Setup+0x18a>
 800c8a6:	a201      	add	r2, pc, #4	; (adr r2, 800c8ac <USBD_CDC_Setup+0xec>)
 800c8a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8ac:	0800c8dd 	.word	0x0800c8dd
 800c8b0:	0800c959 	.word	0x0800c959
 800c8b4:	0800c94b 	.word	0x0800c94b
 800c8b8:	0800c94b 	.word	0x0800c94b
 800c8bc:	0800c94b 	.word	0x0800c94b
 800c8c0:	0800c94b 	.word	0x0800c94b
 800c8c4:	0800c94b 	.word	0x0800c94b
 800c8c8:	0800c94b 	.word	0x0800c94b
 800c8cc:	0800c94b 	.word	0x0800c94b
 800c8d0:	0800c94b 	.word	0x0800c94b
 800c8d4:	0800c907 	.word	0x0800c907
 800c8d8:	0800c931 	.word	0x0800c931
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8e2:	b2db      	uxtb	r3, r3
 800c8e4:	2b03      	cmp	r3, #3
 800c8e6:	d107      	bne.n	800c8f8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c8e8:	f107 030a 	add.w	r3, r7, #10
 800c8ec:	2202      	movs	r2, #2
 800c8ee:	4619      	mov	r1, r3
 800c8f0:	6878      	ldr	r0, [r7, #4]
 800c8f2:	f001 fd23 	bl	800e33c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c8f6:	e032      	b.n	800c95e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c8f8:	6839      	ldr	r1, [r7, #0]
 800c8fa:	6878      	ldr	r0, [r7, #4]
 800c8fc:	f001 fcad 	bl	800e25a <USBD_CtlError>
            ret = USBD_FAIL;
 800c900:	2303      	movs	r3, #3
 800c902:	75fb      	strb	r3, [r7, #23]
          break;
 800c904:	e02b      	b.n	800c95e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c90c:	b2db      	uxtb	r3, r3
 800c90e:	2b03      	cmp	r3, #3
 800c910:	d107      	bne.n	800c922 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c912:	f107 030d 	add.w	r3, r7, #13
 800c916:	2201      	movs	r2, #1
 800c918:	4619      	mov	r1, r3
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f001 fd0e 	bl	800e33c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c920:	e01d      	b.n	800c95e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c922:	6839      	ldr	r1, [r7, #0]
 800c924:	6878      	ldr	r0, [r7, #4]
 800c926:	f001 fc98 	bl	800e25a <USBD_CtlError>
            ret = USBD_FAIL;
 800c92a:	2303      	movs	r3, #3
 800c92c:	75fb      	strb	r3, [r7, #23]
          break;
 800c92e:	e016      	b.n	800c95e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c936:	b2db      	uxtb	r3, r3
 800c938:	2b03      	cmp	r3, #3
 800c93a:	d00f      	beq.n	800c95c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c93c:	6839      	ldr	r1, [r7, #0]
 800c93e:	6878      	ldr	r0, [r7, #4]
 800c940:	f001 fc8b 	bl	800e25a <USBD_CtlError>
            ret = USBD_FAIL;
 800c944:	2303      	movs	r3, #3
 800c946:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c948:	e008      	b.n	800c95c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c94a:	6839      	ldr	r1, [r7, #0]
 800c94c:	6878      	ldr	r0, [r7, #4]
 800c94e:	f001 fc84 	bl	800e25a <USBD_CtlError>
          ret = USBD_FAIL;
 800c952:	2303      	movs	r3, #3
 800c954:	75fb      	strb	r3, [r7, #23]
          break;
 800c956:	e002      	b.n	800c95e <USBD_CDC_Setup+0x19e>
          break;
 800c958:	bf00      	nop
 800c95a:	e008      	b.n	800c96e <USBD_CDC_Setup+0x1ae>
          break;
 800c95c:	bf00      	nop
      }
      break;
 800c95e:	e006      	b.n	800c96e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c960:	6839      	ldr	r1, [r7, #0]
 800c962:	6878      	ldr	r0, [r7, #4]
 800c964:	f001 fc79 	bl	800e25a <USBD_CtlError>
      ret = USBD_FAIL;
 800c968:	2303      	movs	r3, #3
 800c96a:	75fb      	strb	r3, [r7, #23]
      break;
 800c96c:	bf00      	nop
  }

  return (uint8_t)ret;
 800c96e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c970:	4618      	mov	r0, r3
 800c972:	3718      	adds	r7, #24
 800c974:	46bd      	mov	sp, r7
 800c976:	bd80      	pop	{r7, pc}

0800c978 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b084      	sub	sp, #16
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
 800c980:	460b      	mov	r3, r1
 800c982:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c98a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	32b0      	adds	r2, #176	; 0xb0
 800c996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d101      	bne.n	800c9a2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c99e:	2303      	movs	r3, #3
 800c9a0:	e063      	b.n	800ca6a <USBD_CDC_DataIn+0xf2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	32b0      	adds	r2, #176	; 0xb0
 800c9ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9b0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c9b2:	78fb      	ldrb	r3, [r7, #3]
 800c9b4:	f003 020f 	and.w	r2, r3, #15
 800c9b8:	6879      	ldr	r1, [r7, #4]
 800c9ba:	4613      	mov	r3, r2
 800c9bc:	009b      	lsls	r3, r3, #2
 800c9be:	4413      	add	r3, r2
 800c9c0:	009b      	lsls	r3, r3, #2
 800c9c2:	440b      	add	r3, r1
 800c9c4:	3318      	adds	r3, #24
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d02f      	beq.n	800ca2c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c9cc:	78fb      	ldrb	r3, [r7, #3]
 800c9ce:	f003 020f 	and.w	r2, r3, #15
 800c9d2:	6879      	ldr	r1, [r7, #4]
 800c9d4:	4613      	mov	r3, r2
 800c9d6:	009b      	lsls	r3, r3, #2
 800c9d8:	4413      	add	r3, r2
 800c9da:	009b      	lsls	r3, r3, #2
 800c9dc:	440b      	add	r3, r1
 800c9de:	3318      	adds	r3, #24
 800c9e0:	681a      	ldr	r2, [r3, #0]
 800c9e2:	78fb      	ldrb	r3, [r7, #3]
 800c9e4:	f003 010f 	and.w	r1, r3, #15
 800c9e8:	68f8      	ldr	r0, [r7, #12]
 800c9ea:	460b      	mov	r3, r1
 800c9ec:	00db      	lsls	r3, r3, #3
 800c9ee:	440b      	add	r3, r1
 800c9f0:	009b      	lsls	r3, r3, #2
 800c9f2:	4403      	add	r3, r0
 800c9f4:	3348      	adds	r3, #72	; 0x48
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	fbb2 f1f3 	udiv	r1, r2, r3
 800c9fc:	fb01 f303 	mul.w	r3, r1, r3
 800ca00:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d112      	bne.n	800ca2c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800ca06:	78fb      	ldrb	r3, [r7, #3]
 800ca08:	f003 020f 	and.w	r2, r3, #15
 800ca0c:	6879      	ldr	r1, [r7, #4]
 800ca0e:	4613      	mov	r3, r2
 800ca10:	009b      	lsls	r3, r3, #2
 800ca12:	4413      	add	r3, r2
 800ca14:	009b      	lsls	r3, r3, #2
 800ca16:	440b      	add	r3, r1
 800ca18:	3318      	adds	r3, #24
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ca1e:	78f9      	ldrb	r1, [r7, #3]
 800ca20:	2300      	movs	r3, #0
 800ca22:	2200      	movs	r2, #0
 800ca24:	6878      	ldr	r0, [r7, #4]
 800ca26:	f002 f9b8 	bl	800ed9a <USBD_LL_Transmit>
 800ca2a:	e01d      	b.n	800ca68 <USBD_CDC_DataIn+0xf0>
  }
  else
  {
    hcdc->TxState = 0U;
 800ca2c:	68bb      	ldr	r3, [r7, #8]
 800ca2e:	2200      	movs	r2, #0
 800ca30:	655a      	str	r2, [r3, #84]	; 0x54

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ca38:	687a      	ldr	r2, [r7, #4]
 800ca3a:	33b0      	adds	r3, #176	; 0xb0
 800ca3c:	009b      	lsls	r3, r3, #2
 800ca3e:	4413      	add	r3, r2
 800ca40:	685b      	ldr	r3, [r3, #4]
 800ca42:	691b      	ldr	r3, [r3, #16]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d00f      	beq.n	800ca68 <USBD_CDC_DataIn+0xf0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ca4e:	687a      	ldr	r2, [r7, #4]
 800ca50:	33b0      	adds	r3, #176	; 0xb0
 800ca52:	009b      	lsls	r3, r3, #2
 800ca54:	4413      	add	r3, r2
 800ca56:	685b      	ldr	r3, [r3, #4]
 800ca58:	691b      	ldr	r3, [r3, #16]
 800ca5a:	68ba      	ldr	r2, [r7, #8]
 800ca5c:	6c90      	ldr	r0, [r2, #72]	; 0x48
 800ca5e:	68ba      	ldr	r2, [r7, #8]
 800ca60:	f102 0150 	add.w	r1, r2, #80	; 0x50
 800ca64:	78fa      	ldrb	r2, [r7, #3]
 800ca66:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ca68:	2300      	movs	r3, #0
}
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	3710      	adds	r7, #16
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	bd80      	pop	{r7, pc}

0800ca72 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ca72:	b580      	push	{r7, lr}
 800ca74:	b084      	sub	sp, #16
 800ca76:	af00      	add	r7, sp, #0
 800ca78:	6078      	str	r0, [r7, #4]
 800ca7a:	460b      	mov	r3, r1
 800ca7c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	32b0      	adds	r2, #176	; 0xb0
 800ca88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca8c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	32b0      	adds	r2, #176	; 0xb0
 800ca98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d101      	bne.n	800caa4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800caa0:	2303      	movs	r3, #3
 800caa2:	e017      	b.n	800cad4 <USBD_CDC_DataOut+0x62>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800caa4:	78fb      	ldrb	r3, [r7, #3]
 800caa6:	4619      	mov	r1, r3
 800caa8:	6878      	ldr	r0, [r7, #4]
 800caaa:	f002 f9b8 	bl	800ee1e <USBD_LL_GetRxDataSize>
 800caae:	4602      	mov	r2, r0
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800caba:	687a      	ldr	r2, [r7, #4]
 800cabc:	33b0      	adds	r3, #176	; 0xb0
 800cabe:	009b      	lsls	r3, r3, #2
 800cac0:	4413      	add	r3, r2
 800cac2:	685b      	ldr	r3, [r3, #4]
 800cac4:	68db      	ldr	r3, [r3, #12]
 800cac6:	68fa      	ldr	r2, [r7, #12]
 800cac8:	6c50      	ldr	r0, [r2, #68]	; 0x44
 800caca:	68fa      	ldr	r2, [r7, #12]
 800cacc:	324c      	adds	r2, #76	; 0x4c
 800cace:	4611      	mov	r1, r2
 800cad0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800cad2:	2300      	movs	r3, #0
}
 800cad4:	4618      	mov	r0, r3
 800cad6:	3710      	adds	r7, #16
 800cad8:	46bd      	mov	sp, r7
 800cada:	bd80      	pop	{r7, pc}

0800cadc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b084      	sub	sp, #16
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	32b0      	adds	r2, #176	; 0xb0
 800caee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800caf2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d101      	bne.n	800cafe <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cafa:	2303      	movs	r3, #3
 800cafc:	e025      	b.n	800cb4a <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cb04:	687a      	ldr	r2, [r7, #4]
 800cb06:	33b0      	adds	r3, #176	; 0xb0
 800cb08:	009b      	lsls	r3, r3, #2
 800cb0a:	4413      	add	r3, r2
 800cb0c:	685b      	ldr	r3, [r3, #4]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d01a      	beq.n	800cb48 <USBD_CDC_EP0_RxReady+0x6c>
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cb18:	2bff      	cmp	r3, #255	; 0xff
 800cb1a:	d015      	beq.n	800cb48 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cb22:	687a      	ldr	r2, [r7, #4]
 800cb24:	33b0      	adds	r3, #176	; 0xb0
 800cb26:	009b      	lsls	r3, r3, #2
 800cb28:	4413      	add	r3, r2
 800cb2a:	685b      	ldr	r3, [r3, #4]
 800cb2c:	689b      	ldr	r3, [r3, #8]
 800cb2e:	68fa      	ldr	r2, [r7, #12]
 800cb30:	f892 0040 	ldrb.w	r0, [r2, #64]	; 0x40
                                                                     (uint8_t *)hcdc->data,
 800cb34:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800cb36:	68fa      	ldr	r2, [r7, #12]
 800cb38:	f892 2041 	ldrb.w	r2, [r2, #65]	; 0x41
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800cb3c:	b292      	uxth	r2, r2
 800cb3e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	22ff      	movs	r2, #255	; 0xff
 800cb44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return (uint8_t)USBD_OK;
 800cb48:	2300      	movs	r3, #0
}
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	3710      	adds	r7, #16
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd80      	pop	{r7, pc}
	...

0800cb54 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b086      	sub	sp, #24
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800cb5c:	2182      	movs	r1, #130	; 0x82
 800cb5e:	4818      	ldr	r0, [pc, #96]	; (800cbc0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800cb60:	f000 fd43 	bl	800d5ea <USBD_GetEpDesc>
 800cb64:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800cb66:	2101      	movs	r1, #1
 800cb68:	4815      	ldr	r0, [pc, #84]	; (800cbc0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800cb6a:	f000 fd3e 	bl	800d5ea <USBD_GetEpDesc>
 800cb6e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800cb70:	2181      	movs	r1, #129	; 0x81
 800cb72:	4813      	ldr	r0, [pc, #76]	; (800cbc0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800cb74:	f000 fd39 	bl	800d5ea <USBD_GetEpDesc>
 800cb78:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800cb7a:	697b      	ldr	r3, [r7, #20]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d002      	beq.n	800cb86 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800cb80:	697b      	ldr	r3, [r7, #20]
 800cb82:	2210      	movs	r2, #16
 800cb84:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800cb86:	693b      	ldr	r3, [r7, #16]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d006      	beq.n	800cb9a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cb8c:	693b      	ldr	r3, [r7, #16]
 800cb8e:	2200      	movs	r2, #0
 800cb90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cb94:	711a      	strb	r2, [r3, #4]
 800cb96:	2200      	movs	r2, #0
 800cb98:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d006      	beq.n	800cbae <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	2200      	movs	r2, #0
 800cba4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cba8:	711a      	strb	r2, [r3, #4]
 800cbaa:	2200      	movs	r2, #0
 800cbac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	2243      	movs	r2, #67	; 0x43
 800cbb2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800cbb4:	4b02      	ldr	r3, [pc, #8]	; (800cbc0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	3718      	adds	r7, #24
 800cbba:	46bd      	mov	sp, r7
 800cbbc:	bd80      	pop	{r7, pc}
 800cbbe:	bf00      	nop
 800cbc0:	200000d0 	.word	0x200000d0

0800cbc4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b086      	sub	sp, #24
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800cbcc:	2182      	movs	r1, #130	; 0x82
 800cbce:	4818      	ldr	r0, [pc, #96]	; (800cc30 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800cbd0:	f000 fd0b 	bl	800d5ea <USBD_GetEpDesc>
 800cbd4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800cbd6:	2101      	movs	r1, #1
 800cbd8:	4815      	ldr	r0, [pc, #84]	; (800cc30 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800cbda:	f000 fd06 	bl	800d5ea <USBD_GetEpDesc>
 800cbde:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800cbe0:	2181      	movs	r1, #129	; 0x81
 800cbe2:	4813      	ldr	r0, [pc, #76]	; (800cc30 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800cbe4:	f000 fd01 	bl	800d5ea <USBD_GetEpDesc>
 800cbe8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800cbea:	697b      	ldr	r3, [r7, #20]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d002      	beq.n	800cbf6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800cbf0:	697b      	ldr	r3, [r7, #20]
 800cbf2:	2210      	movs	r2, #16
 800cbf4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800cbf6:	693b      	ldr	r3, [r7, #16]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d006      	beq.n	800cc0a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800cbfc:	693b      	ldr	r3, [r7, #16]
 800cbfe:	2200      	movs	r2, #0
 800cc00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cc04:	711a      	strb	r2, [r3, #4]
 800cc06:	2200      	movs	r2, #0
 800cc08:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d006      	beq.n	800cc1e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	2200      	movs	r2, #0
 800cc14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cc18:	711a      	strb	r2, [r3, #4]
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	2243      	movs	r2, #67	; 0x43
 800cc22:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800cc24:	4b02      	ldr	r3, [pc, #8]	; (800cc30 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800cc26:	4618      	mov	r0, r3
 800cc28:	3718      	adds	r7, #24
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	bd80      	pop	{r7, pc}
 800cc2e:	bf00      	nop
 800cc30:	200000d0 	.word	0x200000d0

0800cc34 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b086      	sub	sp, #24
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800cc3c:	2182      	movs	r1, #130	; 0x82
 800cc3e:	4818      	ldr	r0, [pc, #96]	; (800cca0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cc40:	f000 fcd3 	bl	800d5ea <USBD_GetEpDesc>
 800cc44:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800cc46:	2101      	movs	r1, #1
 800cc48:	4815      	ldr	r0, [pc, #84]	; (800cca0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cc4a:	f000 fcce 	bl	800d5ea <USBD_GetEpDesc>
 800cc4e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800cc50:	2181      	movs	r1, #129	; 0x81
 800cc52:	4813      	ldr	r0, [pc, #76]	; (800cca0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cc54:	f000 fcc9 	bl	800d5ea <USBD_GetEpDesc>
 800cc58:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800cc5a:	697b      	ldr	r3, [r7, #20]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d002      	beq.n	800cc66 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800cc60:	697b      	ldr	r3, [r7, #20]
 800cc62:	2210      	movs	r2, #16
 800cc64:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800cc66:	693b      	ldr	r3, [r7, #16]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d006      	beq.n	800cc7a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cc6c:	693b      	ldr	r3, [r7, #16]
 800cc6e:	2200      	movs	r2, #0
 800cc70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cc74:	711a      	strb	r2, [r3, #4]
 800cc76:	2200      	movs	r2, #0
 800cc78:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d006      	beq.n	800cc8e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	2200      	movs	r2, #0
 800cc84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cc88:	711a      	strb	r2, [r3, #4]
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	2243      	movs	r2, #67	; 0x43
 800cc92:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800cc94:	4b02      	ldr	r3, [pc, #8]	; (800cca0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800cc96:	4618      	mov	r0, r3
 800cc98:	3718      	adds	r7, #24
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bd80      	pop	{r7, pc}
 800cc9e:	bf00      	nop
 800cca0:	200000d0 	.word	0x200000d0

0800cca4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800cca4:	b480      	push	{r7}
 800cca6:	b083      	sub	sp, #12
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	220a      	movs	r2, #10
 800ccb0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ccb2:	4b03      	ldr	r3, [pc, #12]	; (800ccc0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	370c      	adds	r7, #12
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccbe:	4770      	bx	lr
 800ccc0:	2000008c 	.word	0x2000008c

0800ccc4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ccc4:	b480      	push	{r7}
 800ccc6:	b083      	sub	sp, #12
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
 800cccc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d101      	bne.n	800ccd8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ccd4:	2303      	movs	r3, #3
 800ccd6:	e009      	b.n	800ccec <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ccde:	687a      	ldr	r2, [r7, #4]
 800cce0:	33b0      	adds	r3, #176	; 0xb0
 800cce2:	009b      	lsls	r3, r3, #2
 800cce4:	4413      	add	r3, r2
 800cce6:	683a      	ldr	r2, [r7, #0]
 800cce8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800ccea:	2300      	movs	r3, #0
}
 800ccec:	4618      	mov	r0, r3
 800ccee:	370c      	adds	r7, #12
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf6:	4770      	bx	lr

0800ccf8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ccf8:	b480      	push	{r7}
 800ccfa:	b087      	sub	sp, #28
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	60f8      	str	r0, [r7, #12]
 800cd00:	60b9      	str	r1, [r7, #8]
 800cd02:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	32b0      	adds	r2, #176	; 0xb0
 800cd0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd12:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800cd14:	697b      	ldr	r3, [r7, #20]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d101      	bne.n	800cd1e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800cd1a:	2303      	movs	r3, #3
 800cd1c:	e006      	b.n	800cd2c <USBD_CDC_SetTxBuffer+0x34>
  }

  hcdc->TxBuffer = pbuff;
 800cd1e:	697b      	ldr	r3, [r7, #20]
 800cd20:	68ba      	ldr	r2, [r7, #8]
 800cd22:	649a      	str	r2, [r3, #72]	; 0x48
  hcdc->TxLength = length;
 800cd24:	697b      	ldr	r3, [r7, #20]
 800cd26:	687a      	ldr	r2, [r7, #4]
 800cd28:	651a      	str	r2, [r3, #80]	; 0x50

  return (uint8_t)USBD_OK;
 800cd2a:	2300      	movs	r3, #0
}
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	371c      	adds	r7, #28
 800cd30:	46bd      	mov	sp, r7
 800cd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd36:	4770      	bx	lr

0800cd38 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800cd38:	b480      	push	{r7}
 800cd3a:	b085      	sub	sp, #20
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
 800cd40:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	32b0      	adds	r2, #176	; 0xb0
 800cd4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd50:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d101      	bne.n	800cd5c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800cd58:	2303      	movs	r3, #3
 800cd5a:	e003      	b.n	800cd64 <USBD_CDC_SetRxBuffer+0x2c>
  }

  hcdc->RxBuffer = pbuff;
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	683a      	ldr	r2, [r7, #0]
 800cd60:	645a      	str	r2, [r3, #68]	; 0x44

  return (uint8_t)USBD_OK;
 800cd62:	2300      	movs	r3, #0
}
 800cd64:	4618      	mov	r0, r3
 800cd66:	3714      	adds	r7, #20
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6e:	4770      	bx	lr

0800cd70 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b084      	sub	sp, #16
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	32b0      	adds	r2, #176	; 0xb0
 800cd82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd86:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800cd88:	2301      	movs	r3, #1
 800cd8a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	32b0      	adds	r2, #176	; 0xb0
 800cd96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d101      	bne.n	800cda2 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800cd9e:	2303      	movs	r3, #3
 800cda0:	e020      	b.n	800cde4 <USBD_CDC_TransmitPacket+0x74>
  }

  if (hcdc->TxState == 0U)
 800cda2:	68bb      	ldr	r3, [r7, #8]
 800cda4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d11b      	bne.n	800cde2 <USBD_CDC_TransmitPacket+0x72>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800cdaa:	68bb      	ldr	r3, [r7, #8]
 800cdac:	2201      	movs	r2, #1
 800cdae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800cdb0:	4b0e      	ldr	r3, [pc, #56]	; (800cdec <USBD_CDC_TransmitPacket+0x7c>)
 800cdb2:	781b      	ldrb	r3, [r3, #0]
 800cdb4:	f003 020f 	and.w	r2, r3, #15
 800cdb8:	68bb      	ldr	r3, [r7, #8]
 800cdba:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800cdbc:	6878      	ldr	r0, [r7, #4]
 800cdbe:	4613      	mov	r3, r2
 800cdc0:	009b      	lsls	r3, r3, #2
 800cdc2:	4413      	add	r3, r2
 800cdc4:	009b      	lsls	r3, r3, #2
 800cdc6:	4403      	add	r3, r0
 800cdc8:	3318      	adds	r3, #24
 800cdca:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800cdcc:	4b07      	ldr	r3, [pc, #28]	; (800cdec <USBD_CDC_TransmitPacket+0x7c>)
 800cdce:	7819      	ldrb	r1, [r3, #0]
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cdd4:	68bb      	ldr	r3, [r7, #8]
 800cdd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cdd8:	6878      	ldr	r0, [r7, #4]
 800cdda:	f001 ffde 	bl	800ed9a <USBD_LL_Transmit>

    ret = USBD_OK;
 800cdde:	2300      	movs	r3, #0
 800cde0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800cde2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cde4:	4618      	mov	r0, r3
 800cde6:	3710      	adds	r7, #16
 800cde8:	46bd      	mov	sp, r7
 800cdea:	bd80      	pop	{r7, pc}
 800cdec:	20000113 	.word	0x20000113

0800cdf0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b084      	sub	sp, #16
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	32b0      	adds	r2, #176	; 0xb0
 800ce02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce06:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	32b0      	adds	r2, #176	; 0xb0
 800ce12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d101      	bne.n	800ce1e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800ce1a:	2303      	movs	r3, #3
 800ce1c:	e015      	b.n	800ce4a <USBD_CDC_ReceivePacket+0x5a>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	7c1b      	ldrb	r3, [r3, #16]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d108      	bne.n	800ce38 <USBD_CDC_ReceivePacket+0x48>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ce26:	4b0b      	ldr	r3, [pc, #44]	; (800ce54 <USBD_CDC_ReceivePacket+0x64>)
 800ce28:	7819      	ldrb	r1, [r3, #0]
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ce2e:	2340      	movs	r3, #64	; 0x40
 800ce30:	6878      	ldr	r0, [r7, #4]
 800ce32:	f001 ffd3 	bl	800eddc <USBD_LL_PrepareReceive>
 800ce36:	e007      	b.n	800ce48 <USBD_CDC_ReceivePacket+0x58>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ce38:	4b06      	ldr	r3, [pc, #24]	; (800ce54 <USBD_CDC_ReceivePacket+0x64>)
 800ce3a:	7819      	ldrb	r1, [r3, #0]
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ce40:	2340      	movs	r3, #64	; 0x40
 800ce42:	6878      	ldr	r0, [r7, #4]
 800ce44:	f001 ffca 	bl	800eddc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ce48:	2300      	movs	r3, #0
}
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	3710      	adds	r7, #16
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	bd80      	pop	{r7, pc}
 800ce52:	bf00      	nop
 800ce54:	20000114 	.word	0x20000114

0800ce58 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b086      	sub	sp, #24
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	60f8      	str	r0, [r7, #12]
 800ce60:	60b9      	str	r1, [r7, #8]
 800ce62:	4613      	mov	r3, r2
 800ce64:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d101      	bne.n	800ce70 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ce6c:	2303      	movs	r3, #3
 800ce6e:	e01f      	b.n	800ceb0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	2200      	movs	r2, #0
 800ce74:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	2200      	movs	r2, #0
 800ce84:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ce88:	68bb      	ldr	r3, [r7, #8]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d003      	beq.n	800ce96 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	68ba      	ldr	r2, [r7, #8]
 800ce92:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	2201      	movs	r2, #1
 800ce9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	79fa      	ldrb	r2, [r7, #7]
 800cea2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800cea4:	68f8      	ldr	r0, [r7, #12]
 800cea6:	f001 fe3d 	bl	800eb24 <USBD_LL_Init>
 800ceaa:	4603      	mov	r3, r0
 800ceac:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ceae:	7dfb      	ldrb	r3, [r7, #23]
}
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	3718      	adds	r7, #24
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	bd80      	pop	{r7, pc}

0800ceb8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	b084      	sub	sp, #16
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
 800cec0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cec2:	2300      	movs	r3, #0
 800cec4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d101      	bne.n	800ced0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800cecc:	2303      	movs	r3, #3
 800cece:	e025      	b.n	800cf1c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	683a      	ldr	r2, [r7, #0]
 800ced4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	32ae      	adds	r2, #174	; 0xae
 800cee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d00f      	beq.n	800cf0c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	32ae      	adds	r2, #174	; 0xae
 800cef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cefa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cefc:	f107 020e 	add.w	r2, r7, #14
 800cf00:	4610      	mov	r0, r2
 800cf02:	4798      	blx	r3
 800cf04:	4602      	mov	r2, r0
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800cf12:	1c5a      	adds	r2, r3, #1
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800cf1a:	2300      	movs	r3, #0
}
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	3710      	adds	r7, #16
 800cf20:	46bd      	mov	sp, r7
 800cf22:	bd80      	pop	{r7, pc}

0800cf24 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800cf24:	b580      	push	{r7, lr}
 800cf26:	b082      	sub	sp, #8
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800cf2c:	6878      	ldr	r0, [r7, #4]
 800cf2e:	f001 fe4b 	bl	800ebc8 <USBD_LL_Start>
 800cf32:	4603      	mov	r3, r0
}
 800cf34:	4618      	mov	r0, r3
 800cf36:	3708      	adds	r7, #8
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	bd80      	pop	{r7, pc}

0800cf3c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800cf3c:	b480      	push	{r7}
 800cf3e:	b083      	sub	sp, #12
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cf44:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800cf46:	4618      	mov	r0, r3
 800cf48:	370c      	adds	r7, #12
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf50:	4770      	bx	lr

0800cf52 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cf52:	b580      	push	{r7, lr}
 800cf54:	b084      	sub	sp, #16
 800cf56:	af00      	add	r7, sp, #0
 800cf58:	6078      	str	r0, [r7, #4]
 800cf5a:	460b      	mov	r3, r1
 800cf5c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800cf5e:	2300      	movs	r3, #0
 800cf60:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d009      	beq.n	800cf80 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	78fa      	ldrb	r2, [r7, #3]
 800cf76:	4611      	mov	r1, r2
 800cf78:	6878      	ldr	r0, [r7, #4]
 800cf7a:	4798      	blx	r3
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cf80:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf82:	4618      	mov	r0, r3
 800cf84:	3710      	adds	r7, #16
 800cf86:	46bd      	mov	sp, r7
 800cf88:	bd80      	pop	{r7, pc}

0800cf8a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cf8a:	b580      	push	{r7, lr}
 800cf8c:	b084      	sub	sp, #16
 800cf8e:	af00      	add	r7, sp, #0
 800cf90:	6078      	str	r0, [r7, #4]
 800cf92:	460b      	mov	r3, r1
 800cf94:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800cf96:	2300      	movs	r3, #0
 800cf98:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cfa0:	685b      	ldr	r3, [r3, #4]
 800cfa2:	78fa      	ldrb	r2, [r7, #3]
 800cfa4:	4611      	mov	r1, r2
 800cfa6:	6878      	ldr	r0, [r7, #4]
 800cfa8:	4798      	blx	r3
 800cfaa:	4603      	mov	r3, r0
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d001      	beq.n	800cfb4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800cfb0:	2303      	movs	r3, #3
 800cfb2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cfb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	3710      	adds	r7, #16
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	bd80      	pop	{r7, pc}

0800cfbe <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800cfbe:	b580      	push	{r7, lr}
 800cfc0:	b084      	sub	sp, #16
 800cfc2:	af00      	add	r7, sp, #0
 800cfc4:	6078      	str	r0, [r7, #4]
 800cfc6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cfce:	6839      	ldr	r1, [r7, #0]
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	f001 f908 	bl	800e1e6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	2201      	movs	r2, #1
 800cfda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800cfe4:	461a      	mov	r2, r3
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800cff2:	f003 031f 	and.w	r3, r3, #31
 800cff6:	2b02      	cmp	r3, #2
 800cff8:	d01a      	beq.n	800d030 <USBD_LL_SetupStage+0x72>
 800cffa:	2b02      	cmp	r3, #2
 800cffc:	d822      	bhi.n	800d044 <USBD_LL_SetupStage+0x86>
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d002      	beq.n	800d008 <USBD_LL_SetupStage+0x4a>
 800d002:	2b01      	cmp	r3, #1
 800d004:	d00a      	beq.n	800d01c <USBD_LL_SetupStage+0x5e>
 800d006:	e01d      	b.n	800d044 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d00e:	4619      	mov	r1, r3
 800d010:	6878      	ldr	r0, [r7, #4]
 800d012:	f000 fb5f 	bl	800d6d4 <USBD_StdDevReq>
 800d016:	4603      	mov	r3, r0
 800d018:	73fb      	strb	r3, [r7, #15]
      break;
 800d01a:	e020      	b.n	800d05e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d022:	4619      	mov	r1, r3
 800d024:	6878      	ldr	r0, [r7, #4]
 800d026:	f000 fbc7 	bl	800d7b8 <USBD_StdItfReq>
 800d02a:	4603      	mov	r3, r0
 800d02c:	73fb      	strb	r3, [r7, #15]
      break;
 800d02e:	e016      	b.n	800d05e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d036:	4619      	mov	r1, r3
 800d038:	6878      	ldr	r0, [r7, #4]
 800d03a:	f000 fc29 	bl	800d890 <USBD_StdEPReq>
 800d03e:	4603      	mov	r3, r0
 800d040:	73fb      	strb	r3, [r7, #15]
      break;
 800d042:	e00c      	b.n	800d05e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d04a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d04e:	b2db      	uxtb	r3, r3
 800d050:	4619      	mov	r1, r3
 800d052:	6878      	ldr	r0, [r7, #4]
 800d054:	f001 fe18 	bl	800ec88 <USBD_LL_StallEP>
 800d058:	4603      	mov	r3, r0
 800d05a:	73fb      	strb	r3, [r7, #15]
      break;
 800d05c:	bf00      	nop
  }

  return ret;
 800d05e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d060:	4618      	mov	r0, r3
 800d062:	3710      	adds	r7, #16
 800d064:	46bd      	mov	sp, r7
 800d066:	bd80      	pop	{r7, pc}

0800d068 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b086      	sub	sp, #24
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	60f8      	str	r0, [r7, #12]
 800d070:	460b      	mov	r3, r1
 800d072:	607a      	str	r2, [r7, #4]
 800d074:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d076:	2300      	movs	r3, #0
 800d078:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d07a:	7afb      	ldrb	r3, [r7, #11]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d16e      	bne.n	800d15e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d086:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d08e:	2b03      	cmp	r3, #3
 800d090:	f040 8098 	bne.w	800d1c4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800d094:	693b      	ldr	r3, [r7, #16]
 800d096:	689a      	ldr	r2, [r3, #8]
 800d098:	693b      	ldr	r3, [r7, #16]
 800d09a:	68db      	ldr	r3, [r3, #12]
 800d09c:	429a      	cmp	r2, r3
 800d09e:	d913      	bls.n	800d0c8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800d0a0:	693b      	ldr	r3, [r7, #16]
 800d0a2:	689a      	ldr	r2, [r3, #8]
 800d0a4:	693b      	ldr	r3, [r7, #16]
 800d0a6:	68db      	ldr	r3, [r3, #12]
 800d0a8:	1ad2      	subs	r2, r2, r3
 800d0aa:	693b      	ldr	r3, [r7, #16]
 800d0ac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d0ae:	693b      	ldr	r3, [r7, #16]
 800d0b0:	68da      	ldr	r2, [r3, #12]
 800d0b2:	693b      	ldr	r3, [r7, #16]
 800d0b4:	689b      	ldr	r3, [r3, #8]
 800d0b6:	4293      	cmp	r3, r2
 800d0b8:	bf28      	it	cs
 800d0ba:	4613      	movcs	r3, r2
 800d0bc:	461a      	mov	r2, r3
 800d0be:	6879      	ldr	r1, [r7, #4]
 800d0c0:	68f8      	ldr	r0, [r7, #12]
 800d0c2:	f001 f984 	bl	800e3ce <USBD_CtlContinueRx>
 800d0c6:	e07d      	b.n	800d1c4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d0ce:	f003 031f 	and.w	r3, r3, #31
 800d0d2:	2b02      	cmp	r3, #2
 800d0d4:	d014      	beq.n	800d100 <USBD_LL_DataOutStage+0x98>
 800d0d6:	2b02      	cmp	r3, #2
 800d0d8:	d81d      	bhi.n	800d116 <USBD_LL_DataOutStage+0xae>
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d002      	beq.n	800d0e4 <USBD_LL_DataOutStage+0x7c>
 800d0de:	2b01      	cmp	r3, #1
 800d0e0:	d003      	beq.n	800d0ea <USBD_LL_DataOutStage+0x82>
 800d0e2:	e018      	b.n	800d116 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d0e4:	2300      	movs	r3, #0
 800d0e6:	75bb      	strb	r3, [r7, #22]
            break;
 800d0e8:	e018      	b.n	800d11c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d0f0:	b2db      	uxtb	r3, r3
 800d0f2:	4619      	mov	r1, r3
 800d0f4:	68f8      	ldr	r0, [r7, #12]
 800d0f6:	f000 fa5e 	bl	800d5b6 <USBD_CoreFindIF>
 800d0fa:	4603      	mov	r3, r0
 800d0fc:	75bb      	strb	r3, [r7, #22]
            break;
 800d0fe:	e00d      	b.n	800d11c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d106:	b2db      	uxtb	r3, r3
 800d108:	4619      	mov	r1, r3
 800d10a:	68f8      	ldr	r0, [r7, #12]
 800d10c:	f000 fa60 	bl	800d5d0 <USBD_CoreFindEP>
 800d110:	4603      	mov	r3, r0
 800d112:	75bb      	strb	r3, [r7, #22]
            break;
 800d114:	e002      	b.n	800d11c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d116:	2300      	movs	r3, #0
 800d118:	75bb      	strb	r3, [r7, #22]
            break;
 800d11a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d11c:	7dbb      	ldrb	r3, [r7, #22]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d119      	bne.n	800d156 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d128:	b2db      	uxtb	r3, r3
 800d12a:	2b03      	cmp	r3, #3
 800d12c:	d113      	bne.n	800d156 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d12e:	7dba      	ldrb	r2, [r7, #22]
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	32ae      	adds	r2, #174	; 0xae
 800d134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d138:	691b      	ldr	r3, [r3, #16]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d00b      	beq.n	800d156 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d13e:	7dba      	ldrb	r2, [r7, #22]
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d146:	7dba      	ldrb	r2, [r7, #22]
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	32ae      	adds	r2, #174	; 0xae
 800d14c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d150:	691b      	ldr	r3, [r3, #16]
 800d152:	68f8      	ldr	r0, [r7, #12]
 800d154:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d156:	68f8      	ldr	r0, [r7, #12]
 800d158:	f001 f94a 	bl	800e3f0 <USBD_CtlSendStatus>
 800d15c:	e032      	b.n	800d1c4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d15e:	7afb      	ldrb	r3, [r7, #11]
 800d160:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d164:	b2db      	uxtb	r3, r3
 800d166:	4619      	mov	r1, r3
 800d168:	68f8      	ldr	r0, [r7, #12]
 800d16a:	f000 fa31 	bl	800d5d0 <USBD_CoreFindEP>
 800d16e:	4603      	mov	r3, r0
 800d170:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d172:	7dbb      	ldrb	r3, [r7, #22]
 800d174:	2bff      	cmp	r3, #255	; 0xff
 800d176:	d025      	beq.n	800d1c4 <USBD_LL_DataOutStage+0x15c>
 800d178:	7dbb      	ldrb	r3, [r7, #22]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d122      	bne.n	800d1c4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d184:	b2db      	uxtb	r3, r3
 800d186:	2b03      	cmp	r3, #3
 800d188:	d117      	bne.n	800d1ba <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d18a:	7dba      	ldrb	r2, [r7, #22]
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	32ae      	adds	r2, #174	; 0xae
 800d190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d194:	699b      	ldr	r3, [r3, #24]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d00f      	beq.n	800d1ba <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d19a:	7dba      	ldrb	r2, [r7, #22]
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d1a2:	7dba      	ldrb	r2, [r7, #22]
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	32ae      	adds	r2, #174	; 0xae
 800d1a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1ac:	699b      	ldr	r3, [r3, #24]
 800d1ae:	7afa      	ldrb	r2, [r7, #11]
 800d1b0:	4611      	mov	r1, r2
 800d1b2:	68f8      	ldr	r0, [r7, #12]
 800d1b4:	4798      	blx	r3
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d1ba:	7dfb      	ldrb	r3, [r7, #23]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d001      	beq.n	800d1c4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800d1c0:	7dfb      	ldrb	r3, [r7, #23]
 800d1c2:	e000      	b.n	800d1c6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800d1c4:	2300      	movs	r3, #0
}
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	3718      	adds	r7, #24
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	bd80      	pop	{r7, pc}

0800d1ce <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d1ce:	b580      	push	{r7, lr}
 800d1d0:	b086      	sub	sp, #24
 800d1d2:	af00      	add	r7, sp, #0
 800d1d4:	60f8      	str	r0, [r7, #12]
 800d1d6:	460b      	mov	r3, r1
 800d1d8:	607a      	str	r2, [r7, #4]
 800d1da:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800d1dc:	7afb      	ldrb	r3, [r7, #11]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d16f      	bne.n	800d2c2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	3314      	adds	r3, #20
 800d1e6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d1ee:	2b02      	cmp	r3, #2
 800d1f0:	d15a      	bne.n	800d2a8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800d1f2:	693b      	ldr	r3, [r7, #16]
 800d1f4:	689a      	ldr	r2, [r3, #8]
 800d1f6:	693b      	ldr	r3, [r7, #16]
 800d1f8:	68db      	ldr	r3, [r3, #12]
 800d1fa:	429a      	cmp	r2, r3
 800d1fc:	d914      	bls.n	800d228 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d1fe:	693b      	ldr	r3, [r7, #16]
 800d200:	689a      	ldr	r2, [r3, #8]
 800d202:	693b      	ldr	r3, [r7, #16]
 800d204:	68db      	ldr	r3, [r3, #12]
 800d206:	1ad2      	subs	r2, r2, r3
 800d208:	693b      	ldr	r3, [r7, #16]
 800d20a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d20c:	693b      	ldr	r3, [r7, #16]
 800d20e:	689b      	ldr	r3, [r3, #8]
 800d210:	461a      	mov	r2, r3
 800d212:	6879      	ldr	r1, [r7, #4]
 800d214:	68f8      	ldr	r0, [r7, #12]
 800d216:	f001 f8ac 	bl	800e372 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d21a:	2300      	movs	r3, #0
 800d21c:	2200      	movs	r2, #0
 800d21e:	2100      	movs	r1, #0
 800d220:	68f8      	ldr	r0, [r7, #12]
 800d222:	f001 fddb 	bl	800eddc <USBD_LL_PrepareReceive>
 800d226:	e03f      	b.n	800d2a8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d228:	693b      	ldr	r3, [r7, #16]
 800d22a:	68da      	ldr	r2, [r3, #12]
 800d22c:	693b      	ldr	r3, [r7, #16]
 800d22e:	689b      	ldr	r3, [r3, #8]
 800d230:	429a      	cmp	r2, r3
 800d232:	d11c      	bne.n	800d26e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d234:	693b      	ldr	r3, [r7, #16]
 800d236:	685a      	ldr	r2, [r3, #4]
 800d238:	693b      	ldr	r3, [r7, #16]
 800d23a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d23c:	429a      	cmp	r2, r3
 800d23e:	d316      	bcc.n	800d26e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d240:	693b      	ldr	r3, [r7, #16]
 800d242:	685a      	ldr	r2, [r3, #4]
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d24a:	429a      	cmp	r2, r3
 800d24c:	d20f      	bcs.n	800d26e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d24e:	2200      	movs	r2, #0
 800d250:	2100      	movs	r1, #0
 800d252:	68f8      	ldr	r0, [r7, #12]
 800d254:	f001 f88d 	bl	800e372 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	2200      	movs	r2, #0
 800d25c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d260:	2300      	movs	r3, #0
 800d262:	2200      	movs	r2, #0
 800d264:	2100      	movs	r1, #0
 800d266:	68f8      	ldr	r0, [r7, #12]
 800d268:	f001 fdb8 	bl	800eddc <USBD_LL_PrepareReceive>
 800d26c:	e01c      	b.n	800d2a8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d274:	b2db      	uxtb	r3, r3
 800d276:	2b03      	cmp	r3, #3
 800d278:	d10f      	bne.n	800d29a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d280:	68db      	ldr	r3, [r3, #12]
 800d282:	2b00      	cmp	r3, #0
 800d284:	d009      	beq.n	800d29a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	2200      	movs	r2, #0
 800d28a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d294:	68db      	ldr	r3, [r3, #12]
 800d296:	68f8      	ldr	r0, [r7, #12]
 800d298:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d29a:	2180      	movs	r1, #128	; 0x80
 800d29c:	68f8      	ldr	r0, [r7, #12]
 800d29e:	f001 fcf3 	bl	800ec88 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d2a2:	68f8      	ldr	r0, [r7, #12]
 800d2a4:	f001 f8b7 	bl	800e416 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d03a      	beq.n	800d328 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800d2b2:	68f8      	ldr	r0, [r7, #12]
 800d2b4:	f7ff fe42 	bl	800cf3c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d2c0:	e032      	b.n	800d328 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d2c2:	7afb      	ldrb	r3, [r7, #11]
 800d2c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d2c8:	b2db      	uxtb	r3, r3
 800d2ca:	4619      	mov	r1, r3
 800d2cc:	68f8      	ldr	r0, [r7, #12]
 800d2ce:	f000 f97f 	bl	800d5d0 <USBD_CoreFindEP>
 800d2d2:	4603      	mov	r3, r0
 800d2d4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d2d6:	7dfb      	ldrb	r3, [r7, #23]
 800d2d8:	2bff      	cmp	r3, #255	; 0xff
 800d2da:	d025      	beq.n	800d328 <USBD_LL_DataInStage+0x15a>
 800d2dc:	7dfb      	ldrb	r3, [r7, #23]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d122      	bne.n	800d328 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2e8:	b2db      	uxtb	r3, r3
 800d2ea:	2b03      	cmp	r3, #3
 800d2ec:	d11c      	bne.n	800d328 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d2ee:	7dfa      	ldrb	r2, [r7, #23]
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	32ae      	adds	r2, #174	; 0xae
 800d2f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2f8:	695b      	ldr	r3, [r3, #20]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d014      	beq.n	800d328 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800d2fe:	7dfa      	ldrb	r2, [r7, #23]
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d306:	7dfa      	ldrb	r2, [r7, #23]
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	32ae      	adds	r2, #174	; 0xae
 800d30c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d310:	695b      	ldr	r3, [r3, #20]
 800d312:	7afa      	ldrb	r2, [r7, #11]
 800d314:	4611      	mov	r1, r2
 800d316:	68f8      	ldr	r0, [r7, #12]
 800d318:	4798      	blx	r3
 800d31a:	4603      	mov	r3, r0
 800d31c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800d31e:	7dbb      	ldrb	r3, [r7, #22]
 800d320:	2b00      	cmp	r3, #0
 800d322:	d001      	beq.n	800d328 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800d324:	7dbb      	ldrb	r3, [r7, #22]
 800d326:	e000      	b.n	800d32a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800d328:	2300      	movs	r3, #0
}
 800d32a:	4618      	mov	r0, r3
 800d32c:	3718      	adds	r7, #24
 800d32e:	46bd      	mov	sp, r7
 800d330:	bd80      	pop	{r7, pc}

0800d332 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d332:	b580      	push	{r7, lr}
 800d334:	b084      	sub	sp, #16
 800d336:	af00      	add	r7, sp, #0
 800d338:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d33a:	2300      	movs	r3, #0
 800d33c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	2201      	movs	r2, #1
 800d342:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	2200      	movs	r2, #0
 800d34a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	2200      	movs	r2, #0
 800d352:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2200      	movs	r2, #0
 800d358:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	2200      	movs	r2, #0
 800d360:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d014      	beq.n	800d398 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d374:	685b      	ldr	r3, [r3, #4]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d00e      	beq.n	800d398 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d380:	685b      	ldr	r3, [r3, #4]
 800d382:	687a      	ldr	r2, [r7, #4]
 800d384:	6852      	ldr	r2, [r2, #4]
 800d386:	b2d2      	uxtb	r2, r2
 800d388:	4611      	mov	r1, r2
 800d38a:	6878      	ldr	r0, [r7, #4]
 800d38c:	4798      	blx	r3
 800d38e:	4603      	mov	r3, r0
 800d390:	2b00      	cmp	r3, #0
 800d392:	d001      	beq.n	800d398 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800d394:	2303      	movs	r3, #3
 800d396:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d398:	2340      	movs	r3, #64	; 0x40
 800d39a:	2200      	movs	r2, #0
 800d39c:	2100      	movs	r1, #0
 800d39e:	6878      	ldr	r0, [r7, #4]
 800d3a0:	f001 fc2d 	bl	800ebfe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	2201      	movs	r2, #1
 800d3a8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	2240      	movs	r2, #64	; 0x40
 800d3b0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d3b4:	2340      	movs	r3, #64	; 0x40
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	2180      	movs	r1, #128	; 0x80
 800d3ba:	6878      	ldr	r0, [r7, #4]
 800d3bc:	f001 fc1f 	bl	800ebfe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	2201      	movs	r2, #1
 800d3c4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	2240      	movs	r2, #64	; 0x40
 800d3ca:	621a      	str	r2, [r3, #32]

  return ret;
 800d3cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	3710      	adds	r7, #16
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	bd80      	pop	{r7, pc}

0800d3d6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d3d6:	b480      	push	{r7}
 800d3d8:	b083      	sub	sp, #12
 800d3da:	af00      	add	r7, sp, #0
 800d3dc:	6078      	str	r0, [r7, #4]
 800d3de:	460b      	mov	r3, r1
 800d3e0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	78fa      	ldrb	r2, [r7, #3]
 800d3e6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d3e8:	2300      	movs	r3, #0
}
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	370c      	adds	r7, #12
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f4:	4770      	bx	lr

0800d3f6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d3f6:	b480      	push	{r7}
 800d3f8:	b083      	sub	sp, #12
 800d3fa:	af00      	add	r7, sp, #0
 800d3fc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d404:	b2da      	uxtb	r2, r3
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	2204      	movs	r2, #4
 800d410:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d414:	2300      	movs	r3, #0
}
 800d416:	4618      	mov	r0, r3
 800d418:	370c      	adds	r7, #12
 800d41a:	46bd      	mov	sp, r7
 800d41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d420:	4770      	bx	lr

0800d422 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d422:	b480      	push	{r7}
 800d424:	b083      	sub	sp, #12
 800d426:	af00      	add	r7, sp, #0
 800d428:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d430:	b2db      	uxtb	r3, r3
 800d432:	2b04      	cmp	r3, #4
 800d434:	d106      	bne.n	800d444 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d43c:	b2da      	uxtb	r2, r3
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d444:	2300      	movs	r3, #0
}
 800d446:	4618      	mov	r0, r3
 800d448:	370c      	adds	r7, #12
 800d44a:	46bd      	mov	sp, r7
 800d44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d450:	4770      	bx	lr

0800d452 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d452:	b580      	push	{r7, lr}
 800d454:	b082      	sub	sp, #8
 800d456:	af00      	add	r7, sp, #0
 800d458:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d460:	b2db      	uxtb	r3, r3
 800d462:	2b03      	cmp	r3, #3
 800d464:	d110      	bne.n	800d488 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d00b      	beq.n	800d488 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d476:	69db      	ldr	r3, [r3, #28]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d005      	beq.n	800d488 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d482:	69db      	ldr	r3, [r3, #28]
 800d484:	6878      	ldr	r0, [r7, #4]
 800d486:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800d488:	2300      	movs	r3, #0
}
 800d48a:	4618      	mov	r0, r3
 800d48c:	3708      	adds	r7, #8
 800d48e:	46bd      	mov	sp, r7
 800d490:	bd80      	pop	{r7, pc}

0800d492 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d492:	b580      	push	{r7, lr}
 800d494:	b082      	sub	sp, #8
 800d496:	af00      	add	r7, sp, #0
 800d498:	6078      	str	r0, [r7, #4]
 800d49a:	460b      	mov	r3, r1
 800d49c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	32ae      	adds	r2, #174	; 0xae
 800d4a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d101      	bne.n	800d4b4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800d4b0:	2303      	movs	r3, #3
 800d4b2:	e01c      	b.n	800d4ee <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4ba:	b2db      	uxtb	r3, r3
 800d4bc:	2b03      	cmp	r3, #3
 800d4be:	d115      	bne.n	800d4ec <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	32ae      	adds	r2, #174	; 0xae
 800d4ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4ce:	6a1b      	ldr	r3, [r3, #32]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d00b      	beq.n	800d4ec <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	32ae      	adds	r2, #174	; 0xae
 800d4de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4e2:	6a1b      	ldr	r3, [r3, #32]
 800d4e4:	78fa      	ldrb	r2, [r7, #3]
 800d4e6:	4611      	mov	r1, r2
 800d4e8:	6878      	ldr	r0, [r7, #4]
 800d4ea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d4ec:	2300      	movs	r3, #0
}
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	3708      	adds	r7, #8
 800d4f2:	46bd      	mov	sp, r7
 800d4f4:	bd80      	pop	{r7, pc}

0800d4f6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d4f6:	b580      	push	{r7, lr}
 800d4f8:	b082      	sub	sp, #8
 800d4fa:	af00      	add	r7, sp, #0
 800d4fc:	6078      	str	r0, [r7, #4]
 800d4fe:	460b      	mov	r3, r1
 800d500:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	32ae      	adds	r2, #174	; 0xae
 800d50c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d101      	bne.n	800d518 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800d514:	2303      	movs	r3, #3
 800d516:	e01c      	b.n	800d552 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d51e:	b2db      	uxtb	r3, r3
 800d520:	2b03      	cmp	r3, #3
 800d522:	d115      	bne.n	800d550 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	32ae      	adds	r2, #174	; 0xae
 800d52e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d534:	2b00      	cmp	r3, #0
 800d536:	d00b      	beq.n	800d550 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	32ae      	adds	r2, #174	; 0xae
 800d542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d548:	78fa      	ldrb	r2, [r7, #3]
 800d54a:	4611      	mov	r1, r2
 800d54c:	6878      	ldr	r0, [r7, #4]
 800d54e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d550:	2300      	movs	r3, #0
}
 800d552:	4618      	mov	r0, r3
 800d554:	3708      	adds	r7, #8
 800d556:	46bd      	mov	sp, r7
 800d558:	bd80      	pop	{r7, pc}

0800d55a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d55a:	b480      	push	{r7}
 800d55c:	b083      	sub	sp, #12
 800d55e:	af00      	add	r7, sp, #0
 800d560:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d562:	2300      	movs	r3, #0
}
 800d564:	4618      	mov	r0, r3
 800d566:	370c      	adds	r7, #12
 800d568:	46bd      	mov	sp, r7
 800d56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56e:	4770      	bx	lr

0800d570 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b084      	sub	sp, #16
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800d578:	2300      	movs	r3, #0
 800d57a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2201      	movs	r2, #1
 800d580:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d00e      	beq.n	800d5ac <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d594:	685b      	ldr	r3, [r3, #4]
 800d596:	687a      	ldr	r2, [r7, #4]
 800d598:	6852      	ldr	r2, [r2, #4]
 800d59a:	b2d2      	uxtb	r2, r2
 800d59c:	4611      	mov	r1, r2
 800d59e:	6878      	ldr	r0, [r7, #4]
 800d5a0:	4798      	blx	r3
 800d5a2:	4603      	mov	r3, r0
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d001      	beq.n	800d5ac <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800d5a8:	2303      	movs	r3, #3
 800d5aa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d5ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	3710      	adds	r7, #16
 800d5b2:	46bd      	mov	sp, r7
 800d5b4:	bd80      	pop	{r7, pc}

0800d5b6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d5b6:	b480      	push	{r7}
 800d5b8:	b083      	sub	sp, #12
 800d5ba:	af00      	add	r7, sp, #0
 800d5bc:	6078      	str	r0, [r7, #4]
 800d5be:	460b      	mov	r3, r1
 800d5c0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d5c2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	370c      	adds	r7, #12
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ce:	4770      	bx	lr

0800d5d0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d5d0:	b480      	push	{r7}
 800d5d2:	b083      	sub	sp, #12
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
 800d5d8:	460b      	mov	r3, r1
 800d5da:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d5dc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d5de:	4618      	mov	r0, r3
 800d5e0:	370c      	adds	r7, #12
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e8:	4770      	bx	lr

0800d5ea <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800d5ea:	b580      	push	{r7, lr}
 800d5ec:	b086      	sub	sp, #24
 800d5ee:	af00      	add	r7, sp, #0
 800d5f0:	6078      	str	r0, [r7, #4]
 800d5f2:	460b      	mov	r3, r1
 800d5f4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800d5fe:	2300      	movs	r3, #0
 800d600:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	885b      	ldrh	r3, [r3, #2]
 800d606:	b29a      	uxth	r2, r3
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	781b      	ldrb	r3, [r3, #0]
 800d60c:	b29b      	uxth	r3, r3
 800d60e:	429a      	cmp	r2, r3
 800d610:	d920      	bls.n	800d654 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	781b      	ldrb	r3, [r3, #0]
 800d616:	b29b      	uxth	r3, r3
 800d618:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800d61a:	e013      	b.n	800d644 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800d61c:	f107 030a 	add.w	r3, r7, #10
 800d620:	4619      	mov	r1, r3
 800d622:	6978      	ldr	r0, [r7, #20]
 800d624:	f000 f81b 	bl	800d65e <USBD_GetNextDesc>
 800d628:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d62a:	697b      	ldr	r3, [r7, #20]
 800d62c:	785b      	ldrb	r3, [r3, #1]
 800d62e:	2b05      	cmp	r3, #5
 800d630:	d108      	bne.n	800d644 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800d632:	697b      	ldr	r3, [r7, #20]
 800d634:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800d636:	693b      	ldr	r3, [r7, #16]
 800d638:	789b      	ldrb	r3, [r3, #2]
 800d63a:	78fa      	ldrb	r2, [r7, #3]
 800d63c:	429a      	cmp	r2, r3
 800d63e:	d008      	beq.n	800d652 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800d640:	2300      	movs	r3, #0
 800d642:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	885b      	ldrh	r3, [r3, #2]
 800d648:	b29a      	uxth	r2, r3
 800d64a:	897b      	ldrh	r3, [r7, #10]
 800d64c:	429a      	cmp	r2, r3
 800d64e:	d8e5      	bhi.n	800d61c <USBD_GetEpDesc+0x32>
 800d650:	e000      	b.n	800d654 <USBD_GetEpDesc+0x6a>
          break;
 800d652:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800d654:	693b      	ldr	r3, [r7, #16]
}
 800d656:	4618      	mov	r0, r3
 800d658:	3718      	adds	r7, #24
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd80      	pop	{r7, pc}

0800d65e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d65e:	b480      	push	{r7}
 800d660:	b085      	sub	sp, #20
 800d662:	af00      	add	r7, sp, #0
 800d664:	6078      	str	r0, [r7, #4]
 800d666:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800d66c:	683b      	ldr	r3, [r7, #0]
 800d66e:	881a      	ldrh	r2, [r3, #0]
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	781b      	ldrb	r3, [r3, #0]
 800d674:	b29b      	uxth	r3, r3
 800d676:	4413      	add	r3, r2
 800d678:	b29a      	uxth	r2, r3
 800d67a:	683b      	ldr	r3, [r7, #0]
 800d67c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	781b      	ldrb	r3, [r3, #0]
 800d682:	461a      	mov	r2, r3
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	4413      	add	r3, r2
 800d688:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d68a:	68fb      	ldr	r3, [r7, #12]
}
 800d68c:	4618      	mov	r0, r3
 800d68e:	3714      	adds	r7, #20
 800d690:	46bd      	mov	sp, r7
 800d692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d696:	4770      	bx	lr

0800d698 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d698:	b480      	push	{r7}
 800d69a:	b087      	sub	sp, #28
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d6a4:	697b      	ldr	r3, [r7, #20]
 800d6a6:	781b      	ldrb	r3, [r3, #0]
 800d6a8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d6aa:	697b      	ldr	r3, [r7, #20]
 800d6ac:	3301      	adds	r3, #1
 800d6ae:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d6b0:	697b      	ldr	r3, [r7, #20]
 800d6b2:	781b      	ldrb	r3, [r3, #0]
 800d6b4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d6b6:	8a3b      	ldrh	r3, [r7, #16]
 800d6b8:	021b      	lsls	r3, r3, #8
 800d6ba:	b21a      	sxth	r2, r3
 800d6bc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d6c0:	4313      	orrs	r3, r2
 800d6c2:	b21b      	sxth	r3, r3
 800d6c4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d6c6:	89fb      	ldrh	r3, [r7, #14]
}
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	371c      	adds	r7, #28
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d2:	4770      	bx	lr

0800d6d4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b084      	sub	sp, #16
 800d6d8:	af00      	add	r7, sp, #0
 800d6da:	6078      	str	r0, [r7, #4]
 800d6dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d6de:	2300      	movs	r3, #0
 800d6e0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d6e2:	683b      	ldr	r3, [r7, #0]
 800d6e4:	781b      	ldrb	r3, [r3, #0]
 800d6e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d6ea:	2b40      	cmp	r3, #64	; 0x40
 800d6ec:	d005      	beq.n	800d6fa <USBD_StdDevReq+0x26>
 800d6ee:	2b40      	cmp	r3, #64	; 0x40
 800d6f0:	d857      	bhi.n	800d7a2 <USBD_StdDevReq+0xce>
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d00f      	beq.n	800d716 <USBD_StdDevReq+0x42>
 800d6f6:	2b20      	cmp	r3, #32
 800d6f8:	d153      	bne.n	800d7a2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	32ae      	adds	r2, #174	; 0xae
 800d704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d708:	689b      	ldr	r3, [r3, #8]
 800d70a:	6839      	ldr	r1, [r7, #0]
 800d70c:	6878      	ldr	r0, [r7, #4]
 800d70e:	4798      	blx	r3
 800d710:	4603      	mov	r3, r0
 800d712:	73fb      	strb	r3, [r7, #15]
      break;
 800d714:	e04a      	b.n	800d7ac <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d716:	683b      	ldr	r3, [r7, #0]
 800d718:	785b      	ldrb	r3, [r3, #1]
 800d71a:	2b09      	cmp	r3, #9
 800d71c:	d83b      	bhi.n	800d796 <USBD_StdDevReq+0xc2>
 800d71e:	a201      	add	r2, pc, #4	; (adr r2, 800d724 <USBD_StdDevReq+0x50>)
 800d720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d724:	0800d779 	.word	0x0800d779
 800d728:	0800d78d 	.word	0x0800d78d
 800d72c:	0800d797 	.word	0x0800d797
 800d730:	0800d783 	.word	0x0800d783
 800d734:	0800d797 	.word	0x0800d797
 800d738:	0800d757 	.word	0x0800d757
 800d73c:	0800d74d 	.word	0x0800d74d
 800d740:	0800d797 	.word	0x0800d797
 800d744:	0800d76f 	.word	0x0800d76f
 800d748:	0800d761 	.word	0x0800d761
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d74c:	6839      	ldr	r1, [r7, #0]
 800d74e:	6878      	ldr	r0, [r7, #4]
 800d750:	f000 fa3c 	bl	800dbcc <USBD_GetDescriptor>
          break;
 800d754:	e024      	b.n	800d7a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d756:	6839      	ldr	r1, [r7, #0]
 800d758:	6878      	ldr	r0, [r7, #4]
 800d75a:	f000 fba1 	bl	800dea0 <USBD_SetAddress>
          break;
 800d75e:	e01f      	b.n	800d7a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d760:	6839      	ldr	r1, [r7, #0]
 800d762:	6878      	ldr	r0, [r7, #4]
 800d764:	f000 fbe0 	bl	800df28 <USBD_SetConfig>
 800d768:	4603      	mov	r3, r0
 800d76a:	73fb      	strb	r3, [r7, #15]
          break;
 800d76c:	e018      	b.n	800d7a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d76e:	6839      	ldr	r1, [r7, #0]
 800d770:	6878      	ldr	r0, [r7, #4]
 800d772:	f000 fc83 	bl	800e07c <USBD_GetConfig>
          break;
 800d776:	e013      	b.n	800d7a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d778:	6839      	ldr	r1, [r7, #0]
 800d77a:	6878      	ldr	r0, [r7, #4]
 800d77c:	f000 fcb4 	bl	800e0e8 <USBD_GetStatus>
          break;
 800d780:	e00e      	b.n	800d7a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d782:	6839      	ldr	r1, [r7, #0]
 800d784:	6878      	ldr	r0, [r7, #4]
 800d786:	f000 fce3 	bl	800e150 <USBD_SetFeature>
          break;
 800d78a:	e009      	b.n	800d7a0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d78c:	6839      	ldr	r1, [r7, #0]
 800d78e:	6878      	ldr	r0, [r7, #4]
 800d790:	f000 fd07 	bl	800e1a2 <USBD_ClrFeature>
          break;
 800d794:	e004      	b.n	800d7a0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d796:	6839      	ldr	r1, [r7, #0]
 800d798:	6878      	ldr	r0, [r7, #4]
 800d79a:	f000 fd5e 	bl	800e25a <USBD_CtlError>
          break;
 800d79e:	bf00      	nop
      }
      break;
 800d7a0:	e004      	b.n	800d7ac <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d7a2:	6839      	ldr	r1, [r7, #0]
 800d7a4:	6878      	ldr	r0, [r7, #4]
 800d7a6:	f000 fd58 	bl	800e25a <USBD_CtlError>
      break;
 800d7aa:	bf00      	nop
  }

  return ret;
 800d7ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	3710      	adds	r7, #16
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	bd80      	pop	{r7, pc}
 800d7b6:	bf00      	nop

0800d7b8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b084      	sub	sp, #16
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
 800d7c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d7c6:	683b      	ldr	r3, [r7, #0]
 800d7c8:	781b      	ldrb	r3, [r3, #0]
 800d7ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d7ce:	2b40      	cmp	r3, #64	; 0x40
 800d7d0:	d005      	beq.n	800d7de <USBD_StdItfReq+0x26>
 800d7d2:	2b40      	cmp	r3, #64	; 0x40
 800d7d4:	d852      	bhi.n	800d87c <USBD_StdItfReq+0xc4>
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d001      	beq.n	800d7de <USBD_StdItfReq+0x26>
 800d7da:	2b20      	cmp	r3, #32
 800d7dc:	d14e      	bne.n	800d87c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d7e4:	b2db      	uxtb	r3, r3
 800d7e6:	3b01      	subs	r3, #1
 800d7e8:	2b02      	cmp	r3, #2
 800d7ea:	d840      	bhi.n	800d86e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	889b      	ldrh	r3, [r3, #4]
 800d7f0:	b2db      	uxtb	r3, r3
 800d7f2:	2b01      	cmp	r3, #1
 800d7f4:	d836      	bhi.n	800d864 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d7f6:	683b      	ldr	r3, [r7, #0]
 800d7f8:	889b      	ldrh	r3, [r3, #4]
 800d7fa:	b2db      	uxtb	r3, r3
 800d7fc:	4619      	mov	r1, r3
 800d7fe:	6878      	ldr	r0, [r7, #4]
 800d800:	f7ff fed9 	bl	800d5b6 <USBD_CoreFindIF>
 800d804:	4603      	mov	r3, r0
 800d806:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d808:	7bbb      	ldrb	r3, [r7, #14]
 800d80a:	2bff      	cmp	r3, #255	; 0xff
 800d80c:	d01d      	beq.n	800d84a <USBD_StdItfReq+0x92>
 800d80e:	7bbb      	ldrb	r3, [r7, #14]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d11a      	bne.n	800d84a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d814:	7bba      	ldrb	r2, [r7, #14]
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	32ae      	adds	r2, #174	; 0xae
 800d81a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d81e:	689b      	ldr	r3, [r3, #8]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d00f      	beq.n	800d844 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d824:	7bba      	ldrb	r2, [r7, #14]
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d82c:	7bba      	ldrb	r2, [r7, #14]
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	32ae      	adds	r2, #174	; 0xae
 800d832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d836:	689b      	ldr	r3, [r3, #8]
 800d838:	6839      	ldr	r1, [r7, #0]
 800d83a:	6878      	ldr	r0, [r7, #4]
 800d83c:	4798      	blx	r3
 800d83e:	4603      	mov	r3, r0
 800d840:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d842:	e004      	b.n	800d84e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d844:	2303      	movs	r3, #3
 800d846:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d848:	e001      	b.n	800d84e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d84a:	2303      	movs	r3, #3
 800d84c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	88db      	ldrh	r3, [r3, #6]
 800d852:	2b00      	cmp	r3, #0
 800d854:	d110      	bne.n	800d878 <USBD_StdItfReq+0xc0>
 800d856:	7bfb      	ldrb	r3, [r7, #15]
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d10d      	bne.n	800d878 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d85c:	6878      	ldr	r0, [r7, #4]
 800d85e:	f000 fdc7 	bl	800e3f0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d862:	e009      	b.n	800d878 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d864:	6839      	ldr	r1, [r7, #0]
 800d866:	6878      	ldr	r0, [r7, #4]
 800d868:	f000 fcf7 	bl	800e25a <USBD_CtlError>
          break;
 800d86c:	e004      	b.n	800d878 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d86e:	6839      	ldr	r1, [r7, #0]
 800d870:	6878      	ldr	r0, [r7, #4]
 800d872:	f000 fcf2 	bl	800e25a <USBD_CtlError>
          break;
 800d876:	e000      	b.n	800d87a <USBD_StdItfReq+0xc2>
          break;
 800d878:	bf00      	nop
      }
      break;
 800d87a:	e004      	b.n	800d886 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d87c:	6839      	ldr	r1, [r7, #0]
 800d87e:	6878      	ldr	r0, [r7, #4]
 800d880:	f000 fceb 	bl	800e25a <USBD_CtlError>
      break;
 800d884:	bf00      	nop
  }

  return ret;
 800d886:	7bfb      	ldrb	r3, [r7, #15]
}
 800d888:	4618      	mov	r0, r3
 800d88a:	3710      	adds	r7, #16
 800d88c:	46bd      	mov	sp, r7
 800d88e:	bd80      	pop	{r7, pc}

0800d890 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d890:	b580      	push	{r7, lr}
 800d892:	b084      	sub	sp, #16
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
 800d898:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d89a:	2300      	movs	r3, #0
 800d89c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d89e:	683b      	ldr	r3, [r7, #0]
 800d8a0:	889b      	ldrh	r3, [r3, #4]
 800d8a2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d8a4:	683b      	ldr	r3, [r7, #0]
 800d8a6:	781b      	ldrb	r3, [r3, #0]
 800d8a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d8ac:	2b40      	cmp	r3, #64	; 0x40
 800d8ae:	d007      	beq.n	800d8c0 <USBD_StdEPReq+0x30>
 800d8b0:	2b40      	cmp	r3, #64	; 0x40
 800d8b2:	f200 817f 	bhi.w	800dbb4 <USBD_StdEPReq+0x324>
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d02a      	beq.n	800d910 <USBD_StdEPReq+0x80>
 800d8ba:	2b20      	cmp	r3, #32
 800d8bc:	f040 817a 	bne.w	800dbb4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d8c0:	7bbb      	ldrb	r3, [r7, #14]
 800d8c2:	4619      	mov	r1, r3
 800d8c4:	6878      	ldr	r0, [r7, #4]
 800d8c6:	f7ff fe83 	bl	800d5d0 <USBD_CoreFindEP>
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d8ce:	7b7b      	ldrb	r3, [r7, #13]
 800d8d0:	2bff      	cmp	r3, #255	; 0xff
 800d8d2:	f000 8174 	beq.w	800dbbe <USBD_StdEPReq+0x32e>
 800d8d6:	7b7b      	ldrb	r3, [r7, #13]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	f040 8170 	bne.w	800dbbe <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d8de:	7b7a      	ldrb	r2, [r7, #13]
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d8e6:	7b7a      	ldrb	r2, [r7, #13]
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	32ae      	adds	r2, #174	; 0xae
 800d8ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8f0:	689b      	ldr	r3, [r3, #8]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	f000 8163 	beq.w	800dbbe <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d8f8:	7b7a      	ldrb	r2, [r7, #13]
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	32ae      	adds	r2, #174	; 0xae
 800d8fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d902:	689b      	ldr	r3, [r3, #8]
 800d904:	6839      	ldr	r1, [r7, #0]
 800d906:	6878      	ldr	r0, [r7, #4]
 800d908:	4798      	blx	r3
 800d90a:	4603      	mov	r3, r0
 800d90c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d90e:	e156      	b.n	800dbbe <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d910:	683b      	ldr	r3, [r7, #0]
 800d912:	785b      	ldrb	r3, [r3, #1]
 800d914:	2b03      	cmp	r3, #3
 800d916:	d008      	beq.n	800d92a <USBD_StdEPReq+0x9a>
 800d918:	2b03      	cmp	r3, #3
 800d91a:	f300 8145 	bgt.w	800dba8 <USBD_StdEPReq+0x318>
 800d91e:	2b00      	cmp	r3, #0
 800d920:	f000 809b 	beq.w	800da5a <USBD_StdEPReq+0x1ca>
 800d924:	2b01      	cmp	r3, #1
 800d926:	d03c      	beq.n	800d9a2 <USBD_StdEPReq+0x112>
 800d928:	e13e      	b.n	800dba8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d930:	b2db      	uxtb	r3, r3
 800d932:	2b02      	cmp	r3, #2
 800d934:	d002      	beq.n	800d93c <USBD_StdEPReq+0xac>
 800d936:	2b03      	cmp	r3, #3
 800d938:	d016      	beq.n	800d968 <USBD_StdEPReq+0xd8>
 800d93a:	e02c      	b.n	800d996 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d93c:	7bbb      	ldrb	r3, [r7, #14]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d00d      	beq.n	800d95e <USBD_StdEPReq+0xce>
 800d942:	7bbb      	ldrb	r3, [r7, #14]
 800d944:	2b80      	cmp	r3, #128	; 0x80
 800d946:	d00a      	beq.n	800d95e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d948:	7bbb      	ldrb	r3, [r7, #14]
 800d94a:	4619      	mov	r1, r3
 800d94c:	6878      	ldr	r0, [r7, #4]
 800d94e:	f001 f99b 	bl	800ec88 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d952:	2180      	movs	r1, #128	; 0x80
 800d954:	6878      	ldr	r0, [r7, #4]
 800d956:	f001 f997 	bl	800ec88 <USBD_LL_StallEP>
 800d95a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d95c:	e020      	b.n	800d9a0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d95e:	6839      	ldr	r1, [r7, #0]
 800d960:	6878      	ldr	r0, [r7, #4]
 800d962:	f000 fc7a 	bl	800e25a <USBD_CtlError>
              break;
 800d966:	e01b      	b.n	800d9a0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	885b      	ldrh	r3, [r3, #2]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d10e      	bne.n	800d98e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d970:	7bbb      	ldrb	r3, [r7, #14]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d00b      	beq.n	800d98e <USBD_StdEPReq+0xfe>
 800d976:	7bbb      	ldrb	r3, [r7, #14]
 800d978:	2b80      	cmp	r3, #128	; 0x80
 800d97a:	d008      	beq.n	800d98e <USBD_StdEPReq+0xfe>
 800d97c:	683b      	ldr	r3, [r7, #0]
 800d97e:	88db      	ldrh	r3, [r3, #6]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d104      	bne.n	800d98e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d984:	7bbb      	ldrb	r3, [r7, #14]
 800d986:	4619      	mov	r1, r3
 800d988:	6878      	ldr	r0, [r7, #4]
 800d98a:	f001 f97d 	bl	800ec88 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d98e:	6878      	ldr	r0, [r7, #4]
 800d990:	f000 fd2e 	bl	800e3f0 <USBD_CtlSendStatus>

              break;
 800d994:	e004      	b.n	800d9a0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d996:	6839      	ldr	r1, [r7, #0]
 800d998:	6878      	ldr	r0, [r7, #4]
 800d99a:	f000 fc5e 	bl	800e25a <USBD_CtlError>
              break;
 800d99e:	bf00      	nop
          }
          break;
 800d9a0:	e107      	b.n	800dbb2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d9a8:	b2db      	uxtb	r3, r3
 800d9aa:	2b02      	cmp	r3, #2
 800d9ac:	d002      	beq.n	800d9b4 <USBD_StdEPReq+0x124>
 800d9ae:	2b03      	cmp	r3, #3
 800d9b0:	d016      	beq.n	800d9e0 <USBD_StdEPReq+0x150>
 800d9b2:	e04b      	b.n	800da4c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d9b4:	7bbb      	ldrb	r3, [r7, #14]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d00d      	beq.n	800d9d6 <USBD_StdEPReq+0x146>
 800d9ba:	7bbb      	ldrb	r3, [r7, #14]
 800d9bc:	2b80      	cmp	r3, #128	; 0x80
 800d9be:	d00a      	beq.n	800d9d6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d9c0:	7bbb      	ldrb	r3, [r7, #14]
 800d9c2:	4619      	mov	r1, r3
 800d9c4:	6878      	ldr	r0, [r7, #4]
 800d9c6:	f001 f95f 	bl	800ec88 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d9ca:	2180      	movs	r1, #128	; 0x80
 800d9cc:	6878      	ldr	r0, [r7, #4]
 800d9ce:	f001 f95b 	bl	800ec88 <USBD_LL_StallEP>
 800d9d2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d9d4:	e040      	b.n	800da58 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d9d6:	6839      	ldr	r1, [r7, #0]
 800d9d8:	6878      	ldr	r0, [r7, #4]
 800d9da:	f000 fc3e 	bl	800e25a <USBD_CtlError>
              break;
 800d9de:	e03b      	b.n	800da58 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d9e0:	683b      	ldr	r3, [r7, #0]
 800d9e2:	885b      	ldrh	r3, [r3, #2]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d136      	bne.n	800da56 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d9e8:	7bbb      	ldrb	r3, [r7, #14]
 800d9ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d004      	beq.n	800d9fc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d9f2:	7bbb      	ldrb	r3, [r7, #14]
 800d9f4:	4619      	mov	r1, r3
 800d9f6:	6878      	ldr	r0, [r7, #4]
 800d9f8:	f001 f965 	bl	800ecc6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d9fc:	6878      	ldr	r0, [r7, #4]
 800d9fe:	f000 fcf7 	bl	800e3f0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800da02:	7bbb      	ldrb	r3, [r7, #14]
 800da04:	4619      	mov	r1, r3
 800da06:	6878      	ldr	r0, [r7, #4]
 800da08:	f7ff fde2 	bl	800d5d0 <USBD_CoreFindEP>
 800da0c:	4603      	mov	r3, r0
 800da0e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800da10:	7b7b      	ldrb	r3, [r7, #13]
 800da12:	2bff      	cmp	r3, #255	; 0xff
 800da14:	d01f      	beq.n	800da56 <USBD_StdEPReq+0x1c6>
 800da16:	7b7b      	ldrb	r3, [r7, #13]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d11c      	bne.n	800da56 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800da1c:	7b7a      	ldrb	r2, [r7, #13]
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800da24:	7b7a      	ldrb	r2, [r7, #13]
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	32ae      	adds	r2, #174	; 0xae
 800da2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da2e:	689b      	ldr	r3, [r3, #8]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d010      	beq.n	800da56 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800da34:	7b7a      	ldrb	r2, [r7, #13]
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	32ae      	adds	r2, #174	; 0xae
 800da3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da3e:	689b      	ldr	r3, [r3, #8]
 800da40:	6839      	ldr	r1, [r7, #0]
 800da42:	6878      	ldr	r0, [r7, #4]
 800da44:	4798      	blx	r3
 800da46:	4603      	mov	r3, r0
 800da48:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800da4a:	e004      	b.n	800da56 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800da4c:	6839      	ldr	r1, [r7, #0]
 800da4e:	6878      	ldr	r0, [r7, #4]
 800da50:	f000 fc03 	bl	800e25a <USBD_CtlError>
              break;
 800da54:	e000      	b.n	800da58 <USBD_StdEPReq+0x1c8>
              break;
 800da56:	bf00      	nop
          }
          break;
 800da58:	e0ab      	b.n	800dbb2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da60:	b2db      	uxtb	r3, r3
 800da62:	2b02      	cmp	r3, #2
 800da64:	d002      	beq.n	800da6c <USBD_StdEPReq+0x1dc>
 800da66:	2b03      	cmp	r3, #3
 800da68:	d032      	beq.n	800dad0 <USBD_StdEPReq+0x240>
 800da6a:	e097      	b.n	800db9c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800da6c:	7bbb      	ldrb	r3, [r7, #14]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d007      	beq.n	800da82 <USBD_StdEPReq+0x1f2>
 800da72:	7bbb      	ldrb	r3, [r7, #14]
 800da74:	2b80      	cmp	r3, #128	; 0x80
 800da76:	d004      	beq.n	800da82 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800da78:	6839      	ldr	r1, [r7, #0]
 800da7a:	6878      	ldr	r0, [r7, #4]
 800da7c:	f000 fbed 	bl	800e25a <USBD_CtlError>
                break;
 800da80:	e091      	b.n	800dba6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800da82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800da86:	2b00      	cmp	r3, #0
 800da88:	da0b      	bge.n	800daa2 <USBD_StdEPReq+0x212>
 800da8a:	7bbb      	ldrb	r3, [r7, #14]
 800da8c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800da90:	4613      	mov	r3, r2
 800da92:	009b      	lsls	r3, r3, #2
 800da94:	4413      	add	r3, r2
 800da96:	009b      	lsls	r3, r3, #2
 800da98:	3310      	adds	r3, #16
 800da9a:	687a      	ldr	r2, [r7, #4]
 800da9c:	4413      	add	r3, r2
 800da9e:	3304      	adds	r3, #4
 800daa0:	e00b      	b.n	800daba <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800daa2:	7bbb      	ldrb	r3, [r7, #14]
 800daa4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800daa8:	4613      	mov	r3, r2
 800daaa:	009b      	lsls	r3, r3, #2
 800daac:	4413      	add	r3, r2
 800daae:	009b      	lsls	r3, r3, #2
 800dab0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800dab4:	687a      	ldr	r2, [r7, #4]
 800dab6:	4413      	add	r3, r2
 800dab8:	3304      	adds	r3, #4
 800daba:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800dabc:	68bb      	ldr	r3, [r7, #8]
 800dabe:	2200      	movs	r2, #0
 800dac0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800dac2:	68bb      	ldr	r3, [r7, #8]
 800dac4:	2202      	movs	r2, #2
 800dac6:	4619      	mov	r1, r3
 800dac8:	6878      	ldr	r0, [r7, #4]
 800daca:	f000 fc37 	bl	800e33c <USBD_CtlSendData>
              break;
 800dace:	e06a      	b.n	800dba6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800dad0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	da11      	bge.n	800dafc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800dad8:	7bbb      	ldrb	r3, [r7, #14]
 800dada:	f003 020f 	and.w	r2, r3, #15
 800dade:	6879      	ldr	r1, [r7, #4]
 800dae0:	4613      	mov	r3, r2
 800dae2:	009b      	lsls	r3, r3, #2
 800dae4:	4413      	add	r3, r2
 800dae6:	009b      	lsls	r3, r3, #2
 800dae8:	440b      	add	r3, r1
 800daea:	3324      	adds	r3, #36	; 0x24
 800daec:	881b      	ldrh	r3, [r3, #0]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d117      	bne.n	800db22 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800daf2:	6839      	ldr	r1, [r7, #0]
 800daf4:	6878      	ldr	r0, [r7, #4]
 800daf6:	f000 fbb0 	bl	800e25a <USBD_CtlError>
                  break;
 800dafa:	e054      	b.n	800dba6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800dafc:	7bbb      	ldrb	r3, [r7, #14]
 800dafe:	f003 020f 	and.w	r2, r3, #15
 800db02:	6879      	ldr	r1, [r7, #4]
 800db04:	4613      	mov	r3, r2
 800db06:	009b      	lsls	r3, r3, #2
 800db08:	4413      	add	r3, r2
 800db0a:	009b      	lsls	r3, r3, #2
 800db0c:	440b      	add	r3, r1
 800db0e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800db12:	881b      	ldrh	r3, [r3, #0]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d104      	bne.n	800db22 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800db18:	6839      	ldr	r1, [r7, #0]
 800db1a:	6878      	ldr	r0, [r7, #4]
 800db1c:	f000 fb9d 	bl	800e25a <USBD_CtlError>
                  break;
 800db20:	e041      	b.n	800dba6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800db22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800db26:	2b00      	cmp	r3, #0
 800db28:	da0b      	bge.n	800db42 <USBD_StdEPReq+0x2b2>
 800db2a:	7bbb      	ldrb	r3, [r7, #14]
 800db2c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800db30:	4613      	mov	r3, r2
 800db32:	009b      	lsls	r3, r3, #2
 800db34:	4413      	add	r3, r2
 800db36:	009b      	lsls	r3, r3, #2
 800db38:	3310      	adds	r3, #16
 800db3a:	687a      	ldr	r2, [r7, #4]
 800db3c:	4413      	add	r3, r2
 800db3e:	3304      	adds	r3, #4
 800db40:	e00b      	b.n	800db5a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800db42:	7bbb      	ldrb	r3, [r7, #14]
 800db44:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800db48:	4613      	mov	r3, r2
 800db4a:	009b      	lsls	r3, r3, #2
 800db4c:	4413      	add	r3, r2
 800db4e:	009b      	lsls	r3, r3, #2
 800db50:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800db54:	687a      	ldr	r2, [r7, #4]
 800db56:	4413      	add	r3, r2
 800db58:	3304      	adds	r3, #4
 800db5a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800db5c:	7bbb      	ldrb	r3, [r7, #14]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d002      	beq.n	800db68 <USBD_StdEPReq+0x2d8>
 800db62:	7bbb      	ldrb	r3, [r7, #14]
 800db64:	2b80      	cmp	r3, #128	; 0x80
 800db66:	d103      	bne.n	800db70 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800db68:	68bb      	ldr	r3, [r7, #8]
 800db6a:	2200      	movs	r2, #0
 800db6c:	601a      	str	r2, [r3, #0]
 800db6e:	e00e      	b.n	800db8e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800db70:	7bbb      	ldrb	r3, [r7, #14]
 800db72:	4619      	mov	r1, r3
 800db74:	6878      	ldr	r0, [r7, #4]
 800db76:	f001 f8c5 	bl	800ed04 <USBD_LL_IsStallEP>
 800db7a:	4603      	mov	r3, r0
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d003      	beq.n	800db88 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800db80:	68bb      	ldr	r3, [r7, #8]
 800db82:	2201      	movs	r2, #1
 800db84:	601a      	str	r2, [r3, #0]
 800db86:	e002      	b.n	800db8e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800db88:	68bb      	ldr	r3, [r7, #8]
 800db8a:	2200      	movs	r2, #0
 800db8c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800db8e:	68bb      	ldr	r3, [r7, #8]
 800db90:	2202      	movs	r2, #2
 800db92:	4619      	mov	r1, r3
 800db94:	6878      	ldr	r0, [r7, #4]
 800db96:	f000 fbd1 	bl	800e33c <USBD_CtlSendData>
              break;
 800db9a:	e004      	b.n	800dba6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800db9c:	6839      	ldr	r1, [r7, #0]
 800db9e:	6878      	ldr	r0, [r7, #4]
 800dba0:	f000 fb5b 	bl	800e25a <USBD_CtlError>
              break;
 800dba4:	bf00      	nop
          }
          break;
 800dba6:	e004      	b.n	800dbb2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800dba8:	6839      	ldr	r1, [r7, #0]
 800dbaa:	6878      	ldr	r0, [r7, #4]
 800dbac:	f000 fb55 	bl	800e25a <USBD_CtlError>
          break;
 800dbb0:	bf00      	nop
      }
      break;
 800dbb2:	e005      	b.n	800dbc0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800dbb4:	6839      	ldr	r1, [r7, #0]
 800dbb6:	6878      	ldr	r0, [r7, #4]
 800dbb8:	f000 fb4f 	bl	800e25a <USBD_CtlError>
      break;
 800dbbc:	e000      	b.n	800dbc0 <USBD_StdEPReq+0x330>
      break;
 800dbbe:	bf00      	nop
  }

  return ret;
 800dbc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	3710      	adds	r7, #16
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	bd80      	pop	{r7, pc}
	...

0800dbcc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b084      	sub	sp, #16
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
 800dbd4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800dbda:	2300      	movs	r3, #0
 800dbdc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800dbde:	2300      	movs	r3, #0
 800dbe0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800dbe2:	683b      	ldr	r3, [r7, #0]
 800dbe4:	885b      	ldrh	r3, [r3, #2]
 800dbe6:	0a1b      	lsrs	r3, r3, #8
 800dbe8:	b29b      	uxth	r3, r3
 800dbea:	3b01      	subs	r3, #1
 800dbec:	2b06      	cmp	r3, #6
 800dbee:	f200 8128 	bhi.w	800de42 <USBD_GetDescriptor+0x276>
 800dbf2:	a201      	add	r2, pc, #4	; (adr r2, 800dbf8 <USBD_GetDescriptor+0x2c>)
 800dbf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbf8:	0800dc15 	.word	0x0800dc15
 800dbfc:	0800dc2d 	.word	0x0800dc2d
 800dc00:	0800dc6d 	.word	0x0800dc6d
 800dc04:	0800de43 	.word	0x0800de43
 800dc08:	0800de43 	.word	0x0800de43
 800dc0c:	0800dde3 	.word	0x0800dde3
 800dc10:	0800de0f 	.word	0x0800de0f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	687a      	ldr	r2, [r7, #4]
 800dc1e:	7c12      	ldrb	r2, [r2, #16]
 800dc20:	f107 0108 	add.w	r1, r7, #8
 800dc24:	4610      	mov	r0, r2
 800dc26:	4798      	blx	r3
 800dc28:	60f8      	str	r0, [r7, #12]
      break;
 800dc2a:	e112      	b.n	800de52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	7c1b      	ldrb	r3, [r3, #16]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d10d      	bne.n	800dc50 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc3c:	f107 0208 	add.w	r2, r7, #8
 800dc40:	4610      	mov	r0, r2
 800dc42:	4798      	blx	r3
 800dc44:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	3301      	adds	r3, #1
 800dc4a:	2202      	movs	r2, #2
 800dc4c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800dc4e:	e100      	b.n	800de52 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc58:	f107 0208 	add.w	r2, r7, #8
 800dc5c:	4610      	mov	r0, r2
 800dc5e:	4798      	blx	r3
 800dc60:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	3301      	adds	r3, #1
 800dc66:	2202      	movs	r2, #2
 800dc68:	701a      	strb	r2, [r3, #0]
      break;
 800dc6a:	e0f2      	b.n	800de52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800dc6c:	683b      	ldr	r3, [r7, #0]
 800dc6e:	885b      	ldrh	r3, [r3, #2]
 800dc70:	b2db      	uxtb	r3, r3
 800dc72:	2b05      	cmp	r3, #5
 800dc74:	f200 80ac 	bhi.w	800ddd0 <USBD_GetDescriptor+0x204>
 800dc78:	a201      	add	r2, pc, #4	; (adr r2, 800dc80 <USBD_GetDescriptor+0xb4>)
 800dc7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc7e:	bf00      	nop
 800dc80:	0800dc99 	.word	0x0800dc99
 800dc84:	0800dccd 	.word	0x0800dccd
 800dc88:	0800dd01 	.word	0x0800dd01
 800dc8c:	0800dd35 	.word	0x0800dd35
 800dc90:	0800dd69 	.word	0x0800dd69
 800dc94:	0800dd9d 	.word	0x0800dd9d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc9e:	685b      	ldr	r3, [r3, #4]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d00b      	beq.n	800dcbc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dcaa:	685b      	ldr	r3, [r3, #4]
 800dcac:	687a      	ldr	r2, [r7, #4]
 800dcae:	7c12      	ldrb	r2, [r2, #16]
 800dcb0:	f107 0108 	add.w	r1, r7, #8
 800dcb4:	4610      	mov	r0, r2
 800dcb6:	4798      	blx	r3
 800dcb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dcba:	e091      	b.n	800dde0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dcbc:	6839      	ldr	r1, [r7, #0]
 800dcbe:	6878      	ldr	r0, [r7, #4]
 800dcc0:	f000 facb 	bl	800e25a <USBD_CtlError>
            err++;
 800dcc4:	7afb      	ldrb	r3, [r7, #11]
 800dcc6:	3301      	adds	r3, #1
 800dcc8:	72fb      	strb	r3, [r7, #11]
          break;
 800dcca:	e089      	b.n	800dde0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dcd2:	689b      	ldr	r3, [r3, #8]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d00b      	beq.n	800dcf0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dcde:	689b      	ldr	r3, [r3, #8]
 800dce0:	687a      	ldr	r2, [r7, #4]
 800dce2:	7c12      	ldrb	r2, [r2, #16]
 800dce4:	f107 0108 	add.w	r1, r7, #8
 800dce8:	4610      	mov	r0, r2
 800dcea:	4798      	blx	r3
 800dcec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dcee:	e077      	b.n	800dde0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dcf0:	6839      	ldr	r1, [r7, #0]
 800dcf2:	6878      	ldr	r0, [r7, #4]
 800dcf4:	f000 fab1 	bl	800e25a <USBD_CtlError>
            err++;
 800dcf8:	7afb      	ldrb	r3, [r7, #11]
 800dcfa:	3301      	adds	r3, #1
 800dcfc:	72fb      	strb	r3, [r7, #11]
          break;
 800dcfe:	e06f      	b.n	800dde0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd06:	68db      	ldr	r3, [r3, #12]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d00b      	beq.n	800dd24 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd12:	68db      	ldr	r3, [r3, #12]
 800dd14:	687a      	ldr	r2, [r7, #4]
 800dd16:	7c12      	ldrb	r2, [r2, #16]
 800dd18:	f107 0108 	add.w	r1, r7, #8
 800dd1c:	4610      	mov	r0, r2
 800dd1e:	4798      	blx	r3
 800dd20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dd22:	e05d      	b.n	800dde0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dd24:	6839      	ldr	r1, [r7, #0]
 800dd26:	6878      	ldr	r0, [r7, #4]
 800dd28:	f000 fa97 	bl	800e25a <USBD_CtlError>
            err++;
 800dd2c:	7afb      	ldrb	r3, [r7, #11]
 800dd2e:	3301      	adds	r3, #1
 800dd30:	72fb      	strb	r3, [r7, #11]
          break;
 800dd32:	e055      	b.n	800dde0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd3a:	691b      	ldr	r3, [r3, #16]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d00b      	beq.n	800dd58 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd46:	691b      	ldr	r3, [r3, #16]
 800dd48:	687a      	ldr	r2, [r7, #4]
 800dd4a:	7c12      	ldrb	r2, [r2, #16]
 800dd4c:	f107 0108 	add.w	r1, r7, #8
 800dd50:	4610      	mov	r0, r2
 800dd52:	4798      	blx	r3
 800dd54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dd56:	e043      	b.n	800dde0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dd58:	6839      	ldr	r1, [r7, #0]
 800dd5a:	6878      	ldr	r0, [r7, #4]
 800dd5c:	f000 fa7d 	bl	800e25a <USBD_CtlError>
            err++;
 800dd60:	7afb      	ldrb	r3, [r7, #11]
 800dd62:	3301      	adds	r3, #1
 800dd64:	72fb      	strb	r3, [r7, #11]
          break;
 800dd66:	e03b      	b.n	800dde0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd6e:	695b      	ldr	r3, [r3, #20]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d00b      	beq.n	800dd8c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd7a:	695b      	ldr	r3, [r3, #20]
 800dd7c:	687a      	ldr	r2, [r7, #4]
 800dd7e:	7c12      	ldrb	r2, [r2, #16]
 800dd80:	f107 0108 	add.w	r1, r7, #8
 800dd84:	4610      	mov	r0, r2
 800dd86:	4798      	blx	r3
 800dd88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dd8a:	e029      	b.n	800dde0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dd8c:	6839      	ldr	r1, [r7, #0]
 800dd8e:	6878      	ldr	r0, [r7, #4]
 800dd90:	f000 fa63 	bl	800e25a <USBD_CtlError>
            err++;
 800dd94:	7afb      	ldrb	r3, [r7, #11]
 800dd96:	3301      	adds	r3, #1
 800dd98:	72fb      	strb	r3, [r7, #11]
          break;
 800dd9a:	e021      	b.n	800dde0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dda2:	699b      	ldr	r3, [r3, #24]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d00b      	beq.n	800ddc0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ddae:	699b      	ldr	r3, [r3, #24]
 800ddb0:	687a      	ldr	r2, [r7, #4]
 800ddb2:	7c12      	ldrb	r2, [r2, #16]
 800ddb4:	f107 0108 	add.w	r1, r7, #8
 800ddb8:	4610      	mov	r0, r2
 800ddba:	4798      	blx	r3
 800ddbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ddbe:	e00f      	b.n	800dde0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ddc0:	6839      	ldr	r1, [r7, #0]
 800ddc2:	6878      	ldr	r0, [r7, #4]
 800ddc4:	f000 fa49 	bl	800e25a <USBD_CtlError>
            err++;
 800ddc8:	7afb      	ldrb	r3, [r7, #11]
 800ddca:	3301      	adds	r3, #1
 800ddcc:	72fb      	strb	r3, [r7, #11]
          break;
 800ddce:	e007      	b.n	800dde0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ddd0:	6839      	ldr	r1, [r7, #0]
 800ddd2:	6878      	ldr	r0, [r7, #4]
 800ddd4:	f000 fa41 	bl	800e25a <USBD_CtlError>
          err++;
 800ddd8:	7afb      	ldrb	r3, [r7, #11]
 800ddda:	3301      	adds	r3, #1
 800dddc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ddde:	bf00      	nop
      }
      break;
 800dde0:	e037      	b.n	800de52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	7c1b      	ldrb	r3, [r3, #16]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d109      	bne.n	800ddfe <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ddf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddf2:	f107 0208 	add.w	r2, r7, #8
 800ddf6:	4610      	mov	r0, r2
 800ddf8:	4798      	blx	r3
 800ddfa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ddfc:	e029      	b.n	800de52 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ddfe:	6839      	ldr	r1, [r7, #0]
 800de00:	6878      	ldr	r0, [r7, #4]
 800de02:	f000 fa2a 	bl	800e25a <USBD_CtlError>
        err++;
 800de06:	7afb      	ldrb	r3, [r7, #11]
 800de08:	3301      	adds	r3, #1
 800de0a:	72fb      	strb	r3, [r7, #11]
      break;
 800de0c:	e021      	b.n	800de52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	7c1b      	ldrb	r3, [r3, #16]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d10d      	bne.n	800de32 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de1e:	f107 0208 	add.w	r2, r7, #8
 800de22:	4610      	mov	r0, r2
 800de24:	4798      	blx	r3
 800de26:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	3301      	adds	r3, #1
 800de2c:	2207      	movs	r2, #7
 800de2e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800de30:	e00f      	b.n	800de52 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800de32:	6839      	ldr	r1, [r7, #0]
 800de34:	6878      	ldr	r0, [r7, #4]
 800de36:	f000 fa10 	bl	800e25a <USBD_CtlError>
        err++;
 800de3a:	7afb      	ldrb	r3, [r7, #11]
 800de3c:	3301      	adds	r3, #1
 800de3e:	72fb      	strb	r3, [r7, #11]
      break;
 800de40:	e007      	b.n	800de52 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800de42:	6839      	ldr	r1, [r7, #0]
 800de44:	6878      	ldr	r0, [r7, #4]
 800de46:	f000 fa08 	bl	800e25a <USBD_CtlError>
      err++;
 800de4a:	7afb      	ldrb	r3, [r7, #11]
 800de4c:	3301      	adds	r3, #1
 800de4e:	72fb      	strb	r3, [r7, #11]
      break;
 800de50:	bf00      	nop
  }

  if (err != 0U)
 800de52:	7afb      	ldrb	r3, [r7, #11]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d11e      	bne.n	800de96 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800de58:	683b      	ldr	r3, [r7, #0]
 800de5a:	88db      	ldrh	r3, [r3, #6]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d016      	beq.n	800de8e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800de60:	893b      	ldrh	r3, [r7, #8]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d00e      	beq.n	800de84 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800de66:	683b      	ldr	r3, [r7, #0]
 800de68:	88da      	ldrh	r2, [r3, #6]
 800de6a:	893b      	ldrh	r3, [r7, #8]
 800de6c:	4293      	cmp	r3, r2
 800de6e:	bf28      	it	cs
 800de70:	4613      	movcs	r3, r2
 800de72:	b29b      	uxth	r3, r3
 800de74:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800de76:	893b      	ldrh	r3, [r7, #8]
 800de78:	461a      	mov	r2, r3
 800de7a:	68f9      	ldr	r1, [r7, #12]
 800de7c:	6878      	ldr	r0, [r7, #4]
 800de7e:	f000 fa5d 	bl	800e33c <USBD_CtlSendData>
 800de82:	e009      	b.n	800de98 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800de84:	6839      	ldr	r1, [r7, #0]
 800de86:	6878      	ldr	r0, [r7, #4]
 800de88:	f000 f9e7 	bl	800e25a <USBD_CtlError>
 800de8c:	e004      	b.n	800de98 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800de8e:	6878      	ldr	r0, [r7, #4]
 800de90:	f000 faae 	bl	800e3f0 <USBD_CtlSendStatus>
 800de94:	e000      	b.n	800de98 <USBD_GetDescriptor+0x2cc>
    return;
 800de96:	bf00      	nop
  }
}
 800de98:	3710      	adds	r7, #16
 800de9a:	46bd      	mov	sp, r7
 800de9c:	bd80      	pop	{r7, pc}
 800de9e:	bf00      	nop

0800dea0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b084      	sub	sp, #16
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
 800dea8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800deaa:	683b      	ldr	r3, [r7, #0]
 800deac:	889b      	ldrh	r3, [r3, #4]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d131      	bne.n	800df16 <USBD_SetAddress+0x76>
 800deb2:	683b      	ldr	r3, [r7, #0]
 800deb4:	88db      	ldrh	r3, [r3, #6]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d12d      	bne.n	800df16 <USBD_SetAddress+0x76>
 800deba:	683b      	ldr	r3, [r7, #0]
 800debc:	885b      	ldrh	r3, [r3, #2]
 800debe:	2b7f      	cmp	r3, #127	; 0x7f
 800dec0:	d829      	bhi.n	800df16 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800dec2:	683b      	ldr	r3, [r7, #0]
 800dec4:	885b      	ldrh	r3, [r3, #2]
 800dec6:	b2db      	uxtb	r3, r3
 800dec8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800decc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ded4:	b2db      	uxtb	r3, r3
 800ded6:	2b03      	cmp	r3, #3
 800ded8:	d104      	bne.n	800dee4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800deda:	6839      	ldr	r1, [r7, #0]
 800dedc:	6878      	ldr	r0, [r7, #4]
 800dede:	f000 f9bc 	bl	800e25a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dee2:	e01d      	b.n	800df20 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	7bfa      	ldrb	r2, [r7, #15]
 800dee8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800deec:	7bfb      	ldrb	r3, [r7, #15]
 800deee:	4619      	mov	r1, r3
 800def0:	6878      	ldr	r0, [r7, #4]
 800def2:	f000 ff33 	bl	800ed5c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800def6:	6878      	ldr	r0, [r7, #4]
 800def8:	f000 fa7a 	bl	800e3f0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800defc:	7bfb      	ldrb	r3, [r7, #15]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d004      	beq.n	800df0c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	2202      	movs	r2, #2
 800df06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df0a:	e009      	b.n	800df20 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	2201      	movs	r2, #1
 800df10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df14:	e004      	b.n	800df20 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800df16:	6839      	ldr	r1, [r7, #0]
 800df18:	6878      	ldr	r0, [r7, #4]
 800df1a:	f000 f99e 	bl	800e25a <USBD_CtlError>
  }
}
 800df1e:	bf00      	nop
 800df20:	bf00      	nop
 800df22:	3710      	adds	r7, #16
 800df24:	46bd      	mov	sp, r7
 800df26:	bd80      	pop	{r7, pc}

0800df28 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b084      	sub	sp, #16
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
 800df30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800df32:	2300      	movs	r3, #0
 800df34:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800df36:	683b      	ldr	r3, [r7, #0]
 800df38:	885b      	ldrh	r3, [r3, #2]
 800df3a:	b2da      	uxtb	r2, r3
 800df3c:	4b4e      	ldr	r3, [pc, #312]	; (800e078 <USBD_SetConfig+0x150>)
 800df3e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800df40:	4b4d      	ldr	r3, [pc, #308]	; (800e078 <USBD_SetConfig+0x150>)
 800df42:	781b      	ldrb	r3, [r3, #0]
 800df44:	2b01      	cmp	r3, #1
 800df46:	d905      	bls.n	800df54 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800df48:	6839      	ldr	r1, [r7, #0]
 800df4a:	6878      	ldr	r0, [r7, #4]
 800df4c:	f000 f985 	bl	800e25a <USBD_CtlError>
    return USBD_FAIL;
 800df50:	2303      	movs	r3, #3
 800df52:	e08c      	b.n	800e06e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df5a:	b2db      	uxtb	r3, r3
 800df5c:	2b02      	cmp	r3, #2
 800df5e:	d002      	beq.n	800df66 <USBD_SetConfig+0x3e>
 800df60:	2b03      	cmp	r3, #3
 800df62:	d029      	beq.n	800dfb8 <USBD_SetConfig+0x90>
 800df64:	e075      	b.n	800e052 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800df66:	4b44      	ldr	r3, [pc, #272]	; (800e078 <USBD_SetConfig+0x150>)
 800df68:	781b      	ldrb	r3, [r3, #0]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d020      	beq.n	800dfb0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800df6e:	4b42      	ldr	r3, [pc, #264]	; (800e078 <USBD_SetConfig+0x150>)
 800df70:	781b      	ldrb	r3, [r3, #0]
 800df72:	461a      	mov	r2, r3
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800df78:	4b3f      	ldr	r3, [pc, #252]	; (800e078 <USBD_SetConfig+0x150>)
 800df7a:	781b      	ldrb	r3, [r3, #0]
 800df7c:	4619      	mov	r1, r3
 800df7e:	6878      	ldr	r0, [r7, #4]
 800df80:	f7fe ffe7 	bl	800cf52 <USBD_SetClassConfig>
 800df84:	4603      	mov	r3, r0
 800df86:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800df88:	7bfb      	ldrb	r3, [r7, #15]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d008      	beq.n	800dfa0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800df8e:	6839      	ldr	r1, [r7, #0]
 800df90:	6878      	ldr	r0, [r7, #4]
 800df92:	f000 f962 	bl	800e25a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	2202      	movs	r2, #2
 800df9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800df9e:	e065      	b.n	800e06c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800dfa0:	6878      	ldr	r0, [r7, #4]
 800dfa2:	f000 fa25 	bl	800e3f0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	2203      	movs	r2, #3
 800dfaa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800dfae:	e05d      	b.n	800e06c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800dfb0:	6878      	ldr	r0, [r7, #4]
 800dfb2:	f000 fa1d 	bl	800e3f0 <USBD_CtlSendStatus>
      break;
 800dfb6:	e059      	b.n	800e06c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800dfb8:	4b2f      	ldr	r3, [pc, #188]	; (800e078 <USBD_SetConfig+0x150>)
 800dfba:	781b      	ldrb	r3, [r3, #0]
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d112      	bne.n	800dfe6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	2202      	movs	r2, #2
 800dfc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800dfc8:	4b2b      	ldr	r3, [pc, #172]	; (800e078 <USBD_SetConfig+0x150>)
 800dfca:	781b      	ldrb	r3, [r3, #0]
 800dfcc:	461a      	mov	r2, r3
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800dfd2:	4b29      	ldr	r3, [pc, #164]	; (800e078 <USBD_SetConfig+0x150>)
 800dfd4:	781b      	ldrb	r3, [r3, #0]
 800dfd6:	4619      	mov	r1, r3
 800dfd8:	6878      	ldr	r0, [r7, #4]
 800dfda:	f7fe ffd6 	bl	800cf8a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800dfde:	6878      	ldr	r0, [r7, #4]
 800dfe0:	f000 fa06 	bl	800e3f0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800dfe4:	e042      	b.n	800e06c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800dfe6:	4b24      	ldr	r3, [pc, #144]	; (800e078 <USBD_SetConfig+0x150>)
 800dfe8:	781b      	ldrb	r3, [r3, #0]
 800dfea:	461a      	mov	r2, r3
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	685b      	ldr	r3, [r3, #4]
 800dff0:	429a      	cmp	r2, r3
 800dff2:	d02a      	beq.n	800e04a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	685b      	ldr	r3, [r3, #4]
 800dff8:	b2db      	uxtb	r3, r3
 800dffa:	4619      	mov	r1, r3
 800dffc:	6878      	ldr	r0, [r7, #4]
 800dffe:	f7fe ffc4 	bl	800cf8a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e002:	4b1d      	ldr	r3, [pc, #116]	; (800e078 <USBD_SetConfig+0x150>)
 800e004:	781b      	ldrb	r3, [r3, #0]
 800e006:	461a      	mov	r2, r3
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e00c:	4b1a      	ldr	r3, [pc, #104]	; (800e078 <USBD_SetConfig+0x150>)
 800e00e:	781b      	ldrb	r3, [r3, #0]
 800e010:	4619      	mov	r1, r3
 800e012:	6878      	ldr	r0, [r7, #4]
 800e014:	f7fe ff9d 	bl	800cf52 <USBD_SetClassConfig>
 800e018:	4603      	mov	r3, r0
 800e01a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e01c:	7bfb      	ldrb	r3, [r7, #15]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d00f      	beq.n	800e042 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e022:	6839      	ldr	r1, [r7, #0]
 800e024:	6878      	ldr	r0, [r7, #4]
 800e026:	f000 f918 	bl	800e25a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	685b      	ldr	r3, [r3, #4]
 800e02e:	b2db      	uxtb	r3, r3
 800e030:	4619      	mov	r1, r3
 800e032:	6878      	ldr	r0, [r7, #4]
 800e034:	f7fe ffa9 	bl	800cf8a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	2202      	movs	r2, #2
 800e03c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e040:	e014      	b.n	800e06c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e042:	6878      	ldr	r0, [r7, #4]
 800e044:	f000 f9d4 	bl	800e3f0 <USBD_CtlSendStatus>
      break;
 800e048:	e010      	b.n	800e06c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e04a:	6878      	ldr	r0, [r7, #4]
 800e04c:	f000 f9d0 	bl	800e3f0 <USBD_CtlSendStatus>
      break;
 800e050:	e00c      	b.n	800e06c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e052:	6839      	ldr	r1, [r7, #0]
 800e054:	6878      	ldr	r0, [r7, #4]
 800e056:	f000 f900 	bl	800e25a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e05a:	4b07      	ldr	r3, [pc, #28]	; (800e078 <USBD_SetConfig+0x150>)
 800e05c:	781b      	ldrb	r3, [r3, #0]
 800e05e:	4619      	mov	r1, r3
 800e060:	6878      	ldr	r0, [r7, #4]
 800e062:	f7fe ff92 	bl	800cf8a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e066:	2303      	movs	r3, #3
 800e068:	73fb      	strb	r3, [r7, #15]
      break;
 800e06a:	bf00      	nop
  }

  return ret;
 800e06c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e06e:	4618      	mov	r0, r3
 800e070:	3710      	adds	r7, #16
 800e072:	46bd      	mov	sp, r7
 800e074:	bd80      	pop	{r7, pc}
 800e076:	bf00      	nop
 800e078:	200044b0 	.word	0x200044b0

0800e07c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b082      	sub	sp, #8
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
 800e084:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e086:	683b      	ldr	r3, [r7, #0]
 800e088:	88db      	ldrh	r3, [r3, #6]
 800e08a:	2b01      	cmp	r3, #1
 800e08c:	d004      	beq.n	800e098 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e08e:	6839      	ldr	r1, [r7, #0]
 800e090:	6878      	ldr	r0, [r7, #4]
 800e092:	f000 f8e2 	bl	800e25a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e096:	e023      	b.n	800e0e0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e09e:	b2db      	uxtb	r3, r3
 800e0a0:	2b02      	cmp	r3, #2
 800e0a2:	dc02      	bgt.n	800e0aa <USBD_GetConfig+0x2e>
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	dc03      	bgt.n	800e0b0 <USBD_GetConfig+0x34>
 800e0a8:	e015      	b.n	800e0d6 <USBD_GetConfig+0x5a>
 800e0aa:	2b03      	cmp	r3, #3
 800e0ac:	d00b      	beq.n	800e0c6 <USBD_GetConfig+0x4a>
 800e0ae:	e012      	b.n	800e0d6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	3308      	adds	r3, #8
 800e0ba:	2201      	movs	r2, #1
 800e0bc:	4619      	mov	r1, r3
 800e0be:	6878      	ldr	r0, [r7, #4]
 800e0c0:	f000 f93c 	bl	800e33c <USBD_CtlSendData>
        break;
 800e0c4:	e00c      	b.n	800e0e0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	3304      	adds	r3, #4
 800e0ca:	2201      	movs	r2, #1
 800e0cc:	4619      	mov	r1, r3
 800e0ce:	6878      	ldr	r0, [r7, #4]
 800e0d0:	f000 f934 	bl	800e33c <USBD_CtlSendData>
        break;
 800e0d4:	e004      	b.n	800e0e0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e0d6:	6839      	ldr	r1, [r7, #0]
 800e0d8:	6878      	ldr	r0, [r7, #4]
 800e0da:	f000 f8be 	bl	800e25a <USBD_CtlError>
        break;
 800e0de:	bf00      	nop
}
 800e0e0:	bf00      	nop
 800e0e2:	3708      	adds	r7, #8
 800e0e4:	46bd      	mov	sp, r7
 800e0e6:	bd80      	pop	{r7, pc}

0800e0e8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b082      	sub	sp, #8
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
 800e0f0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e0f8:	b2db      	uxtb	r3, r3
 800e0fa:	3b01      	subs	r3, #1
 800e0fc:	2b02      	cmp	r3, #2
 800e0fe:	d81e      	bhi.n	800e13e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e100:	683b      	ldr	r3, [r7, #0]
 800e102:	88db      	ldrh	r3, [r3, #6]
 800e104:	2b02      	cmp	r3, #2
 800e106:	d004      	beq.n	800e112 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e108:	6839      	ldr	r1, [r7, #0]
 800e10a:	6878      	ldr	r0, [r7, #4]
 800e10c:	f000 f8a5 	bl	800e25a <USBD_CtlError>
        break;
 800e110:	e01a      	b.n	800e148 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	2201      	movs	r2, #1
 800e116:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d005      	beq.n	800e12e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	68db      	ldr	r3, [r3, #12]
 800e126:	f043 0202 	orr.w	r2, r3, #2
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	330c      	adds	r3, #12
 800e132:	2202      	movs	r2, #2
 800e134:	4619      	mov	r1, r3
 800e136:	6878      	ldr	r0, [r7, #4]
 800e138:	f000 f900 	bl	800e33c <USBD_CtlSendData>
      break;
 800e13c:	e004      	b.n	800e148 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e13e:	6839      	ldr	r1, [r7, #0]
 800e140:	6878      	ldr	r0, [r7, #4]
 800e142:	f000 f88a 	bl	800e25a <USBD_CtlError>
      break;
 800e146:	bf00      	nop
  }
}
 800e148:	bf00      	nop
 800e14a:	3708      	adds	r7, #8
 800e14c:	46bd      	mov	sp, r7
 800e14e:	bd80      	pop	{r7, pc}

0800e150 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e150:	b580      	push	{r7, lr}
 800e152:	b082      	sub	sp, #8
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
 800e158:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e15a:	683b      	ldr	r3, [r7, #0]
 800e15c:	885b      	ldrh	r3, [r3, #2]
 800e15e:	2b01      	cmp	r3, #1
 800e160:	d107      	bne.n	800e172 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	2201      	movs	r2, #1
 800e166:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e16a:	6878      	ldr	r0, [r7, #4]
 800e16c:	f000 f940 	bl	800e3f0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e170:	e013      	b.n	800e19a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e172:	683b      	ldr	r3, [r7, #0]
 800e174:	885b      	ldrh	r3, [r3, #2]
 800e176:	2b02      	cmp	r3, #2
 800e178:	d10b      	bne.n	800e192 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800e17a:	683b      	ldr	r3, [r7, #0]
 800e17c:	889b      	ldrh	r3, [r3, #4]
 800e17e:	0a1b      	lsrs	r3, r3, #8
 800e180:	b29b      	uxth	r3, r3
 800e182:	b2da      	uxtb	r2, r3
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e18a:	6878      	ldr	r0, [r7, #4]
 800e18c:	f000 f930 	bl	800e3f0 <USBD_CtlSendStatus>
}
 800e190:	e003      	b.n	800e19a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e192:	6839      	ldr	r1, [r7, #0]
 800e194:	6878      	ldr	r0, [r7, #4]
 800e196:	f000 f860 	bl	800e25a <USBD_CtlError>
}
 800e19a:	bf00      	nop
 800e19c:	3708      	adds	r7, #8
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	bd80      	pop	{r7, pc}

0800e1a2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e1a2:	b580      	push	{r7, lr}
 800e1a4:	b082      	sub	sp, #8
 800e1a6:	af00      	add	r7, sp, #0
 800e1a8:	6078      	str	r0, [r7, #4]
 800e1aa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1b2:	b2db      	uxtb	r3, r3
 800e1b4:	3b01      	subs	r3, #1
 800e1b6:	2b02      	cmp	r3, #2
 800e1b8:	d80b      	bhi.n	800e1d2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e1ba:	683b      	ldr	r3, [r7, #0]
 800e1bc:	885b      	ldrh	r3, [r3, #2]
 800e1be:	2b01      	cmp	r3, #1
 800e1c0:	d10c      	bne.n	800e1dc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e1ca:	6878      	ldr	r0, [r7, #4]
 800e1cc:	f000 f910 	bl	800e3f0 <USBD_CtlSendStatus>
      }
      break;
 800e1d0:	e004      	b.n	800e1dc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e1d2:	6839      	ldr	r1, [r7, #0]
 800e1d4:	6878      	ldr	r0, [r7, #4]
 800e1d6:	f000 f840 	bl	800e25a <USBD_CtlError>
      break;
 800e1da:	e000      	b.n	800e1de <USBD_ClrFeature+0x3c>
      break;
 800e1dc:	bf00      	nop
  }
}
 800e1de:	bf00      	nop
 800e1e0:	3708      	adds	r7, #8
 800e1e2:	46bd      	mov	sp, r7
 800e1e4:	bd80      	pop	{r7, pc}

0800e1e6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e1e6:	b580      	push	{r7, lr}
 800e1e8:	b084      	sub	sp, #16
 800e1ea:	af00      	add	r7, sp, #0
 800e1ec:	6078      	str	r0, [r7, #4]
 800e1ee:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e1f0:	683b      	ldr	r3, [r7, #0]
 800e1f2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	781a      	ldrb	r2, [r3, #0]
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	3301      	adds	r3, #1
 800e200:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	781a      	ldrb	r2, [r3, #0]
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	3301      	adds	r3, #1
 800e20e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e210:	68f8      	ldr	r0, [r7, #12]
 800e212:	f7ff fa41 	bl	800d698 <SWAPBYTE>
 800e216:	4603      	mov	r3, r0
 800e218:	461a      	mov	r2, r3
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	3301      	adds	r3, #1
 800e222:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	3301      	adds	r3, #1
 800e228:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e22a:	68f8      	ldr	r0, [r7, #12]
 800e22c:	f7ff fa34 	bl	800d698 <SWAPBYTE>
 800e230:	4603      	mov	r3, r0
 800e232:	461a      	mov	r2, r3
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	3301      	adds	r3, #1
 800e23c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	3301      	adds	r3, #1
 800e242:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e244:	68f8      	ldr	r0, [r7, #12]
 800e246:	f7ff fa27 	bl	800d698 <SWAPBYTE>
 800e24a:	4603      	mov	r3, r0
 800e24c:	461a      	mov	r2, r3
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	80da      	strh	r2, [r3, #6]
}
 800e252:	bf00      	nop
 800e254:	3710      	adds	r7, #16
 800e256:	46bd      	mov	sp, r7
 800e258:	bd80      	pop	{r7, pc}

0800e25a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e25a:	b580      	push	{r7, lr}
 800e25c:	b082      	sub	sp, #8
 800e25e:	af00      	add	r7, sp, #0
 800e260:	6078      	str	r0, [r7, #4]
 800e262:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e264:	2180      	movs	r1, #128	; 0x80
 800e266:	6878      	ldr	r0, [r7, #4]
 800e268:	f000 fd0e 	bl	800ec88 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e26c:	2100      	movs	r1, #0
 800e26e:	6878      	ldr	r0, [r7, #4]
 800e270:	f000 fd0a 	bl	800ec88 <USBD_LL_StallEP>
}
 800e274:	bf00      	nop
 800e276:	3708      	adds	r7, #8
 800e278:	46bd      	mov	sp, r7
 800e27a:	bd80      	pop	{r7, pc}

0800e27c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b086      	sub	sp, #24
 800e280:	af00      	add	r7, sp, #0
 800e282:	60f8      	str	r0, [r7, #12]
 800e284:	60b9      	str	r1, [r7, #8]
 800e286:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e288:	2300      	movs	r3, #0
 800e28a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d036      	beq.n	800e300 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e296:	6938      	ldr	r0, [r7, #16]
 800e298:	f000 f836 	bl	800e308 <USBD_GetLen>
 800e29c:	4603      	mov	r3, r0
 800e29e:	3301      	adds	r3, #1
 800e2a0:	b29b      	uxth	r3, r3
 800e2a2:	005b      	lsls	r3, r3, #1
 800e2a4:	b29a      	uxth	r2, r3
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e2aa:	7dfb      	ldrb	r3, [r7, #23]
 800e2ac:	68ba      	ldr	r2, [r7, #8]
 800e2ae:	4413      	add	r3, r2
 800e2b0:	687a      	ldr	r2, [r7, #4]
 800e2b2:	7812      	ldrb	r2, [r2, #0]
 800e2b4:	701a      	strb	r2, [r3, #0]
  idx++;
 800e2b6:	7dfb      	ldrb	r3, [r7, #23]
 800e2b8:	3301      	adds	r3, #1
 800e2ba:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e2bc:	7dfb      	ldrb	r3, [r7, #23]
 800e2be:	68ba      	ldr	r2, [r7, #8]
 800e2c0:	4413      	add	r3, r2
 800e2c2:	2203      	movs	r2, #3
 800e2c4:	701a      	strb	r2, [r3, #0]
  idx++;
 800e2c6:	7dfb      	ldrb	r3, [r7, #23]
 800e2c8:	3301      	adds	r3, #1
 800e2ca:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e2cc:	e013      	b.n	800e2f6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e2ce:	7dfb      	ldrb	r3, [r7, #23]
 800e2d0:	68ba      	ldr	r2, [r7, #8]
 800e2d2:	4413      	add	r3, r2
 800e2d4:	693a      	ldr	r2, [r7, #16]
 800e2d6:	7812      	ldrb	r2, [r2, #0]
 800e2d8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e2da:	693b      	ldr	r3, [r7, #16]
 800e2dc:	3301      	adds	r3, #1
 800e2de:	613b      	str	r3, [r7, #16]
    idx++;
 800e2e0:	7dfb      	ldrb	r3, [r7, #23]
 800e2e2:	3301      	adds	r3, #1
 800e2e4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e2e6:	7dfb      	ldrb	r3, [r7, #23]
 800e2e8:	68ba      	ldr	r2, [r7, #8]
 800e2ea:	4413      	add	r3, r2
 800e2ec:	2200      	movs	r2, #0
 800e2ee:	701a      	strb	r2, [r3, #0]
    idx++;
 800e2f0:	7dfb      	ldrb	r3, [r7, #23]
 800e2f2:	3301      	adds	r3, #1
 800e2f4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e2f6:	693b      	ldr	r3, [r7, #16]
 800e2f8:	781b      	ldrb	r3, [r3, #0]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d1e7      	bne.n	800e2ce <USBD_GetString+0x52>
 800e2fe:	e000      	b.n	800e302 <USBD_GetString+0x86>
    return;
 800e300:	bf00      	nop
  }
}
 800e302:	3718      	adds	r7, #24
 800e304:	46bd      	mov	sp, r7
 800e306:	bd80      	pop	{r7, pc}

0800e308 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e308:	b480      	push	{r7}
 800e30a:	b085      	sub	sp, #20
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e310:	2300      	movs	r3, #0
 800e312:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e318:	e005      	b.n	800e326 <USBD_GetLen+0x1e>
  {
    len++;
 800e31a:	7bfb      	ldrb	r3, [r7, #15]
 800e31c:	3301      	adds	r3, #1
 800e31e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e320:	68bb      	ldr	r3, [r7, #8]
 800e322:	3301      	adds	r3, #1
 800e324:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e326:	68bb      	ldr	r3, [r7, #8]
 800e328:	781b      	ldrb	r3, [r3, #0]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d1f5      	bne.n	800e31a <USBD_GetLen+0x12>
  }

  return len;
 800e32e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e330:	4618      	mov	r0, r3
 800e332:	3714      	adds	r7, #20
 800e334:	46bd      	mov	sp, r7
 800e336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e33a:	4770      	bx	lr

0800e33c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b084      	sub	sp, #16
 800e340:	af00      	add	r7, sp, #0
 800e342:	60f8      	str	r0, [r7, #12]
 800e344:	60b9      	str	r1, [r7, #8]
 800e346:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	2202      	movs	r2, #2
 800e34c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	687a      	ldr	r2, [r7, #4]
 800e354:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	687a      	ldr	r2, [r7, #4]
 800e35a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	68ba      	ldr	r2, [r7, #8]
 800e360:	2100      	movs	r1, #0
 800e362:	68f8      	ldr	r0, [r7, #12]
 800e364:	f000 fd19 	bl	800ed9a <USBD_LL_Transmit>

  return USBD_OK;
 800e368:	2300      	movs	r3, #0
}
 800e36a:	4618      	mov	r0, r3
 800e36c:	3710      	adds	r7, #16
 800e36e:	46bd      	mov	sp, r7
 800e370:	bd80      	pop	{r7, pc}

0800e372 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e372:	b580      	push	{r7, lr}
 800e374:	b084      	sub	sp, #16
 800e376:	af00      	add	r7, sp, #0
 800e378:	60f8      	str	r0, [r7, #12]
 800e37a:	60b9      	str	r1, [r7, #8]
 800e37c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	68ba      	ldr	r2, [r7, #8]
 800e382:	2100      	movs	r1, #0
 800e384:	68f8      	ldr	r0, [r7, #12]
 800e386:	f000 fd08 	bl	800ed9a <USBD_LL_Transmit>

  return USBD_OK;
 800e38a:	2300      	movs	r3, #0
}
 800e38c:	4618      	mov	r0, r3
 800e38e:	3710      	adds	r7, #16
 800e390:	46bd      	mov	sp, r7
 800e392:	bd80      	pop	{r7, pc}

0800e394 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e394:	b580      	push	{r7, lr}
 800e396:	b084      	sub	sp, #16
 800e398:	af00      	add	r7, sp, #0
 800e39a:	60f8      	str	r0, [r7, #12]
 800e39c:	60b9      	str	r1, [r7, #8]
 800e39e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	2203      	movs	r2, #3
 800e3a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	687a      	ldr	r2, [r7, #4]
 800e3ac:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	687a      	ldr	r2, [r7, #4]
 800e3b4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	68ba      	ldr	r2, [r7, #8]
 800e3bc:	2100      	movs	r1, #0
 800e3be:	68f8      	ldr	r0, [r7, #12]
 800e3c0:	f000 fd0c 	bl	800eddc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e3c4:	2300      	movs	r3, #0
}
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	3710      	adds	r7, #16
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	bd80      	pop	{r7, pc}

0800e3ce <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e3ce:	b580      	push	{r7, lr}
 800e3d0:	b084      	sub	sp, #16
 800e3d2:	af00      	add	r7, sp, #0
 800e3d4:	60f8      	str	r0, [r7, #12]
 800e3d6:	60b9      	str	r1, [r7, #8]
 800e3d8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	68ba      	ldr	r2, [r7, #8]
 800e3de:	2100      	movs	r1, #0
 800e3e0:	68f8      	ldr	r0, [r7, #12]
 800e3e2:	f000 fcfb 	bl	800eddc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e3e6:	2300      	movs	r3, #0
}
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	3710      	adds	r7, #16
 800e3ec:	46bd      	mov	sp, r7
 800e3ee:	bd80      	pop	{r7, pc}

0800e3f0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e3f0:	b580      	push	{r7, lr}
 800e3f2:	b082      	sub	sp, #8
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	2204      	movs	r2, #4
 800e3fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e400:	2300      	movs	r3, #0
 800e402:	2200      	movs	r2, #0
 800e404:	2100      	movs	r1, #0
 800e406:	6878      	ldr	r0, [r7, #4]
 800e408:	f000 fcc7 	bl	800ed9a <USBD_LL_Transmit>

  return USBD_OK;
 800e40c:	2300      	movs	r3, #0
}
 800e40e:	4618      	mov	r0, r3
 800e410:	3708      	adds	r7, #8
 800e412:	46bd      	mov	sp, r7
 800e414:	bd80      	pop	{r7, pc}

0800e416 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e416:	b580      	push	{r7, lr}
 800e418:	b082      	sub	sp, #8
 800e41a:	af00      	add	r7, sp, #0
 800e41c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	2205      	movs	r2, #5
 800e422:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e426:	2300      	movs	r3, #0
 800e428:	2200      	movs	r2, #0
 800e42a:	2100      	movs	r1, #0
 800e42c:	6878      	ldr	r0, [r7, #4]
 800e42e:	f000 fcd5 	bl	800eddc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e432:	2300      	movs	r3, #0
}
 800e434:	4618      	mov	r0, r3
 800e436:	3708      	adds	r7, #8
 800e438:	46bd      	mov	sp, r7
 800e43a:	bd80      	pop	{r7, pc}

0800e43c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e43c:	b580      	push	{r7, lr}
 800e43e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800e440:	2201      	movs	r2, #1
 800e442:	4912      	ldr	r1, [pc, #72]	; (800e48c <MX_USB_DEVICE_Init+0x50>)
 800e444:	4812      	ldr	r0, [pc, #72]	; (800e490 <MX_USB_DEVICE_Init+0x54>)
 800e446:	f7fe fd07 	bl	800ce58 <USBD_Init>
 800e44a:	4603      	mov	r3, r0
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d001      	beq.n	800e454 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e450:	f7f2 fe50 	bl	80010f4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800e454:	490f      	ldr	r1, [pc, #60]	; (800e494 <MX_USB_DEVICE_Init+0x58>)
 800e456:	480e      	ldr	r0, [pc, #56]	; (800e490 <MX_USB_DEVICE_Init+0x54>)
 800e458:	f7fe fd2e 	bl	800ceb8 <USBD_RegisterClass>
 800e45c:	4603      	mov	r3, r0
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d001      	beq.n	800e466 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e462:	f7f2 fe47 	bl	80010f4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800e466:	490c      	ldr	r1, [pc, #48]	; (800e498 <MX_USB_DEVICE_Init+0x5c>)
 800e468:	4809      	ldr	r0, [pc, #36]	; (800e490 <MX_USB_DEVICE_Init+0x54>)
 800e46a:	f7fe fc2b 	bl	800ccc4 <USBD_CDC_RegisterInterface>
 800e46e:	4603      	mov	r3, r0
 800e470:	2b00      	cmp	r3, #0
 800e472:	d001      	beq.n	800e478 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e474:	f7f2 fe3e 	bl	80010f4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800e478:	4805      	ldr	r0, [pc, #20]	; (800e490 <MX_USB_DEVICE_Init+0x54>)
 800e47a:	f7fe fd53 	bl	800cf24 <USBD_Start>
 800e47e:	4603      	mov	r3, r0
 800e480:	2b00      	cmp	r3, #0
 800e482:	d001      	beq.n	800e488 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e484:	f7f2 fe36 	bl	80010f4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e488:	bf00      	nop
 800e48a:	bd80      	pop	{r7, pc}
 800e48c:	2000012c 	.word	0x2000012c
 800e490:	200044b4 	.word	0x200044b4
 800e494:	20000098 	.word	0x20000098
 800e498:	20000118 	.word	0x20000118

0800e49c <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800e49c:	b580      	push	{r7, lr}
 800e49e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800e4a0:	2200      	movs	r2, #0
 800e4a2:	4905      	ldr	r1, [pc, #20]	; (800e4b8 <CDC_Init_HS+0x1c>)
 800e4a4:	4805      	ldr	r0, [pc, #20]	; (800e4bc <CDC_Init_HS+0x20>)
 800e4a6:	f7fe fc27 	bl	800ccf8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800e4aa:	4905      	ldr	r1, [pc, #20]	; (800e4c0 <CDC_Init_HS+0x24>)
 800e4ac:	4803      	ldr	r0, [pc, #12]	; (800e4bc <CDC_Init_HS+0x20>)
 800e4ae:	f7fe fc43 	bl	800cd38 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e4b2:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	bd80      	pop	{r7, pc}
 800e4b8:	20004f90 	.word	0x20004f90
 800e4bc:	200044b4 	.word	0x200044b4
 800e4c0:	20004790 	.word	0x20004790

0800e4c4 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800e4c4:	b480      	push	{r7}
 800e4c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800e4c8:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d2:	4770      	bx	lr

0800e4d4 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e4d4:	b580      	push	{r7, lr}
 800e4d6:	b084      	sub	sp, #16
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	4603      	mov	r3, r0
 800e4dc:	6039      	str	r1, [r7, #0]
 800e4de:	71fb      	strb	r3, [r7, #7]
 800e4e0:	4613      	mov	r3, r2
 800e4e2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800e4e4:	79fb      	ldrb	r3, [r7, #7]
 800e4e6:	2b23      	cmp	r3, #35	; 0x23
 800e4e8:	d875      	bhi.n	800e5d6 <CDC_Control_HS+0x102>
 800e4ea:	a201      	add	r2, pc, #4	; (adr r2, 800e4f0 <CDC_Control_HS+0x1c>)
 800e4ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4f0:	0800e5d7 	.word	0x0800e5d7
 800e4f4:	0800e5d7 	.word	0x0800e5d7
 800e4f8:	0800e5d7 	.word	0x0800e5d7
 800e4fc:	0800e5d7 	.word	0x0800e5d7
 800e500:	0800e5d7 	.word	0x0800e5d7
 800e504:	0800e5d7 	.word	0x0800e5d7
 800e508:	0800e5d7 	.word	0x0800e5d7
 800e50c:	0800e5d7 	.word	0x0800e5d7
 800e510:	0800e5d7 	.word	0x0800e5d7
 800e514:	0800e5d7 	.word	0x0800e5d7
 800e518:	0800e5d7 	.word	0x0800e5d7
 800e51c:	0800e5d7 	.word	0x0800e5d7
 800e520:	0800e5d7 	.word	0x0800e5d7
 800e524:	0800e5d7 	.word	0x0800e5d7
 800e528:	0800e5d7 	.word	0x0800e5d7
 800e52c:	0800e5d7 	.word	0x0800e5d7
 800e530:	0800e5d7 	.word	0x0800e5d7
 800e534:	0800e5d7 	.word	0x0800e5d7
 800e538:	0800e5d7 	.word	0x0800e5d7
 800e53c:	0800e5d7 	.word	0x0800e5d7
 800e540:	0800e5d7 	.word	0x0800e5d7
 800e544:	0800e5d7 	.word	0x0800e5d7
 800e548:	0800e5d7 	.word	0x0800e5d7
 800e54c:	0800e5d7 	.word	0x0800e5d7
 800e550:	0800e5d7 	.word	0x0800e5d7
 800e554:	0800e5d7 	.word	0x0800e5d7
 800e558:	0800e5d7 	.word	0x0800e5d7
 800e55c:	0800e5d7 	.word	0x0800e5d7
 800e560:	0800e5d7 	.word	0x0800e5d7
 800e564:	0800e5d7 	.word	0x0800e5d7
 800e568:	0800e5d7 	.word	0x0800e5d7
 800e56c:	0800e5d7 	.word	0x0800e5d7
 800e570:	0800e581 	.word	0x0800e581
 800e574:	0800e5b3 	.word	0x0800e5b3
 800e578:	0800e5d7 	.word	0x0800e5d7
 800e57c:	0800e5d7 	.word	0x0800e5d7
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
  case CDC_SET_LINE_CODING:
	  for (int i = 0; i < 7; i++){
 800e580:	2300      	movs	r3, #0
 800e582:	60fb      	str	r3, [r7, #12]
 800e584:	e00b      	b.n	800e59e <CDC_Control_HS+0xca>
		  tembuff[i] = pbuf[i];
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	683a      	ldr	r2, [r7, #0]
 800e58a:	4413      	add	r3, r2
 800e58c:	7819      	ldrb	r1, [r3, #0]
 800e58e:	4a15      	ldr	r2, [pc, #84]	; (800e5e4 <CDC_Control_HS+0x110>)
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	4413      	add	r3, r2
 800e594:	460a      	mov	r2, r1
 800e596:	701a      	strb	r2, [r3, #0]
	  for (int i = 0; i < 7; i++){
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	3301      	adds	r3, #1
 800e59c:	60fb      	str	r3, [r7, #12]
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	2b06      	cmp	r3, #6
 800e5a2:	ddf0      	ble.n	800e586 <CDC_Control_HS+0xb2>
	  }
	  osSignalSet(Task01Handle, 0x1);
 800e5a4:	4b10      	ldr	r3, [pc, #64]	; (800e5e8 <CDC_Control_HS+0x114>)
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	2101      	movs	r1, #1
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	f7fb fa62 	bl	8009a74 <osSignalSet>
    break;
 800e5b0:	e012      	b.n	800e5d8 <CDC_Control_HS+0x104>

  case CDC_GET_LINE_CODING:
	  for (int i = 0; i < 7; i++){
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	60bb      	str	r3, [r7, #8]
 800e5b6:	e00a      	b.n	800e5ce <CDC_Control_HS+0xfa>
	  		pbuf[i] = tembuff[i];
 800e5b8:	68bb      	ldr	r3, [r7, #8]
 800e5ba:	683a      	ldr	r2, [r7, #0]
 800e5bc:	4413      	add	r3, r2
 800e5be:	4909      	ldr	r1, [pc, #36]	; (800e5e4 <CDC_Control_HS+0x110>)
 800e5c0:	68ba      	ldr	r2, [r7, #8]
 800e5c2:	440a      	add	r2, r1
 800e5c4:	7812      	ldrb	r2, [r2, #0]
 800e5c6:	701a      	strb	r2, [r3, #0]
	  for (int i = 0; i < 7; i++){
 800e5c8:	68bb      	ldr	r3, [r7, #8]
 800e5ca:	3301      	adds	r3, #1
 800e5cc:	60bb      	str	r3, [r7, #8]
 800e5ce:	68bb      	ldr	r3, [r7, #8]
 800e5d0:	2b06      	cmp	r3, #6
 800e5d2:	ddf1      	ble.n	800e5b8 <CDC_Control_HS+0xe4>
	  }
    break;
 800e5d4:	e000      	b.n	800e5d8 <CDC_Control_HS+0x104>
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e5d6:	bf00      	nop
  }

  return (USBD_OK);
 800e5d8:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800e5da:	4618      	mov	r0, r3
 800e5dc:	3710      	adds	r7, #16
 800e5de:	46bd      	mov	sp, r7
 800e5e0:	bd80      	pop	{r7, pc}
 800e5e2:	bf00      	nop
 800e5e4:	20005790 	.word	0x20005790
 800e5e8:	200004a8 	.word	0x200004a8

0800e5ec <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800e5ec:	b580      	push	{r7, lr}
 800e5ee:	b082      	sub	sp, #8
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]
 800e5f4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800e5f6:	6879      	ldr	r1, [r7, #4]
 800e5f8:	4805      	ldr	r0, [pc, #20]	; (800e610 <CDC_Receive_HS+0x24>)
 800e5fa:	f7fe fb9d 	bl	800cd38 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800e5fe:	4804      	ldr	r0, [pc, #16]	; (800e610 <CDC_Receive_HS+0x24>)
 800e600:	f7fe fbf6 	bl	800cdf0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e604:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800e606:	4618      	mov	r0, r3
 800e608:	3708      	adds	r7, #8
 800e60a:	46bd      	mov	sp, r7
 800e60c:	bd80      	pop	{r7, pc}
 800e60e:	bf00      	nop
 800e610:	200044b4 	.word	0x200044b4

0800e614 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 800e614:	b580      	push	{r7, lr}
 800e616:	b084      	sub	sp, #16
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
 800e61c:	460b      	mov	r3, r1
 800e61e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e620:	2300      	movs	r3, #0
 800e622:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800e624:	4b0c      	ldr	r3, [pc, #48]	; (800e658 <CDC_Transmit_HS+0x44>)
 800e626:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e62a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e62c:	68bb      	ldr	r3, [r7, #8]
 800e62e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e630:	2b00      	cmp	r3, #0
 800e632:	d001      	beq.n	800e638 <CDC_Transmit_HS+0x24>
    return USBD_BUSY;
 800e634:	2301      	movs	r3, #1
 800e636:	e00b      	b.n	800e650 <CDC_Transmit_HS+0x3c>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 800e638:	887b      	ldrh	r3, [r7, #2]
 800e63a:	461a      	mov	r2, r3
 800e63c:	6879      	ldr	r1, [r7, #4]
 800e63e:	4806      	ldr	r0, [pc, #24]	; (800e658 <CDC_Transmit_HS+0x44>)
 800e640:	f7fe fb5a 	bl	800ccf8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 800e644:	4804      	ldr	r0, [pc, #16]	; (800e658 <CDC_Transmit_HS+0x44>)
 800e646:	f7fe fb93 	bl	800cd70 <USBD_CDC_TransmitPacket>
 800e64a:	4603      	mov	r3, r0
 800e64c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 800e64e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e650:	4618      	mov	r0, r3
 800e652:	3710      	adds	r7, #16
 800e654:	46bd      	mov	sp, r7
 800e656:	bd80      	pop	{r7, pc}
 800e658:	200044b4 	.word	0x200044b4

0800e65c <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e65c:	b480      	push	{r7}
 800e65e:	b087      	sub	sp, #28
 800e660:	af00      	add	r7, sp, #0
 800e662:	60f8      	str	r0, [r7, #12]
 800e664:	60b9      	str	r1, [r7, #8]
 800e666:	4613      	mov	r3, r2
 800e668:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e66a:	2300      	movs	r3, #0
 800e66c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800e66e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e672:	4618      	mov	r0, r3
 800e674:	371c      	adds	r7, #28
 800e676:	46bd      	mov	sp, r7
 800e678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67c:	4770      	bx	lr
	...

0800e680 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e680:	b480      	push	{r7}
 800e682:	b083      	sub	sp, #12
 800e684:	af00      	add	r7, sp, #0
 800e686:	4603      	mov	r3, r0
 800e688:	6039      	str	r1, [r7, #0]
 800e68a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800e68c:	683b      	ldr	r3, [r7, #0]
 800e68e:	2212      	movs	r2, #18
 800e690:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800e692:	4b03      	ldr	r3, [pc, #12]	; (800e6a0 <USBD_HS_DeviceDescriptor+0x20>)
}
 800e694:	4618      	mov	r0, r3
 800e696:	370c      	adds	r7, #12
 800e698:	46bd      	mov	sp, r7
 800e69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e69e:	4770      	bx	lr
 800e6a0:	20000148 	.word	0x20000148

0800e6a4 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e6a4:	b480      	push	{r7}
 800e6a6:	b083      	sub	sp, #12
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	4603      	mov	r3, r0
 800e6ac:	6039      	str	r1, [r7, #0]
 800e6ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e6b0:	683b      	ldr	r3, [r7, #0]
 800e6b2:	2204      	movs	r2, #4
 800e6b4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e6b6:	4b03      	ldr	r3, [pc, #12]	; (800e6c4 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	370c      	adds	r7, #12
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c2:	4770      	bx	lr
 800e6c4:	2000015c 	.word	0x2000015c

0800e6c8 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b082      	sub	sp, #8
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	4603      	mov	r3, r0
 800e6d0:	6039      	str	r1, [r7, #0]
 800e6d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e6d4:	79fb      	ldrb	r3, [r7, #7]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d105      	bne.n	800e6e6 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800e6da:	683a      	ldr	r2, [r7, #0]
 800e6dc:	4907      	ldr	r1, [pc, #28]	; (800e6fc <USBD_HS_ProductStrDescriptor+0x34>)
 800e6de:	4808      	ldr	r0, [pc, #32]	; (800e700 <USBD_HS_ProductStrDescriptor+0x38>)
 800e6e0:	f7ff fdcc 	bl	800e27c <USBD_GetString>
 800e6e4:	e004      	b.n	800e6f0 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800e6e6:	683a      	ldr	r2, [r7, #0]
 800e6e8:	4904      	ldr	r1, [pc, #16]	; (800e6fc <USBD_HS_ProductStrDescriptor+0x34>)
 800e6ea:	4805      	ldr	r0, [pc, #20]	; (800e700 <USBD_HS_ProductStrDescriptor+0x38>)
 800e6ec:	f7ff fdc6 	bl	800e27c <USBD_GetString>
  }
  return USBD_StrDesc;
 800e6f0:	4b02      	ldr	r3, [pc, #8]	; (800e6fc <USBD_HS_ProductStrDescriptor+0x34>)
}
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	3708      	adds	r7, #8
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	bd80      	pop	{r7, pc}
 800e6fa:	bf00      	nop
 800e6fc:	20005798 	.word	0x20005798
 800e700:	0800f8bc 	.word	0x0800f8bc

0800e704 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e704:	b580      	push	{r7, lr}
 800e706:	b082      	sub	sp, #8
 800e708:	af00      	add	r7, sp, #0
 800e70a:	4603      	mov	r3, r0
 800e70c:	6039      	str	r1, [r7, #0]
 800e70e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e710:	683a      	ldr	r2, [r7, #0]
 800e712:	4904      	ldr	r1, [pc, #16]	; (800e724 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800e714:	4804      	ldr	r0, [pc, #16]	; (800e728 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800e716:	f7ff fdb1 	bl	800e27c <USBD_GetString>
  return USBD_StrDesc;
 800e71a:	4b02      	ldr	r3, [pc, #8]	; (800e724 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800e71c:	4618      	mov	r0, r3
 800e71e:	3708      	adds	r7, #8
 800e720:	46bd      	mov	sp, r7
 800e722:	bd80      	pop	{r7, pc}
 800e724:	20005798 	.word	0x20005798
 800e728:	0800f8d4 	.word	0x0800f8d4

0800e72c <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b082      	sub	sp, #8
 800e730:	af00      	add	r7, sp, #0
 800e732:	4603      	mov	r3, r0
 800e734:	6039      	str	r1, [r7, #0]
 800e736:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e738:	683b      	ldr	r3, [r7, #0]
 800e73a:	221a      	movs	r2, #26
 800e73c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e73e:	f000 f843 	bl	800e7c8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800e742:	4b02      	ldr	r3, [pc, #8]	; (800e74c <USBD_HS_SerialStrDescriptor+0x20>)
}
 800e744:	4618      	mov	r0, r3
 800e746:	3708      	adds	r7, #8
 800e748:	46bd      	mov	sp, r7
 800e74a:	bd80      	pop	{r7, pc}
 800e74c:	20000160 	.word	0x20000160

0800e750 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e750:	b580      	push	{r7, lr}
 800e752:	b082      	sub	sp, #8
 800e754:	af00      	add	r7, sp, #0
 800e756:	4603      	mov	r3, r0
 800e758:	6039      	str	r1, [r7, #0]
 800e75a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e75c:	79fb      	ldrb	r3, [r7, #7]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d105      	bne.n	800e76e <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800e762:	683a      	ldr	r2, [r7, #0]
 800e764:	4907      	ldr	r1, [pc, #28]	; (800e784 <USBD_HS_ConfigStrDescriptor+0x34>)
 800e766:	4808      	ldr	r0, [pc, #32]	; (800e788 <USBD_HS_ConfigStrDescriptor+0x38>)
 800e768:	f7ff fd88 	bl	800e27c <USBD_GetString>
 800e76c:	e004      	b.n	800e778 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800e76e:	683a      	ldr	r2, [r7, #0]
 800e770:	4904      	ldr	r1, [pc, #16]	; (800e784 <USBD_HS_ConfigStrDescriptor+0x34>)
 800e772:	4805      	ldr	r0, [pc, #20]	; (800e788 <USBD_HS_ConfigStrDescriptor+0x38>)
 800e774:	f7ff fd82 	bl	800e27c <USBD_GetString>
  }
  return USBD_StrDesc;
 800e778:	4b02      	ldr	r3, [pc, #8]	; (800e784 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800e77a:	4618      	mov	r0, r3
 800e77c:	3708      	adds	r7, #8
 800e77e:	46bd      	mov	sp, r7
 800e780:	bd80      	pop	{r7, pc}
 800e782:	bf00      	nop
 800e784:	20005798 	.word	0x20005798
 800e788:	0800f8e8 	.word	0x0800f8e8

0800e78c <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b082      	sub	sp, #8
 800e790:	af00      	add	r7, sp, #0
 800e792:	4603      	mov	r3, r0
 800e794:	6039      	str	r1, [r7, #0]
 800e796:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e798:	79fb      	ldrb	r3, [r7, #7]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d105      	bne.n	800e7aa <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800e79e:	683a      	ldr	r2, [r7, #0]
 800e7a0:	4907      	ldr	r1, [pc, #28]	; (800e7c0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800e7a2:	4808      	ldr	r0, [pc, #32]	; (800e7c4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800e7a4:	f7ff fd6a 	bl	800e27c <USBD_GetString>
 800e7a8:	e004      	b.n	800e7b4 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800e7aa:	683a      	ldr	r2, [r7, #0]
 800e7ac:	4904      	ldr	r1, [pc, #16]	; (800e7c0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800e7ae:	4805      	ldr	r0, [pc, #20]	; (800e7c4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800e7b0:	f7ff fd64 	bl	800e27c <USBD_GetString>
  }
  return USBD_StrDesc;
 800e7b4:	4b02      	ldr	r3, [pc, #8]	; (800e7c0 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	3708      	adds	r7, #8
 800e7ba:	46bd      	mov	sp, r7
 800e7bc:	bd80      	pop	{r7, pc}
 800e7be:	bf00      	nop
 800e7c0:	20005798 	.word	0x20005798
 800e7c4:	0800f8f4 	.word	0x0800f8f4

0800e7c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b084      	sub	sp, #16
 800e7cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e7ce:	4b0f      	ldr	r3, [pc, #60]	; (800e80c <Get_SerialNum+0x44>)
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e7d4:	4b0e      	ldr	r3, [pc, #56]	; (800e810 <Get_SerialNum+0x48>)
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e7da:	4b0e      	ldr	r3, [pc, #56]	; (800e814 <Get_SerialNum+0x4c>)
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e7e0:	68fa      	ldr	r2, [r7, #12]
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	4413      	add	r3, r2
 800e7e6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d009      	beq.n	800e802 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e7ee:	2208      	movs	r2, #8
 800e7f0:	4909      	ldr	r1, [pc, #36]	; (800e818 <Get_SerialNum+0x50>)
 800e7f2:	68f8      	ldr	r0, [r7, #12]
 800e7f4:	f000 f814 	bl	800e820 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e7f8:	2204      	movs	r2, #4
 800e7fa:	4908      	ldr	r1, [pc, #32]	; (800e81c <Get_SerialNum+0x54>)
 800e7fc:	68b8      	ldr	r0, [r7, #8]
 800e7fe:	f000 f80f 	bl	800e820 <IntToUnicode>
  }
}
 800e802:	bf00      	nop
 800e804:	3710      	adds	r7, #16
 800e806:	46bd      	mov	sp, r7
 800e808:	bd80      	pop	{r7, pc}
 800e80a:	bf00      	nop
 800e80c:	1fff7a10 	.word	0x1fff7a10
 800e810:	1fff7a14 	.word	0x1fff7a14
 800e814:	1fff7a18 	.word	0x1fff7a18
 800e818:	20000162 	.word	0x20000162
 800e81c:	20000172 	.word	0x20000172

0800e820 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e820:	b480      	push	{r7}
 800e822:	b087      	sub	sp, #28
 800e824:	af00      	add	r7, sp, #0
 800e826:	60f8      	str	r0, [r7, #12]
 800e828:	60b9      	str	r1, [r7, #8]
 800e82a:	4613      	mov	r3, r2
 800e82c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e82e:	2300      	movs	r3, #0
 800e830:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e832:	2300      	movs	r3, #0
 800e834:	75fb      	strb	r3, [r7, #23]
 800e836:	e027      	b.n	800e888 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	0f1b      	lsrs	r3, r3, #28
 800e83c:	2b09      	cmp	r3, #9
 800e83e:	d80b      	bhi.n	800e858 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	0f1b      	lsrs	r3, r3, #28
 800e844:	b2da      	uxtb	r2, r3
 800e846:	7dfb      	ldrb	r3, [r7, #23]
 800e848:	005b      	lsls	r3, r3, #1
 800e84a:	4619      	mov	r1, r3
 800e84c:	68bb      	ldr	r3, [r7, #8]
 800e84e:	440b      	add	r3, r1
 800e850:	3230      	adds	r2, #48	; 0x30
 800e852:	b2d2      	uxtb	r2, r2
 800e854:	701a      	strb	r2, [r3, #0]
 800e856:	e00a      	b.n	800e86e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	0f1b      	lsrs	r3, r3, #28
 800e85c:	b2da      	uxtb	r2, r3
 800e85e:	7dfb      	ldrb	r3, [r7, #23]
 800e860:	005b      	lsls	r3, r3, #1
 800e862:	4619      	mov	r1, r3
 800e864:	68bb      	ldr	r3, [r7, #8]
 800e866:	440b      	add	r3, r1
 800e868:	3237      	adds	r2, #55	; 0x37
 800e86a:	b2d2      	uxtb	r2, r2
 800e86c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	011b      	lsls	r3, r3, #4
 800e872:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e874:	7dfb      	ldrb	r3, [r7, #23]
 800e876:	005b      	lsls	r3, r3, #1
 800e878:	3301      	adds	r3, #1
 800e87a:	68ba      	ldr	r2, [r7, #8]
 800e87c:	4413      	add	r3, r2
 800e87e:	2200      	movs	r2, #0
 800e880:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e882:	7dfb      	ldrb	r3, [r7, #23]
 800e884:	3301      	adds	r3, #1
 800e886:	75fb      	strb	r3, [r7, #23]
 800e888:	7dfa      	ldrb	r2, [r7, #23]
 800e88a:	79fb      	ldrb	r3, [r7, #7]
 800e88c:	429a      	cmp	r2, r3
 800e88e:	d3d3      	bcc.n	800e838 <IntToUnicode+0x18>
  }
}
 800e890:	bf00      	nop
 800e892:	bf00      	nop
 800e894:	371c      	adds	r7, #28
 800e896:	46bd      	mov	sp, r7
 800e898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e89c:	4770      	bx	lr
	...

0800e8a0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e8a0:	b580      	push	{r7, lr}
 800e8a2:	b08a      	sub	sp, #40	; 0x28
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e8a8:	f107 0314 	add.w	r3, r7, #20
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	601a      	str	r2, [r3, #0]
 800e8b0:	605a      	str	r2, [r3, #4]
 800e8b2:	609a      	str	r2, [r3, #8]
 800e8b4:	60da      	str	r2, [r3, #12]
 800e8b6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	4a1d      	ldr	r2, [pc, #116]	; (800e934 <HAL_PCD_MspInit+0x94>)
 800e8be:	4293      	cmp	r3, r2
 800e8c0:	d134      	bne.n	800e92c <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	613b      	str	r3, [r7, #16]
 800e8c6:	4b1c      	ldr	r3, [pc, #112]	; (800e938 <HAL_PCD_MspInit+0x98>)
 800e8c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8ca:	4a1b      	ldr	r2, [pc, #108]	; (800e938 <HAL_PCD_MspInit+0x98>)
 800e8cc:	f043 0302 	orr.w	r3, r3, #2
 800e8d0:	6313      	str	r3, [r2, #48]	; 0x30
 800e8d2:	4b19      	ldr	r3, [pc, #100]	; (800e938 <HAL_PCD_MspInit+0x98>)
 800e8d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8d6:	f003 0302 	and.w	r3, r3, #2
 800e8da:	613b      	str	r3, [r7, #16]
 800e8dc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800e8de:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800e8e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e8e4:	2302      	movs	r3, #2
 800e8e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e8e8:	2300      	movs	r3, #0
 800e8ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e8ec:	2303      	movs	r3, #3
 800e8ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800e8f0:	230c      	movs	r3, #12
 800e8f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e8f4:	f107 0314 	add.w	r3, r7, #20
 800e8f8:	4619      	mov	r1, r3
 800e8fa:	4810      	ldr	r0, [pc, #64]	; (800e93c <HAL_PCD_MspInit+0x9c>)
 800e8fc:	f7f5 f9dc 	bl	8003cb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800e900:	2300      	movs	r3, #0
 800e902:	60fb      	str	r3, [r7, #12]
 800e904:	4b0c      	ldr	r3, [pc, #48]	; (800e938 <HAL_PCD_MspInit+0x98>)
 800e906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e908:	4a0b      	ldr	r2, [pc, #44]	; (800e938 <HAL_PCD_MspInit+0x98>)
 800e90a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e90e:	6313      	str	r3, [r2, #48]	; 0x30
 800e910:	4b09      	ldr	r3, [pc, #36]	; (800e938 <HAL_PCD_MspInit+0x98>)
 800e912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e914:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e918:	60fb      	str	r3, [r7, #12]
 800e91a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800e91c:	2200      	movs	r2, #0
 800e91e:	2105      	movs	r1, #5
 800e920:	204d      	movs	r0, #77	; 0x4d
 800e922:	f7f4 fd1b 	bl	800335c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800e926:	204d      	movs	r0, #77	; 0x4d
 800e928:	f7f4 fd34 	bl	8003394 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800e92c:	bf00      	nop
 800e92e:	3728      	adds	r7, #40	; 0x28
 800e930:	46bd      	mov	sp, r7
 800e932:	bd80      	pop	{r7, pc}
 800e934:	40040000 	.word	0x40040000
 800e938:	40023800 	.word	0x40023800
 800e93c:	40020400 	.word	0x40020400

0800e940 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e940:	b580      	push	{r7, lr}
 800e942:	b082      	sub	sp, #8
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e954:	4619      	mov	r1, r3
 800e956:	4610      	mov	r0, r2
 800e958:	f7fe fb31 	bl	800cfbe <USBD_LL_SetupStage>
}
 800e95c:	bf00      	nop
 800e95e:	3708      	adds	r7, #8
 800e960:	46bd      	mov	sp, r7
 800e962:	bd80      	pop	{r7, pc}

0800e964 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e964:	b580      	push	{r7, lr}
 800e966:	b082      	sub	sp, #8
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
 800e96c:	460b      	mov	r3, r1
 800e96e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e976:	78fa      	ldrb	r2, [r7, #3]
 800e978:	6879      	ldr	r1, [r7, #4]
 800e97a:	4613      	mov	r3, r2
 800e97c:	00db      	lsls	r3, r3, #3
 800e97e:	4413      	add	r3, r2
 800e980:	009b      	lsls	r3, r3, #2
 800e982:	440b      	add	r3, r1
 800e984:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800e988:	681a      	ldr	r2, [r3, #0]
 800e98a:	78fb      	ldrb	r3, [r7, #3]
 800e98c:	4619      	mov	r1, r3
 800e98e:	f7fe fb6b 	bl	800d068 <USBD_LL_DataOutStage>
}
 800e992:	bf00      	nop
 800e994:	3708      	adds	r7, #8
 800e996:	46bd      	mov	sp, r7
 800e998:	bd80      	pop	{r7, pc}

0800e99a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e99a:	b580      	push	{r7, lr}
 800e99c:	b082      	sub	sp, #8
 800e99e:	af00      	add	r7, sp, #0
 800e9a0:	6078      	str	r0, [r7, #4]
 800e9a2:	460b      	mov	r3, r1
 800e9a4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e9ac:	78fa      	ldrb	r2, [r7, #3]
 800e9ae:	6879      	ldr	r1, [r7, #4]
 800e9b0:	4613      	mov	r3, r2
 800e9b2:	00db      	lsls	r3, r3, #3
 800e9b4:	4413      	add	r3, r2
 800e9b6:	009b      	lsls	r3, r3, #2
 800e9b8:	440b      	add	r3, r1
 800e9ba:	334c      	adds	r3, #76	; 0x4c
 800e9bc:	681a      	ldr	r2, [r3, #0]
 800e9be:	78fb      	ldrb	r3, [r7, #3]
 800e9c0:	4619      	mov	r1, r3
 800e9c2:	f7fe fc04 	bl	800d1ce <USBD_LL_DataInStage>
}
 800e9c6:	bf00      	nop
 800e9c8:	3708      	adds	r7, #8
 800e9ca:	46bd      	mov	sp, r7
 800e9cc:	bd80      	pop	{r7, pc}

0800e9ce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9ce:	b580      	push	{r7, lr}
 800e9d0:	b082      	sub	sp, #8
 800e9d2:	af00      	add	r7, sp, #0
 800e9d4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e9dc:	4618      	mov	r0, r3
 800e9de:	f7fe fd38 	bl	800d452 <USBD_LL_SOF>
}
 800e9e2:	bf00      	nop
 800e9e4:	3708      	adds	r7, #8
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	bd80      	pop	{r7, pc}

0800e9ea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e9ea:	b580      	push	{r7, lr}
 800e9ec:	b084      	sub	sp, #16
 800e9ee:	af00      	add	r7, sp, #0
 800e9f0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e9f2:	2301      	movs	r3, #1
 800e9f4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	68db      	ldr	r3, [r3, #12]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d102      	bne.n	800ea04 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e9fe:	2300      	movs	r3, #0
 800ea00:	73fb      	strb	r3, [r7, #15]
 800ea02:	e008      	b.n	800ea16 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	68db      	ldr	r3, [r3, #12]
 800ea08:	2b02      	cmp	r3, #2
 800ea0a:	d102      	bne.n	800ea12 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ea0c:	2301      	movs	r3, #1
 800ea0e:	73fb      	strb	r3, [r7, #15]
 800ea10:	e001      	b.n	800ea16 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ea12:	f7f2 fb6f 	bl	80010f4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ea1c:	7bfa      	ldrb	r2, [r7, #15]
 800ea1e:	4611      	mov	r1, r2
 800ea20:	4618      	mov	r0, r3
 800ea22:	f7fe fcd8 	bl	800d3d6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	f7fe fc80 	bl	800d332 <USBD_LL_Reset>
}
 800ea32:	bf00      	nop
 800ea34:	3710      	adds	r7, #16
 800ea36:	46bd      	mov	sp, r7
 800ea38:	bd80      	pop	{r7, pc}
	...

0800ea3c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b082      	sub	sp, #8
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	f7fe fcd3 	bl	800d3f6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	687a      	ldr	r2, [r7, #4]
 800ea5c:	6812      	ldr	r2, [r2, #0]
 800ea5e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ea62:	f043 0301 	orr.w	r3, r3, #1
 800ea66:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	6a1b      	ldr	r3, [r3, #32]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d005      	beq.n	800ea7c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ea70:	4b04      	ldr	r3, [pc, #16]	; (800ea84 <HAL_PCD_SuspendCallback+0x48>)
 800ea72:	691b      	ldr	r3, [r3, #16]
 800ea74:	4a03      	ldr	r2, [pc, #12]	; (800ea84 <HAL_PCD_SuspendCallback+0x48>)
 800ea76:	f043 0306 	orr.w	r3, r3, #6
 800ea7a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ea7c:	bf00      	nop
 800ea7e:	3708      	adds	r7, #8
 800ea80:	46bd      	mov	sp, r7
 800ea82:	bd80      	pop	{r7, pc}
 800ea84:	e000ed00 	.word	0xe000ed00

0800ea88 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ea88:	b580      	push	{r7, lr}
 800ea8a:	b082      	sub	sp, #8
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ea96:	4618      	mov	r0, r3
 800ea98:	f7fe fcc3 	bl	800d422 <USBD_LL_Resume>
}
 800ea9c:	bf00      	nop
 800ea9e:	3708      	adds	r7, #8
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	bd80      	pop	{r7, pc}

0800eaa4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b082      	sub	sp, #8
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
 800eaac:	460b      	mov	r3, r1
 800eaae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eab6:	78fa      	ldrb	r2, [r7, #3]
 800eab8:	4611      	mov	r1, r2
 800eaba:	4618      	mov	r0, r3
 800eabc:	f7fe fd1b 	bl	800d4f6 <USBD_LL_IsoOUTIncomplete>
}
 800eac0:	bf00      	nop
 800eac2:	3708      	adds	r7, #8
 800eac4:	46bd      	mov	sp, r7
 800eac6:	bd80      	pop	{r7, pc}

0800eac8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b082      	sub	sp, #8
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
 800ead0:	460b      	mov	r3, r1
 800ead2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eada:	78fa      	ldrb	r2, [r7, #3]
 800eadc:	4611      	mov	r1, r2
 800eade:	4618      	mov	r0, r3
 800eae0:	f7fe fcd7 	bl	800d492 <USBD_LL_IsoINIncomplete>
}
 800eae4:	bf00      	nop
 800eae6:	3708      	adds	r7, #8
 800eae8:	46bd      	mov	sp, r7
 800eaea:	bd80      	pop	{r7, pc}

0800eaec <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b082      	sub	sp, #8
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eafa:	4618      	mov	r0, r3
 800eafc:	f7fe fd2d 	bl	800d55a <USBD_LL_DevConnected>
}
 800eb00:	bf00      	nop
 800eb02:	3708      	adds	r7, #8
 800eb04:	46bd      	mov	sp, r7
 800eb06:	bd80      	pop	{r7, pc}

0800eb08 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	b082      	sub	sp, #8
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eb16:	4618      	mov	r0, r3
 800eb18:	f7fe fd2a 	bl	800d570 <USBD_LL_DevDisconnected>
}
 800eb1c:	bf00      	nop
 800eb1e:	3708      	adds	r7, #8
 800eb20:	46bd      	mov	sp, r7
 800eb22:	bd80      	pop	{r7, pc}

0800eb24 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800eb24:	b580      	push	{r7, lr}
 800eb26:	b082      	sub	sp, #8
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	781b      	ldrb	r3, [r3, #0]
 800eb30:	2b01      	cmp	r3, #1
 800eb32:	d140      	bne.n	800ebb6 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800eb34:	4a22      	ldr	r2, [pc, #136]	; (800ebc0 <USBD_LL_Init+0x9c>)
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	4a20      	ldr	r2, [pc, #128]	; (800ebc0 <USBD_LL_Init+0x9c>)
 800eb40:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800eb44:	4b1e      	ldr	r3, [pc, #120]	; (800ebc0 <USBD_LL_Init+0x9c>)
 800eb46:	4a1f      	ldr	r2, [pc, #124]	; (800ebc4 <USBD_LL_Init+0xa0>)
 800eb48:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 800eb4a:	4b1d      	ldr	r3, [pc, #116]	; (800ebc0 <USBD_LL_Init+0x9c>)
 800eb4c:	2206      	movs	r2, #6
 800eb4e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800eb50:	4b1b      	ldr	r3, [pc, #108]	; (800ebc0 <USBD_LL_Init+0x9c>)
 800eb52:	2202      	movs	r2, #2
 800eb54:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800eb56:	4b1a      	ldr	r3, [pc, #104]	; (800ebc0 <USBD_LL_Init+0x9c>)
 800eb58:	2200      	movs	r2, #0
 800eb5a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800eb5c:	4b18      	ldr	r3, [pc, #96]	; (800ebc0 <USBD_LL_Init+0x9c>)
 800eb5e:	2202      	movs	r2, #2
 800eb60:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800eb62:	4b17      	ldr	r3, [pc, #92]	; (800ebc0 <USBD_LL_Init+0x9c>)
 800eb64:	2200      	movs	r2, #0
 800eb66:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800eb68:	4b15      	ldr	r3, [pc, #84]	; (800ebc0 <USBD_LL_Init+0x9c>)
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800eb6e:	4b14      	ldr	r3, [pc, #80]	; (800ebc0 <USBD_LL_Init+0x9c>)
 800eb70:	2200      	movs	r2, #0
 800eb72:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800eb74:	4b12      	ldr	r3, [pc, #72]	; (800ebc0 <USBD_LL_Init+0x9c>)
 800eb76:	2200      	movs	r2, #0
 800eb78:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800eb7a:	4b11      	ldr	r3, [pc, #68]	; (800ebc0 <USBD_LL_Init+0x9c>)
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800eb80:	4b0f      	ldr	r3, [pc, #60]	; (800ebc0 <USBD_LL_Init+0x9c>)
 800eb82:	2200      	movs	r2, #0
 800eb84:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800eb86:	480e      	ldr	r0, [pc, #56]	; (800ebc0 <USBD_LL_Init+0x9c>)
 800eb88:	f7f5 fe41 	bl	800480e <HAL_PCD_Init>
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d001      	beq.n	800eb96 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800eb92:	f7f2 faaf 	bl	80010f4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800eb96:	f44f 7100 	mov.w	r1, #512	; 0x200
 800eb9a:	4809      	ldr	r0, [pc, #36]	; (800ebc0 <USBD_LL_Init+0x9c>)
 800eb9c:	f7f7 f897 	bl	8005cce <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800eba0:	2280      	movs	r2, #128	; 0x80
 800eba2:	2100      	movs	r1, #0
 800eba4:	4806      	ldr	r0, [pc, #24]	; (800ebc0 <USBD_LL_Init+0x9c>)
 800eba6:	f7f7 f84b 	bl	8005c40 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800ebaa:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800ebae:	2101      	movs	r1, #1
 800ebb0:	4803      	ldr	r0, [pc, #12]	; (800ebc0 <USBD_LL_Init+0x9c>)
 800ebb2:	f7f7 f845 	bl	8005c40 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ebb6:	2300      	movs	r3, #0
}
 800ebb8:	4618      	mov	r0, r3
 800ebba:	3708      	adds	r7, #8
 800ebbc:	46bd      	mov	sp, r7
 800ebbe:	bd80      	pop	{r7, pc}
 800ebc0:	20005998 	.word	0x20005998
 800ebc4:	40040000 	.word	0x40040000

0800ebc8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b084      	sub	sp, #16
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ebd0:	2300      	movs	r3, #0
 800ebd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ebde:	4618      	mov	r0, r3
 800ebe0:	f7f5 ff32 	bl	8004a48 <HAL_PCD_Start>
 800ebe4:	4603      	mov	r3, r0
 800ebe6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ebe8:	7bfb      	ldrb	r3, [r7, #15]
 800ebea:	4618      	mov	r0, r3
 800ebec:	f000 f942 	bl	800ee74 <USBD_Get_USB_Status>
 800ebf0:	4603      	mov	r3, r0
 800ebf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ebf4:	7bbb      	ldrb	r3, [r7, #14]
}
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	3710      	adds	r7, #16
 800ebfa:	46bd      	mov	sp, r7
 800ebfc:	bd80      	pop	{r7, pc}

0800ebfe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ebfe:	b580      	push	{r7, lr}
 800ec00:	b084      	sub	sp, #16
 800ec02:	af00      	add	r7, sp, #0
 800ec04:	6078      	str	r0, [r7, #4]
 800ec06:	4608      	mov	r0, r1
 800ec08:	4611      	mov	r1, r2
 800ec0a:	461a      	mov	r2, r3
 800ec0c:	4603      	mov	r3, r0
 800ec0e:	70fb      	strb	r3, [r7, #3]
 800ec10:	460b      	mov	r3, r1
 800ec12:	70bb      	strb	r3, [r7, #2]
 800ec14:	4613      	mov	r3, r2
 800ec16:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec18:	2300      	movs	r3, #0
 800ec1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec1c:	2300      	movs	r3, #0
 800ec1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ec26:	78bb      	ldrb	r3, [r7, #2]
 800ec28:	883a      	ldrh	r2, [r7, #0]
 800ec2a:	78f9      	ldrb	r1, [r7, #3]
 800ec2c:	f7f6 fc03 	bl	8005436 <HAL_PCD_EP_Open>
 800ec30:	4603      	mov	r3, r0
 800ec32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec34:	7bfb      	ldrb	r3, [r7, #15]
 800ec36:	4618      	mov	r0, r3
 800ec38:	f000 f91c 	bl	800ee74 <USBD_Get_USB_Status>
 800ec3c:	4603      	mov	r3, r0
 800ec3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec40:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec42:	4618      	mov	r0, r3
 800ec44:	3710      	adds	r7, #16
 800ec46:	46bd      	mov	sp, r7
 800ec48:	bd80      	pop	{r7, pc}

0800ec4a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec4a:	b580      	push	{r7, lr}
 800ec4c:	b084      	sub	sp, #16
 800ec4e:	af00      	add	r7, sp, #0
 800ec50:	6078      	str	r0, [r7, #4]
 800ec52:	460b      	mov	r3, r1
 800ec54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec56:	2300      	movs	r3, #0
 800ec58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ec64:	78fa      	ldrb	r2, [r7, #3]
 800ec66:	4611      	mov	r1, r2
 800ec68:	4618      	mov	r0, r3
 800ec6a:	f7f6 fc4c 	bl	8005506 <HAL_PCD_EP_Close>
 800ec6e:	4603      	mov	r3, r0
 800ec70:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ec72:	7bfb      	ldrb	r3, [r7, #15]
 800ec74:	4618      	mov	r0, r3
 800ec76:	f000 f8fd 	bl	800ee74 <USBD_Get_USB_Status>
 800ec7a:	4603      	mov	r3, r0
 800ec7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ec7e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ec80:	4618      	mov	r0, r3
 800ec82:	3710      	adds	r7, #16
 800ec84:	46bd      	mov	sp, r7
 800ec86:	bd80      	pop	{r7, pc}

0800ec88 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ec88:	b580      	push	{r7, lr}
 800ec8a:	b084      	sub	sp, #16
 800ec8c:	af00      	add	r7, sp, #0
 800ec8e:	6078      	str	r0, [r7, #4]
 800ec90:	460b      	mov	r3, r1
 800ec92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ec94:	2300      	movs	r3, #0
 800ec96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ec98:	2300      	movs	r3, #0
 800ec9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800eca2:	78fa      	ldrb	r2, [r7, #3]
 800eca4:	4611      	mov	r1, r2
 800eca6:	4618      	mov	r0, r3
 800eca8:	f7f6 fd24 	bl	80056f4 <HAL_PCD_EP_SetStall>
 800ecac:	4603      	mov	r3, r0
 800ecae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ecb0:	7bfb      	ldrb	r3, [r7, #15]
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	f000 f8de 	bl	800ee74 <USBD_Get_USB_Status>
 800ecb8:	4603      	mov	r3, r0
 800ecba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ecbc:	7bbb      	ldrb	r3, [r7, #14]
}
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	3710      	adds	r7, #16
 800ecc2:	46bd      	mov	sp, r7
 800ecc4:	bd80      	pop	{r7, pc}

0800ecc6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ecc6:	b580      	push	{r7, lr}
 800ecc8:	b084      	sub	sp, #16
 800ecca:	af00      	add	r7, sp, #0
 800eccc:	6078      	str	r0, [r7, #4]
 800ecce:	460b      	mov	r3, r1
 800ecd0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ecd2:	2300      	movs	r3, #0
 800ecd4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ecd6:	2300      	movs	r3, #0
 800ecd8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ece0:	78fa      	ldrb	r2, [r7, #3]
 800ece2:	4611      	mov	r1, r2
 800ece4:	4618      	mov	r0, r3
 800ece6:	f7f6 fd69 	bl	80057bc <HAL_PCD_EP_ClrStall>
 800ecea:	4603      	mov	r3, r0
 800ecec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ecee:	7bfb      	ldrb	r3, [r7, #15]
 800ecf0:	4618      	mov	r0, r3
 800ecf2:	f000 f8bf 	bl	800ee74 <USBD_Get_USB_Status>
 800ecf6:	4603      	mov	r3, r0
 800ecf8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ecfa:	7bbb      	ldrb	r3, [r7, #14]
}
 800ecfc:	4618      	mov	r0, r3
 800ecfe:	3710      	adds	r7, #16
 800ed00:	46bd      	mov	sp, r7
 800ed02:	bd80      	pop	{r7, pc}

0800ed04 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ed04:	b480      	push	{r7}
 800ed06:	b085      	sub	sp, #20
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	6078      	str	r0, [r7, #4]
 800ed0c:	460b      	mov	r3, r1
 800ed0e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ed16:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ed18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	da0b      	bge.n	800ed38 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ed20:	78fb      	ldrb	r3, [r7, #3]
 800ed22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ed26:	68f9      	ldr	r1, [r7, #12]
 800ed28:	4613      	mov	r3, r2
 800ed2a:	00db      	lsls	r3, r3, #3
 800ed2c:	4413      	add	r3, r2
 800ed2e:	009b      	lsls	r3, r3, #2
 800ed30:	440b      	add	r3, r1
 800ed32:	333e      	adds	r3, #62	; 0x3e
 800ed34:	781b      	ldrb	r3, [r3, #0]
 800ed36:	e00b      	b.n	800ed50 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ed38:	78fb      	ldrb	r3, [r7, #3]
 800ed3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ed3e:	68f9      	ldr	r1, [r7, #12]
 800ed40:	4613      	mov	r3, r2
 800ed42:	00db      	lsls	r3, r3, #3
 800ed44:	4413      	add	r3, r2
 800ed46:	009b      	lsls	r3, r3, #2
 800ed48:	440b      	add	r3, r1
 800ed4a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800ed4e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ed50:	4618      	mov	r0, r3
 800ed52:	3714      	adds	r7, #20
 800ed54:	46bd      	mov	sp, r7
 800ed56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed5a:	4770      	bx	lr

0800ed5c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	b084      	sub	sp, #16
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	6078      	str	r0, [r7, #4]
 800ed64:	460b      	mov	r3, r1
 800ed66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed68:	2300      	movs	r3, #0
 800ed6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ed76:	78fa      	ldrb	r2, [r7, #3]
 800ed78:	4611      	mov	r1, r2
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	f7f6 fb36 	bl	80053ec <HAL_PCD_SetAddress>
 800ed80:	4603      	mov	r3, r0
 800ed82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed84:	7bfb      	ldrb	r3, [r7, #15]
 800ed86:	4618      	mov	r0, r3
 800ed88:	f000 f874 	bl	800ee74 <USBD_Get_USB_Status>
 800ed8c:	4603      	mov	r3, r0
 800ed8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed90:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed92:	4618      	mov	r0, r3
 800ed94:	3710      	adds	r7, #16
 800ed96:	46bd      	mov	sp, r7
 800ed98:	bd80      	pop	{r7, pc}

0800ed9a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ed9a:	b580      	push	{r7, lr}
 800ed9c:	b086      	sub	sp, #24
 800ed9e:	af00      	add	r7, sp, #0
 800eda0:	60f8      	str	r0, [r7, #12]
 800eda2:	607a      	str	r2, [r7, #4]
 800eda4:	603b      	str	r3, [r7, #0]
 800eda6:	460b      	mov	r3, r1
 800eda8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800edaa:	2300      	movs	r3, #0
 800edac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800edae:	2300      	movs	r3, #0
 800edb0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800edb8:	7af9      	ldrb	r1, [r7, #11]
 800edba:	683b      	ldr	r3, [r7, #0]
 800edbc:	687a      	ldr	r2, [r7, #4]
 800edbe:	f7f6 fc4f 	bl	8005660 <HAL_PCD_EP_Transmit>
 800edc2:	4603      	mov	r3, r0
 800edc4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800edc6:	7dfb      	ldrb	r3, [r7, #23]
 800edc8:	4618      	mov	r0, r3
 800edca:	f000 f853 	bl	800ee74 <USBD_Get_USB_Status>
 800edce:	4603      	mov	r3, r0
 800edd0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800edd2:	7dbb      	ldrb	r3, [r7, #22]
}
 800edd4:	4618      	mov	r0, r3
 800edd6:	3718      	adds	r7, #24
 800edd8:	46bd      	mov	sp, r7
 800edda:	bd80      	pop	{r7, pc}

0800eddc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800eddc:	b580      	push	{r7, lr}
 800edde:	b086      	sub	sp, #24
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	60f8      	str	r0, [r7, #12]
 800ede4:	607a      	str	r2, [r7, #4]
 800ede6:	603b      	str	r3, [r7, #0]
 800ede8:	460b      	mov	r3, r1
 800edea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800edec:	2300      	movs	r3, #0
 800edee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800edf0:	2300      	movs	r3, #0
 800edf2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800edfa:	7af9      	ldrb	r1, [r7, #11]
 800edfc:	683b      	ldr	r3, [r7, #0]
 800edfe:	687a      	ldr	r2, [r7, #4]
 800ee00:	f7f6 fbcb 	bl	800559a <HAL_PCD_EP_Receive>
 800ee04:	4603      	mov	r3, r0
 800ee06:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ee08:	7dfb      	ldrb	r3, [r7, #23]
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	f000 f832 	bl	800ee74 <USBD_Get_USB_Status>
 800ee10:	4603      	mov	r3, r0
 800ee12:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ee14:	7dbb      	ldrb	r3, [r7, #22]
}
 800ee16:	4618      	mov	r0, r3
 800ee18:	3718      	adds	r7, #24
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	bd80      	pop	{r7, pc}

0800ee1e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ee1e:	b580      	push	{r7, lr}
 800ee20:	b082      	sub	sp, #8
 800ee22:	af00      	add	r7, sp, #0
 800ee24:	6078      	str	r0, [r7, #4]
 800ee26:	460b      	mov	r3, r1
 800ee28:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ee30:	78fa      	ldrb	r2, [r7, #3]
 800ee32:	4611      	mov	r1, r2
 800ee34:	4618      	mov	r0, r3
 800ee36:	f7f6 fbfb 	bl	8005630 <HAL_PCD_EP_GetRxCount>
 800ee3a:	4603      	mov	r3, r0
}
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	3708      	adds	r7, #8
 800ee40:	46bd      	mov	sp, r7
 800ee42:	bd80      	pop	{r7, pc}

0800ee44 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ee44:	b480      	push	{r7}
 800ee46:	b083      	sub	sp, #12
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ee4c:	4b03      	ldr	r3, [pc, #12]	; (800ee5c <USBD_static_malloc+0x18>)
}
 800ee4e:	4618      	mov	r0, r3
 800ee50:	370c      	adds	r7, #12
 800ee52:	46bd      	mov	sp, r7
 800ee54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee58:	4770      	bx	lr
 800ee5a:	bf00      	nop
 800ee5c:	20005ea4 	.word	0x20005ea4

0800ee60 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ee60:	b480      	push	{r7}
 800ee62:	b083      	sub	sp, #12
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	6078      	str	r0, [r7, #4]

}
 800ee68:	bf00      	nop
 800ee6a:	370c      	adds	r7, #12
 800ee6c:	46bd      	mov	sp, r7
 800ee6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee72:	4770      	bx	lr

0800ee74 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ee74:	b480      	push	{r7}
 800ee76:	b085      	sub	sp, #20
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	4603      	mov	r3, r0
 800ee7c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee7e:	2300      	movs	r3, #0
 800ee80:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ee82:	79fb      	ldrb	r3, [r7, #7]
 800ee84:	2b03      	cmp	r3, #3
 800ee86:	d817      	bhi.n	800eeb8 <USBD_Get_USB_Status+0x44>
 800ee88:	a201      	add	r2, pc, #4	; (adr r2, 800ee90 <USBD_Get_USB_Status+0x1c>)
 800ee8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee8e:	bf00      	nop
 800ee90:	0800eea1 	.word	0x0800eea1
 800ee94:	0800eea7 	.word	0x0800eea7
 800ee98:	0800eead 	.word	0x0800eead
 800ee9c:	0800eeb3 	.word	0x0800eeb3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800eea0:	2300      	movs	r3, #0
 800eea2:	73fb      	strb	r3, [r7, #15]
    break;
 800eea4:	e00b      	b.n	800eebe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800eea6:	2303      	movs	r3, #3
 800eea8:	73fb      	strb	r3, [r7, #15]
    break;
 800eeaa:	e008      	b.n	800eebe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800eeac:	2301      	movs	r3, #1
 800eeae:	73fb      	strb	r3, [r7, #15]
    break;
 800eeb0:	e005      	b.n	800eebe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800eeb2:	2303      	movs	r3, #3
 800eeb4:	73fb      	strb	r3, [r7, #15]
    break;
 800eeb6:	e002      	b.n	800eebe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800eeb8:	2303      	movs	r3, #3
 800eeba:	73fb      	strb	r3, [r7, #15]
    break;
 800eebc:	bf00      	nop
  }
  return usb_status;
 800eebe:	7bfb      	ldrb	r3, [r7, #15]
}
 800eec0:	4618      	mov	r0, r3
 800eec2:	3714      	adds	r7, #20
 800eec4:	46bd      	mov	sp, r7
 800eec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeca:	4770      	bx	lr

0800eecc <__errno>:
 800eecc:	4b01      	ldr	r3, [pc, #4]	; (800eed4 <__errno+0x8>)
 800eece:	6818      	ldr	r0, [r3, #0]
 800eed0:	4770      	bx	lr
 800eed2:	bf00      	nop
 800eed4:	2000017c 	.word	0x2000017c

0800eed8 <__libc_init_array>:
 800eed8:	b570      	push	{r4, r5, r6, lr}
 800eeda:	4d0d      	ldr	r5, [pc, #52]	; (800ef10 <__libc_init_array+0x38>)
 800eedc:	4c0d      	ldr	r4, [pc, #52]	; (800ef14 <__libc_init_array+0x3c>)
 800eede:	1b64      	subs	r4, r4, r5
 800eee0:	10a4      	asrs	r4, r4, #2
 800eee2:	2600      	movs	r6, #0
 800eee4:	42a6      	cmp	r6, r4
 800eee6:	d109      	bne.n	800eefc <__libc_init_array+0x24>
 800eee8:	4d0b      	ldr	r5, [pc, #44]	; (800ef18 <__libc_init_array+0x40>)
 800eeea:	4c0c      	ldr	r4, [pc, #48]	; (800ef1c <__libc_init_array+0x44>)
 800eeec:	f000 fc8e 	bl	800f80c <_init>
 800eef0:	1b64      	subs	r4, r4, r5
 800eef2:	10a4      	asrs	r4, r4, #2
 800eef4:	2600      	movs	r6, #0
 800eef6:	42a6      	cmp	r6, r4
 800eef8:	d105      	bne.n	800ef06 <__libc_init_array+0x2e>
 800eefa:	bd70      	pop	{r4, r5, r6, pc}
 800eefc:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef00:	4798      	blx	r3
 800ef02:	3601      	adds	r6, #1
 800ef04:	e7ee      	b.n	800eee4 <__libc_init_array+0xc>
 800ef06:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef0a:	4798      	blx	r3
 800ef0c:	3601      	adds	r6, #1
 800ef0e:	e7f2      	b.n	800eef6 <__libc_init_array+0x1e>
 800ef10:	08011418 	.word	0x08011418
 800ef14:	08011418 	.word	0x08011418
 800ef18:	08011418 	.word	0x08011418
 800ef1c:	0801141c 	.word	0x0801141c

0800ef20 <memcpy>:
 800ef20:	440a      	add	r2, r1
 800ef22:	4291      	cmp	r1, r2
 800ef24:	f100 33ff 	add.w	r3, r0, #4294967295
 800ef28:	d100      	bne.n	800ef2c <memcpy+0xc>
 800ef2a:	4770      	bx	lr
 800ef2c:	b510      	push	{r4, lr}
 800ef2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef32:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ef36:	4291      	cmp	r1, r2
 800ef38:	d1f9      	bne.n	800ef2e <memcpy+0xe>
 800ef3a:	bd10      	pop	{r4, pc}

0800ef3c <memset>:
 800ef3c:	4402      	add	r2, r0
 800ef3e:	4603      	mov	r3, r0
 800ef40:	4293      	cmp	r3, r2
 800ef42:	d100      	bne.n	800ef46 <memset+0xa>
 800ef44:	4770      	bx	lr
 800ef46:	f803 1b01 	strb.w	r1, [r3], #1
 800ef4a:	e7f9      	b.n	800ef40 <memset+0x4>

0800ef4c <siprintf>:
 800ef4c:	b40e      	push	{r1, r2, r3}
 800ef4e:	b500      	push	{lr}
 800ef50:	b09c      	sub	sp, #112	; 0x70
 800ef52:	ab1d      	add	r3, sp, #116	; 0x74
 800ef54:	9002      	str	r0, [sp, #8]
 800ef56:	9006      	str	r0, [sp, #24]
 800ef58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ef5c:	4809      	ldr	r0, [pc, #36]	; (800ef84 <siprintf+0x38>)
 800ef5e:	9107      	str	r1, [sp, #28]
 800ef60:	9104      	str	r1, [sp, #16]
 800ef62:	4909      	ldr	r1, [pc, #36]	; (800ef88 <siprintf+0x3c>)
 800ef64:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef68:	9105      	str	r1, [sp, #20]
 800ef6a:	6800      	ldr	r0, [r0, #0]
 800ef6c:	9301      	str	r3, [sp, #4]
 800ef6e:	a902      	add	r1, sp, #8
 800ef70:	f000 f868 	bl	800f044 <_svfiprintf_r>
 800ef74:	9b02      	ldr	r3, [sp, #8]
 800ef76:	2200      	movs	r2, #0
 800ef78:	701a      	strb	r2, [r3, #0]
 800ef7a:	b01c      	add	sp, #112	; 0x70
 800ef7c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ef80:	b003      	add	sp, #12
 800ef82:	4770      	bx	lr
 800ef84:	2000017c 	.word	0x2000017c
 800ef88:	ffff0208 	.word	0xffff0208

0800ef8c <__ssputs_r>:
 800ef8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef90:	688e      	ldr	r6, [r1, #8]
 800ef92:	429e      	cmp	r6, r3
 800ef94:	4682      	mov	sl, r0
 800ef96:	460c      	mov	r4, r1
 800ef98:	4690      	mov	r8, r2
 800ef9a:	461f      	mov	r7, r3
 800ef9c:	d838      	bhi.n	800f010 <__ssputs_r+0x84>
 800ef9e:	898a      	ldrh	r2, [r1, #12]
 800efa0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800efa4:	d032      	beq.n	800f00c <__ssputs_r+0x80>
 800efa6:	6825      	ldr	r5, [r4, #0]
 800efa8:	6909      	ldr	r1, [r1, #16]
 800efaa:	eba5 0901 	sub.w	r9, r5, r1
 800efae:	6965      	ldr	r5, [r4, #20]
 800efb0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800efb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800efb8:	3301      	adds	r3, #1
 800efba:	444b      	add	r3, r9
 800efbc:	106d      	asrs	r5, r5, #1
 800efbe:	429d      	cmp	r5, r3
 800efc0:	bf38      	it	cc
 800efc2:	461d      	movcc	r5, r3
 800efc4:	0553      	lsls	r3, r2, #21
 800efc6:	d531      	bpl.n	800f02c <__ssputs_r+0xa0>
 800efc8:	4629      	mov	r1, r5
 800efca:	f000 fb55 	bl	800f678 <_malloc_r>
 800efce:	4606      	mov	r6, r0
 800efd0:	b950      	cbnz	r0, 800efe8 <__ssputs_r+0x5c>
 800efd2:	230c      	movs	r3, #12
 800efd4:	f8ca 3000 	str.w	r3, [sl]
 800efd8:	89a3      	ldrh	r3, [r4, #12]
 800efda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800efde:	81a3      	strh	r3, [r4, #12]
 800efe0:	f04f 30ff 	mov.w	r0, #4294967295
 800efe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efe8:	6921      	ldr	r1, [r4, #16]
 800efea:	464a      	mov	r2, r9
 800efec:	f7ff ff98 	bl	800ef20 <memcpy>
 800eff0:	89a3      	ldrh	r3, [r4, #12]
 800eff2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800eff6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800effa:	81a3      	strh	r3, [r4, #12]
 800effc:	6126      	str	r6, [r4, #16]
 800effe:	6165      	str	r5, [r4, #20]
 800f000:	444e      	add	r6, r9
 800f002:	eba5 0509 	sub.w	r5, r5, r9
 800f006:	6026      	str	r6, [r4, #0]
 800f008:	60a5      	str	r5, [r4, #8]
 800f00a:	463e      	mov	r6, r7
 800f00c:	42be      	cmp	r6, r7
 800f00e:	d900      	bls.n	800f012 <__ssputs_r+0x86>
 800f010:	463e      	mov	r6, r7
 800f012:	6820      	ldr	r0, [r4, #0]
 800f014:	4632      	mov	r2, r6
 800f016:	4641      	mov	r1, r8
 800f018:	f000 faa8 	bl	800f56c <memmove>
 800f01c:	68a3      	ldr	r3, [r4, #8]
 800f01e:	1b9b      	subs	r3, r3, r6
 800f020:	60a3      	str	r3, [r4, #8]
 800f022:	6823      	ldr	r3, [r4, #0]
 800f024:	4433      	add	r3, r6
 800f026:	6023      	str	r3, [r4, #0]
 800f028:	2000      	movs	r0, #0
 800f02a:	e7db      	b.n	800efe4 <__ssputs_r+0x58>
 800f02c:	462a      	mov	r2, r5
 800f02e:	f000 fb97 	bl	800f760 <_realloc_r>
 800f032:	4606      	mov	r6, r0
 800f034:	2800      	cmp	r0, #0
 800f036:	d1e1      	bne.n	800effc <__ssputs_r+0x70>
 800f038:	6921      	ldr	r1, [r4, #16]
 800f03a:	4650      	mov	r0, sl
 800f03c:	f000 fab0 	bl	800f5a0 <_free_r>
 800f040:	e7c7      	b.n	800efd2 <__ssputs_r+0x46>
	...

0800f044 <_svfiprintf_r>:
 800f044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f048:	4698      	mov	r8, r3
 800f04a:	898b      	ldrh	r3, [r1, #12]
 800f04c:	061b      	lsls	r3, r3, #24
 800f04e:	b09d      	sub	sp, #116	; 0x74
 800f050:	4607      	mov	r7, r0
 800f052:	460d      	mov	r5, r1
 800f054:	4614      	mov	r4, r2
 800f056:	d50e      	bpl.n	800f076 <_svfiprintf_r+0x32>
 800f058:	690b      	ldr	r3, [r1, #16]
 800f05a:	b963      	cbnz	r3, 800f076 <_svfiprintf_r+0x32>
 800f05c:	2140      	movs	r1, #64	; 0x40
 800f05e:	f000 fb0b 	bl	800f678 <_malloc_r>
 800f062:	6028      	str	r0, [r5, #0]
 800f064:	6128      	str	r0, [r5, #16]
 800f066:	b920      	cbnz	r0, 800f072 <_svfiprintf_r+0x2e>
 800f068:	230c      	movs	r3, #12
 800f06a:	603b      	str	r3, [r7, #0]
 800f06c:	f04f 30ff 	mov.w	r0, #4294967295
 800f070:	e0d1      	b.n	800f216 <_svfiprintf_r+0x1d2>
 800f072:	2340      	movs	r3, #64	; 0x40
 800f074:	616b      	str	r3, [r5, #20]
 800f076:	2300      	movs	r3, #0
 800f078:	9309      	str	r3, [sp, #36]	; 0x24
 800f07a:	2320      	movs	r3, #32
 800f07c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f080:	f8cd 800c 	str.w	r8, [sp, #12]
 800f084:	2330      	movs	r3, #48	; 0x30
 800f086:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f230 <_svfiprintf_r+0x1ec>
 800f08a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f08e:	f04f 0901 	mov.w	r9, #1
 800f092:	4623      	mov	r3, r4
 800f094:	469a      	mov	sl, r3
 800f096:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f09a:	b10a      	cbz	r2, 800f0a0 <_svfiprintf_r+0x5c>
 800f09c:	2a25      	cmp	r2, #37	; 0x25
 800f09e:	d1f9      	bne.n	800f094 <_svfiprintf_r+0x50>
 800f0a0:	ebba 0b04 	subs.w	fp, sl, r4
 800f0a4:	d00b      	beq.n	800f0be <_svfiprintf_r+0x7a>
 800f0a6:	465b      	mov	r3, fp
 800f0a8:	4622      	mov	r2, r4
 800f0aa:	4629      	mov	r1, r5
 800f0ac:	4638      	mov	r0, r7
 800f0ae:	f7ff ff6d 	bl	800ef8c <__ssputs_r>
 800f0b2:	3001      	adds	r0, #1
 800f0b4:	f000 80aa 	beq.w	800f20c <_svfiprintf_r+0x1c8>
 800f0b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f0ba:	445a      	add	r2, fp
 800f0bc:	9209      	str	r2, [sp, #36]	; 0x24
 800f0be:	f89a 3000 	ldrb.w	r3, [sl]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	f000 80a2 	beq.w	800f20c <_svfiprintf_r+0x1c8>
 800f0c8:	2300      	movs	r3, #0
 800f0ca:	f04f 32ff 	mov.w	r2, #4294967295
 800f0ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f0d2:	f10a 0a01 	add.w	sl, sl, #1
 800f0d6:	9304      	str	r3, [sp, #16]
 800f0d8:	9307      	str	r3, [sp, #28]
 800f0da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f0de:	931a      	str	r3, [sp, #104]	; 0x68
 800f0e0:	4654      	mov	r4, sl
 800f0e2:	2205      	movs	r2, #5
 800f0e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f0e8:	4851      	ldr	r0, [pc, #324]	; (800f230 <_svfiprintf_r+0x1ec>)
 800f0ea:	f7f1 f889 	bl	8000200 <memchr>
 800f0ee:	9a04      	ldr	r2, [sp, #16]
 800f0f0:	b9d8      	cbnz	r0, 800f12a <_svfiprintf_r+0xe6>
 800f0f2:	06d0      	lsls	r0, r2, #27
 800f0f4:	bf44      	itt	mi
 800f0f6:	2320      	movmi	r3, #32
 800f0f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f0fc:	0711      	lsls	r1, r2, #28
 800f0fe:	bf44      	itt	mi
 800f100:	232b      	movmi	r3, #43	; 0x2b
 800f102:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f106:	f89a 3000 	ldrb.w	r3, [sl]
 800f10a:	2b2a      	cmp	r3, #42	; 0x2a
 800f10c:	d015      	beq.n	800f13a <_svfiprintf_r+0xf6>
 800f10e:	9a07      	ldr	r2, [sp, #28]
 800f110:	4654      	mov	r4, sl
 800f112:	2000      	movs	r0, #0
 800f114:	f04f 0c0a 	mov.w	ip, #10
 800f118:	4621      	mov	r1, r4
 800f11a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f11e:	3b30      	subs	r3, #48	; 0x30
 800f120:	2b09      	cmp	r3, #9
 800f122:	d94e      	bls.n	800f1c2 <_svfiprintf_r+0x17e>
 800f124:	b1b0      	cbz	r0, 800f154 <_svfiprintf_r+0x110>
 800f126:	9207      	str	r2, [sp, #28]
 800f128:	e014      	b.n	800f154 <_svfiprintf_r+0x110>
 800f12a:	eba0 0308 	sub.w	r3, r0, r8
 800f12e:	fa09 f303 	lsl.w	r3, r9, r3
 800f132:	4313      	orrs	r3, r2
 800f134:	9304      	str	r3, [sp, #16]
 800f136:	46a2      	mov	sl, r4
 800f138:	e7d2      	b.n	800f0e0 <_svfiprintf_r+0x9c>
 800f13a:	9b03      	ldr	r3, [sp, #12]
 800f13c:	1d19      	adds	r1, r3, #4
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	9103      	str	r1, [sp, #12]
 800f142:	2b00      	cmp	r3, #0
 800f144:	bfbb      	ittet	lt
 800f146:	425b      	neglt	r3, r3
 800f148:	f042 0202 	orrlt.w	r2, r2, #2
 800f14c:	9307      	strge	r3, [sp, #28]
 800f14e:	9307      	strlt	r3, [sp, #28]
 800f150:	bfb8      	it	lt
 800f152:	9204      	strlt	r2, [sp, #16]
 800f154:	7823      	ldrb	r3, [r4, #0]
 800f156:	2b2e      	cmp	r3, #46	; 0x2e
 800f158:	d10c      	bne.n	800f174 <_svfiprintf_r+0x130>
 800f15a:	7863      	ldrb	r3, [r4, #1]
 800f15c:	2b2a      	cmp	r3, #42	; 0x2a
 800f15e:	d135      	bne.n	800f1cc <_svfiprintf_r+0x188>
 800f160:	9b03      	ldr	r3, [sp, #12]
 800f162:	1d1a      	adds	r2, r3, #4
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	9203      	str	r2, [sp, #12]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	bfb8      	it	lt
 800f16c:	f04f 33ff 	movlt.w	r3, #4294967295
 800f170:	3402      	adds	r4, #2
 800f172:	9305      	str	r3, [sp, #20]
 800f174:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f240 <_svfiprintf_r+0x1fc>
 800f178:	7821      	ldrb	r1, [r4, #0]
 800f17a:	2203      	movs	r2, #3
 800f17c:	4650      	mov	r0, sl
 800f17e:	f7f1 f83f 	bl	8000200 <memchr>
 800f182:	b140      	cbz	r0, 800f196 <_svfiprintf_r+0x152>
 800f184:	2340      	movs	r3, #64	; 0x40
 800f186:	eba0 000a 	sub.w	r0, r0, sl
 800f18a:	fa03 f000 	lsl.w	r0, r3, r0
 800f18e:	9b04      	ldr	r3, [sp, #16]
 800f190:	4303      	orrs	r3, r0
 800f192:	3401      	adds	r4, #1
 800f194:	9304      	str	r3, [sp, #16]
 800f196:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f19a:	4826      	ldr	r0, [pc, #152]	; (800f234 <_svfiprintf_r+0x1f0>)
 800f19c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f1a0:	2206      	movs	r2, #6
 800f1a2:	f7f1 f82d 	bl	8000200 <memchr>
 800f1a6:	2800      	cmp	r0, #0
 800f1a8:	d038      	beq.n	800f21c <_svfiprintf_r+0x1d8>
 800f1aa:	4b23      	ldr	r3, [pc, #140]	; (800f238 <_svfiprintf_r+0x1f4>)
 800f1ac:	bb1b      	cbnz	r3, 800f1f6 <_svfiprintf_r+0x1b2>
 800f1ae:	9b03      	ldr	r3, [sp, #12]
 800f1b0:	3307      	adds	r3, #7
 800f1b2:	f023 0307 	bic.w	r3, r3, #7
 800f1b6:	3308      	adds	r3, #8
 800f1b8:	9303      	str	r3, [sp, #12]
 800f1ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1bc:	4433      	add	r3, r6
 800f1be:	9309      	str	r3, [sp, #36]	; 0x24
 800f1c0:	e767      	b.n	800f092 <_svfiprintf_r+0x4e>
 800f1c2:	fb0c 3202 	mla	r2, ip, r2, r3
 800f1c6:	460c      	mov	r4, r1
 800f1c8:	2001      	movs	r0, #1
 800f1ca:	e7a5      	b.n	800f118 <_svfiprintf_r+0xd4>
 800f1cc:	2300      	movs	r3, #0
 800f1ce:	3401      	adds	r4, #1
 800f1d0:	9305      	str	r3, [sp, #20]
 800f1d2:	4619      	mov	r1, r3
 800f1d4:	f04f 0c0a 	mov.w	ip, #10
 800f1d8:	4620      	mov	r0, r4
 800f1da:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f1de:	3a30      	subs	r2, #48	; 0x30
 800f1e0:	2a09      	cmp	r2, #9
 800f1e2:	d903      	bls.n	800f1ec <_svfiprintf_r+0x1a8>
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d0c5      	beq.n	800f174 <_svfiprintf_r+0x130>
 800f1e8:	9105      	str	r1, [sp, #20]
 800f1ea:	e7c3      	b.n	800f174 <_svfiprintf_r+0x130>
 800f1ec:	fb0c 2101 	mla	r1, ip, r1, r2
 800f1f0:	4604      	mov	r4, r0
 800f1f2:	2301      	movs	r3, #1
 800f1f4:	e7f0      	b.n	800f1d8 <_svfiprintf_r+0x194>
 800f1f6:	ab03      	add	r3, sp, #12
 800f1f8:	9300      	str	r3, [sp, #0]
 800f1fa:	462a      	mov	r2, r5
 800f1fc:	4b0f      	ldr	r3, [pc, #60]	; (800f23c <_svfiprintf_r+0x1f8>)
 800f1fe:	a904      	add	r1, sp, #16
 800f200:	4638      	mov	r0, r7
 800f202:	f3af 8000 	nop.w
 800f206:	1c42      	adds	r2, r0, #1
 800f208:	4606      	mov	r6, r0
 800f20a:	d1d6      	bne.n	800f1ba <_svfiprintf_r+0x176>
 800f20c:	89ab      	ldrh	r3, [r5, #12]
 800f20e:	065b      	lsls	r3, r3, #25
 800f210:	f53f af2c 	bmi.w	800f06c <_svfiprintf_r+0x28>
 800f214:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f216:	b01d      	add	sp, #116	; 0x74
 800f218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f21c:	ab03      	add	r3, sp, #12
 800f21e:	9300      	str	r3, [sp, #0]
 800f220:	462a      	mov	r2, r5
 800f222:	4b06      	ldr	r3, [pc, #24]	; (800f23c <_svfiprintf_r+0x1f8>)
 800f224:	a904      	add	r1, sp, #16
 800f226:	4638      	mov	r0, r7
 800f228:	f000 f87a 	bl	800f320 <_printf_i>
 800f22c:	e7eb      	b.n	800f206 <_svfiprintf_r+0x1c2>
 800f22e:	bf00      	nop
 800f230:	080113dc 	.word	0x080113dc
 800f234:	080113e6 	.word	0x080113e6
 800f238:	00000000 	.word	0x00000000
 800f23c:	0800ef8d 	.word	0x0800ef8d
 800f240:	080113e2 	.word	0x080113e2

0800f244 <_printf_common>:
 800f244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f248:	4616      	mov	r6, r2
 800f24a:	4699      	mov	r9, r3
 800f24c:	688a      	ldr	r2, [r1, #8]
 800f24e:	690b      	ldr	r3, [r1, #16]
 800f250:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f254:	4293      	cmp	r3, r2
 800f256:	bfb8      	it	lt
 800f258:	4613      	movlt	r3, r2
 800f25a:	6033      	str	r3, [r6, #0]
 800f25c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f260:	4607      	mov	r7, r0
 800f262:	460c      	mov	r4, r1
 800f264:	b10a      	cbz	r2, 800f26a <_printf_common+0x26>
 800f266:	3301      	adds	r3, #1
 800f268:	6033      	str	r3, [r6, #0]
 800f26a:	6823      	ldr	r3, [r4, #0]
 800f26c:	0699      	lsls	r1, r3, #26
 800f26e:	bf42      	ittt	mi
 800f270:	6833      	ldrmi	r3, [r6, #0]
 800f272:	3302      	addmi	r3, #2
 800f274:	6033      	strmi	r3, [r6, #0]
 800f276:	6825      	ldr	r5, [r4, #0]
 800f278:	f015 0506 	ands.w	r5, r5, #6
 800f27c:	d106      	bne.n	800f28c <_printf_common+0x48>
 800f27e:	f104 0a19 	add.w	sl, r4, #25
 800f282:	68e3      	ldr	r3, [r4, #12]
 800f284:	6832      	ldr	r2, [r6, #0]
 800f286:	1a9b      	subs	r3, r3, r2
 800f288:	42ab      	cmp	r3, r5
 800f28a:	dc26      	bgt.n	800f2da <_printf_common+0x96>
 800f28c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f290:	1e13      	subs	r3, r2, #0
 800f292:	6822      	ldr	r2, [r4, #0]
 800f294:	bf18      	it	ne
 800f296:	2301      	movne	r3, #1
 800f298:	0692      	lsls	r2, r2, #26
 800f29a:	d42b      	bmi.n	800f2f4 <_printf_common+0xb0>
 800f29c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f2a0:	4649      	mov	r1, r9
 800f2a2:	4638      	mov	r0, r7
 800f2a4:	47c0      	blx	r8
 800f2a6:	3001      	adds	r0, #1
 800f2a8:	d01e      	beq.n	800f2e8 <_printf_common+0xa4>
 800f2aa:	6823      	ldr	r3, [r4, #0]
 800f2ac:	68e5      	ldr	r5, [r4, #12]
 800f2ae:	6832      	ldr	r2, [r6, #0]
 800f2b0:	f003 0306 	and.w	r3, r3, #6
 800f2b4:	2b04      	cmp	r3, #4
 800f2b6:	bf08      	it	eq
 800f2b8:	1aad      	subeq	r5, r5, r2
 800f2ba:	68a3      	ldr	r3, [r4, #8]
 800f2bc:	6922      	ldr	r2, [r4, #16]
 800f2be:	bf0c      	ite	eq
 800f2c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f2c4:	2500      	movne	r5, #0
 800f2c6:	4293      	cmp	r3, r2
 800f2c8:	bfc4      	itt	gt
 800f2ca:	1a9b      	subgt	r3, r3, r2
 800f2cc:	18ed      	addgt	r5, r5, r3
 800f2ce:	2600      	movs	r6, #0
 800f2d0:	341a      	adds	r4, #26
 800f2d2:	42b5      	cmp	r5, r6
 800f2d4:	d11a      	bne.n	800f30c <_printf_common+0xc8>
 800f2d6:	2000      	movs	r0, #0
 800f2d8:	e008      	b.n	800f2ec <_printf_common+0xa8>
 800f2da:	2301      	movs	r3, #1
 800f2dc:	4652      	mov	r2, sl
 800f2de:	4649      	mov	r1, r9
 800f2e0:	4638      	mov	r0, r7
 800f2e2:	47c0      	blx	r8
 800f2e4:	3001      	adds	r0, #1
 800f2e6:	d103      	bne.n	800f2f0 <_printf_common+0xac>
 800f2e8:	f04f 30ff 	mov.w	r0, #4294967295
 800f2ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2f0:	3501      	adds	r5, #1
 800f2f2:	e7c6      	b.n	800f282 <_printf_common+0x3e>
 800f2f4:	18e1      	adds	r1, r4, r3
 800f2f6:	1c5a      	adds	r2, r3, #1
 800f2f8:	2030      	movs	r0, #48	; 0x30
 800f2fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f2fe:	4422      	add	r2, r4
 800f300:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f304:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f308:	3302      	adds	r3, #2
 800f30a:	e7c7      	b.n	800f29c <_printf_common+0x58>
 800f30c:	2301      	movs	r3, #1
 800f30e:	4622      	mov	r2, r4
 800f310:	4649      	mov	r1, r9
 800f312:	4638      	mov	r0, r7
 800f314:	47c0      	blx	r8
 800f316:	3001      	adds	r0, #1
 800f318:	d0e6      	beq.n	800f2e8 <_printf_common+0xa4>
 800f31a:	3601      	adds	r6, #1
 800f31c:	e7d9      	b.n	800f2d2 <_printf_common+0x8e>
	...

0800f320 <_printf_i>:
 800f320:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f324:	7e0f      	ldrb	r7, [r1, #24]
 800f326:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f328:	2f78      	cmp	r7, #120	; 0x78
 800f32a:	4691      	mov	r9, r2
 800f32c:	4680      	mov	r8, r0
 800f32e:	460c      	mov	r4, r1
 800f330:	469a      	mov	sl, r3
 800f332:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f336:	d807      	bhi.n	800f348 <_printf_i+0x28>
 800f338:	2f62      	cmp	r7, #98	; 0x62
 800f33a:	d80a      	bhi.n	800f352 <_printf_i+0x32>
 800f33c:	2f00      	cmp	r7, #0
 800f33e:	f000 80d8 	beq.w	800f4f2 <_printf_i+0x1d2>
 800f342:	2f58      	cmp	r7, #88	; 0x58
 800f344:	f000 80a3 	beq.w	800f48e <_printf_i+0x16e>
 800f348:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f34c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f350:	e03a      	b.n	800f3c8 <_printf_i+0xa8>
 800f352:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f356:	2b15      	cmp	r3, #21
 800f358:	d8f6      	bhi.n	800f348 <_printf_i+0x28>
 800f35a:	a101      	add	r1, pc, #4	; (adr r1, 800f360 <_printf_i+0x40>)
 800f35c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f360:	0800f3b9 	.word	0x0800f3b9
 800f364:	0800f3cd 	.word	0x0800f3cd
 800f368:	0800f349 	.word	0x0800f349
 800f36c:	0800f349 	.word	0x0800f349
 800f370:	0800f349 	.word	0x0800f349
 800f374:	0800f349 	.word	0x0800f349
 800f378:	0800f3cd 	.word	0x0800f3cd
 800f37c:	0800f349 	.word	0x0800f349
 800f380:	0800f349 	.word	0x0800f349
 800f384:	0800f349 	.word	0x0800f349
 800f388:	0800f349 	.word	0x0800f349
 800f38c:	0800f4d9 	.word	0x0800f4d9
 800f390:	0800f3fd 	.word	0x0800f3fd
 800f394:	0800f4bb 	.word	0x0800f4bb
 800f398:	0800f349 	.word	0x0800f349
 800f39c:	0800f349 	.word	0x0800f349
 800f3a0:	0800f4fb 	.word	0x0800f4fb
 800f3a4:	0800f349 	.word	0x0800f349
 800f3a8:	0800f3fd 	.word	0x0800f3fd
 800f3ac:	0800f349 	.word	0x0800f349
 800f3b0:	0800f349 	.word	0x0800f349
 800f3b4:	0800f4c3 	.word	0x0800f4c3
 800f3b8:	682b      	ldr	r3, [r5, #0]
 800f3ba:	1d1a      	adds	r2, r3, #4
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	602a      	str	r2, [r5, #0]
 800f3c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f3c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f3c8:	2301      	movs	r3, #1
 800f3ca:	e0a3      	b.n	800f514 <_printf_i+0x1f4>
 800f3cc:	6820      	ldr	r0, [r4, #0]
 800f3ce:	6829      	ldr	r1, [r5, #0]
 800f3d0:	0606      	lsls	r6, r0, #24
 800f3d2:	f101 0304 	add.w	r3, r1, #4
 800f3d6:	d50a      	bpl.n	800f3ee <_printf_i+0xce>
 800f3d8:	680e      	ldr	r6, [r1, #0]
 800f3da:	602b      	str	r3, [r5, #0]
 800f3dc:	2e00      	cmp	r6, #0
 800f3de:	da03      	bge.n	800f3e8 <_printf_i+0xc8>
 800f3e0:	232d      	movs	r3, #45	; 0x2d
 800f3e2:	4276      	negs	r6, r6
 800f3e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f3e8:	485e      	ldr	r0, [pc, #376]	; (800f564 <_printf_i+0x244>)
 800f3ea:	230a      	movs	r3, #10
 800f3ec:	e019      	b.n	800f422 <_printf_i+0x102>
 800f3ee:	680e      	ldr	r6, [r1, #0]
 800f3f0:	602b      	str	r3, [r5, #0]
 800f3f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f3f6:	bf18      	it	ne
 800f3f8:	b236      	sxthne	r6, r6
 800f3fa:	e7ef      	b.n	800f3dc <_printf_i+0xbc>
 800f3fc:	682b      	ldr	r3, [r5, #0]
 800f3fe:	6820      	ldr	r0, [r4, #0]
 800f400:	1d19      	adds	r1, r3, #4
 800f402:	6029      	str	r1, [r5, #0]
 800f404:	0601      	lsls	r1, r0, #24
 800f406:	d501      	bpl.n	800f40c <_printf_i+0xec>
 800f408:	681e      	ldr	r6, [r3, #0]
 800f40a:	e002      	b.n	800f412 <_printf_i+0xf2>
 800f40c:	0646      	lsls	r6, r0, #25
 800f40e:	d5fb      	bpl.n	800f408 <_printf_i+0xe8>
 800f410:	881e      	ldrh	r6, [r3, #0]
 800f412:	4854      	ldr	r0, [pc, #336]	; (800f564 <_printf_i+0x244>)
 800f414:	2f6f      	cmp	r7, #111	; 0x6f
 800f416:	bf0c      	ite	eq
 800f418:	2308      	moveq	r3, #8
 800f41a:	230a      	movne	r3, #10
 800f41c:	2100      	movs	r1, #0
 800f41e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f422:	6865      	ldr	r5, [r4, #4]
 800f424:	60a5      	str	r5, [r4, #8]
 800f426:	2d00      	cmp	r5, #0
 800f428:	bfa2      	ittt	ge
 800f42a:	6821      	ldrge	r1, [r4, #0]
 800f42c:	f021 0104 	bicge.w	r1, r1, #4
 800f430:	6021      	strge	r1, [r4, #0]
 800f432:	b90e      	cbnz	r6, 800f438 <_printf_i+0x118>
 800f434:	2d00      	cmp	r5, #0
 800f436:	d04d      	beq.n	800f4d4 <_printf_i+0x1b4>
 800f438:	4615      	mov	r5, r2
 800f43a:	fbb6 f1f3 	udiv	r1, r6, r3
 800f43e:	fb03 6711 	mls	r7, r3, r1, r6
 800f442:	5dc7      	ldrb	r7, [r0, r7]
 800f444:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f448:	4637      	mov	r7, r6
 800f44a:	42bb      	cmp	r3, r7
 800f44c:	460e      	mov	r6, r1
 800f44e:	d9f4      	bls.n	800f43a <_printf_i+0x11a>
 800f450:	2b08      	cmp	r3, #8
 800f452:	d10b      	bne.n	800f46c <_printf_i+0x14c>
 800f454:	6823      	ldr	r3, [r4, #0]
 800f456:	07de      	lsls	r6, r3, #31
 800f458:	d508      	bpl.n	800f46c <_printf_i+0x14c>
 800f45a:	6923      	ldr	r3, [r4, #16]
 800f45c:	6861      	ldr	r1, [r4, #4]
 800f45e:	4299      	cmp	r1, r3
 800f460:	bfde      	ittt	le
 800f462:	2330      	movle	r3, #48	; 0x30
 800f464:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f468:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f46c:	1b52      	subs	r2, r2, r5
 800f46e:	6122      	str	r2, [r4, #16]
 800f470:	f8cd a000 	str.w	sl, [sp]
 800f474:	464b      	mov	r3, r9
 800f476:	aa03      	add	r2, sp, #12
 800f478:	4621      	mov	r1, r4
 800f47a:	4640      	mov	r0, r8
 800f47c:	f7ff fee2 	bl	800f244 <_printf_common>
 800f480:	3001      	adds	r0, #1
 800f482:	d14c      	bne.n	800f51e <_printf_i+0x1fe>
 800f484:	f04f 30ff 	mov.w	r0, #4294967295
 800f488:	b004      	add	sp, #16
 800f48a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f48e:	4835      	ldr	r0, [pc, #212]	; (800f564 <_printf_i+0x244>)
 800f490:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f494:	6829      	ldr	r1, [r5, #0]
 800f496:	6823      	ldr	r3, [r4, #0]
 800f498:	f851 6b04 	ldr.w	r6, [r1], #4
 800f49c:	6029      	str	r1, [r5, #0]
 800f49e:	061d      	lsls	r5, r3, #24
 800f4a0:	d514      	bpl.n	800f4cc <_printf_i+0x1ac>
 800f4a2:	07df      	lsls	r7, r3, #31
 800f4a4:	bf44      	itt	mi
 800f4a6:	f043 0320 	orrmi.w	r3, r3, #32
 800f4aa:	6023      	strmi	r3, [r4, #0]
 800f4ac:	b91e      	cbnz	r6, 800f4b6 <_printf_i+0x196>
 800f4ae:	6823      	ldr	r3, [r4, #0]
 800f4b0:	f023 0320 	bic.w	r3, r3, #32
 800f4b4:	6023      	str	r3, [r4, #0]
 800f4b6:	2310      	movs	r3, #16
 800f4b8:	e7b0      	b.n	800f41c <_printf_i+0xfc>
 800f4ba:	6823      	ldr	r3, [r4, #0]
 800f4bc:	f043 0320 	orr.w	r3, r3, #32
 800f4c0:	6023      	str	r3, [r4, #0]
 800f4c2:	2378      	movs	r3, #120	; 0x78
 800f4c4:	4828      	ldr	r0, [pc, #160]	; (800f568 <_printf_i+0x248>)
 800f4c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f4ca:	e7e3      	b.n	800f494 <_printf_i+0x174>
 800f4cc:	0659      	lsls	r1, r3, #25
 800f4ce:	bf48      	it	mi
 800f4d0:	b2b6      	uxthmi	r6, r6
 800f4d2:	e7e6      	b.n	800f4a2 <_printf_i+0x182>
 800f4d4:	4615      	mov	r5, r2
 800f4d6:	e7bb      	b.n	800f450 <_printf_i+0x130>
 800f4d8:	682b      	ldr	r3, [r5, #0]
 800f4da:	6826      	ldr	r6, [r4, #0]
 800f4dc:	6961      	ldr	r1, [r4, #20]
 800f4de:	1d18      	adds	r0, r3, #4
 800f4e0:	6028      	str	r0, [r5, #0]
 800f4e2:	0635      	lsls	r5, r6, #24
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	d501      	bpl.n	800f4ec <_printf_i+0x1cc>
 800f4e8:	6019      	str	r1, [r3, #0]
 800f4ea:	e002      	b.n	800f4f2 <_printf_i+0x1d2>
 800f4ec:	0670      	lsls	r0, r6, #25
 800f4ee:	d5fb      	bpl.n	800f4e8 <_printf_i+0x1c8>
 800f4f0:	8019      	strh	r1, [r3, #0]
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	6123      	str	r3, [r4, #16]
 800f4f6:	4615      	mov	r5, r2
 800f4f8:	e7ba      	b.n	800f470 <_printf_i+0x150>
 800f4fa:	682b      	ldr	r3, [r5, #0]
 800f4fc:	1d1a      	adds	r2, r3, #4
 800f4fe:	602a      	str	r2, [r5, #0]
 800f500:	681d      	ldr	r5, [r3, #0]
 800f502:	6862      	ldr	r2, [r4, #4]
 800f504:	2100      	movs	r1, #0
 800f506:	4628      	mov	r0, r5
 800f508:	f7f0 fe7a 	bl	8000200 <memchr>
 800f50c:	b108      	cbz	r0, 800f512 <_printf_i+0x1f2>
 800f50e:	1b40      	subs	r0, r0, r5
 800f510:	6060      	str	r0, [r4, #4]
 800f512:	6863      	ldr	r3, [r4, #4]
 800f514:	6123      	str	r3, [r4, #16]
 800f516:	2300      	movs	r3, #0
 800f518:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f51c:	e7a8      	b.n	800f470 <_printf_i+0x150>
 800f51e:	6923      	ldr	r3, [r4, #16]
 800f520:	462a      	mov	r2, r5
 800f522:	4649      	mov	r1, r9
 800f524:	4640      	mov	r0, r8
 800f526:	47d0      	blx	sl
 800f528:	3001      	adds	r0, #1
 800f52a:	d0ab      	beq.n	800f484 <_printf_i+0x164>
 800f52c:	6823      	ldr	r3, [r4, #0]
 800f52e:	079b      	lsls	r3, r3, #30
 800f530:	d413      	bmi.n	800f55a <_printf_i+0x23a>
 800f532:	68e0      	ldr	r0, [r4, #12]
 800f534:	9b03      	ldr	r3, [sp, #12]
 800f536:	4298      	cmp	r0, r3
 800f538:	bfb8      	it	lt
 800f53a:	4618      	movlt	r0, r3
 800f53c:	e7a4      	b.n	800f488 <_printf_i+0x168>
 800f53e:	2301      	movs	r3, #1
 800f540:	4632      	mov	r2, r6
 800f542:	4649      	mov	r1, r9
 800f544:	4640      	mov	r0, r8
 800f546:	47d0      	blx	sl
 800f548:	3001      	adds	r0, #1
 800f54a:	d09b      	beq.n	800f484 <_printf_i+0x164>
 800f54c:	3501      	adds	r5, #1
 800f54e:	68e3      	ldr	r3, [r4, #12]
 800f550:	9903      	ldr	r1, [sp, #12]
 800f552:	1a5b      	subs	r3, r3, r1
 800f554:	42ab      	cmp	r3, r5
 800f556:	dcf2      	bgt.n	800f53e <_printf_i+0x21e>
 800f558:	e7eb      	b.n	800f532 <_printf_i+0x212>
 800f55a:	2500      	movs	r5, #0
 800f55c:	f104 0619 	add.w	r6, r4, #25
 800f560:	e7f5      	b.n	800f54e <_printf_i+0x22e>
 800f562:	bf00      	nop
 800f564:	080113ed 	.word	0x080113ed
 800f568:	080113fe 	.word	0x080113fe

0800f56c <memmove>:
 800f56c:	4288      	cmp	r0, r1
 800f56e:	b510      	push	{r4, lr}
 800f570:	eb01 0402 	add.w	r4, r1, r2
 800f574:	d902      	bls.n	800f57c <memmove+0x10>
 800f576:	4284      	cmp	r4, r0
 800f578:	4623      	mov	r3, r4
 800f57a:	d807      	bhi.n	800f58c <memmove+0x20>
 800f57c:	1e43      	subs	r3, r0, #1
 800f57e:	42a1      	cmp	r1, r4
 800f580:	d008      	beq.n	800f594 <memmove+0x28>
 800f582:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f586:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f58a:	e7f8      	b.n	800f57e <memmove+0x12>
 800f58c:	4402      	add	r2, r0
 800f58e:	4601      	mov	r1, r0
 800f590:	428a      	cmp	r2, r1
 800f592:	d100      	bne.n	800f596 <memmove+0x2a>
 800f594:	bd10      	pop	{r4, pc}
 800f596:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f59a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f59e:	e7f7      	b.n	800f590 <memmove+0x24>

0800f5a0 <_free_r>:
 800f5a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f5a2:	2900      	cmp	r1, #0
 800f5a4:	d044      	beq.n	800f630 <_free_r+0x90>
 800f5a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f5aa:	9001      	str	r0, [sp, #4]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	f1a1 0404 	sub.w	r4, r1, #4
 800f5b2:	bfb8      	it	lt
 800f5b4:	18e4      	addlt	r4, r4, r3
 800f5b6:	f000 f913 	bl	800f7e0 <__malloc_lock>
 800f5ba:	4a1e      	ldr	r2, [pc, #120]	; (800f634 <_free_r+0x94>)
 800f5bc:	9801      	ldr	r0, [sp, #4]
 800f5be:	6813      	ldr	r3, [r2, #0]
 800f5c0:	b933      	cbnz	r3, 800f5d0 <_free_r+0x30>
 800f5c2:	6063      	str	r3, [r4, #4]
 800f5c4:	6014      	str	r4, [r2, #0]
 800f5c6:	b003      	add	sp, #12
 800f5c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f5cc:	f000 b90e 	b.w	800f7ec <__malloc_unlock>
 800f5d0:	42a3      	cmp	r3, r4
 800f5d2:	d908      	bls.n	800f5e6 <_free_r+0x46>
 800f5d4:	6825      	ldr	r5, [r4, #0]
 800f5d6:	1961      	adds	r1, r4, r5
 800f5d8:	428b      	cmp	r3, r1
 800f5da:	bf01      	itttt	eq
 800f5dc:	6819      	ldreq	r1, [r3, #0]
 800f5de:	685b      	ldreq	r3, [r3, #4]
 800f5e0:	1949      	addeq	r1, r1, r5
 800f5e2:	6021      	streq	r1, [r4, #0]
 800f5e4:	e7ed      	b.n	800f5c2 <_free_r+0x22>
 800f5e6:	461a      	mov	r2, r3
 800f5e8:	685b      	ldr	r3, [r3, #4]
 800f5ea:	b10b      	cbz	r3, 800f5f0 <_free_r+0x50>
 800f5ec:	42a3      	cmp	r3, r4
 800f5ee:	d9fa      	bls.n	800f5e6 <_free_r+0x46>
 800f5f0:	6811      	ldr	r1, [r2, #0]
 800f5f2:	1855      	adds	r5, r2, r1
 800f5f4:	42a5      	cmp	r5, r4
 800f5f6:	d10b      	bne.n	800f610 <_free_r+0x70>
 800f5f8:	6824      	ldr	r4, [r4, #0]
 800f5fa:	4421      	add	r1, r4
 800f5fc:	1854      	adds	r4, r2, r1
 800f5fe:	42a3      	cmp	r3, r4
 800f600:	6011      	str	r1, [r2, #0]
 800f602:	d1e0      	bne.n	800f5c6 <_free_r+0x26>
 800f604:	681c      	ldr	r4, [r3, #0]
 800f606:	685b      	ldr	r3, [r3, #4]
 800f608:	6053      	str	r3, [r2, #4]
 800f60a:	4421      	add	r1, r4
 800f60c:	6011      	str	r1, [r2, #0]
 800f60e:	e7da      	b.n	800f5c6 <_free_r+0x26>
 800f610:	d902      	bls.n	800f618 <_free_r+0x78>
 800f612:	230c      	movs	r3, #12
 800f614:	6003      	str	r3, [r0, #0]
 800f616:	e7d6      	b.n	800f5c6 <_free_r+0x26>
 800f618:	6825      	ldr	r5, [r4, #0]
 800f61a:	1961      	adds	r1, r4, r5
 800f61c:	428b      	cmp	r3, r1
 800f61e:	bf04      	itt	eq
 800f620:	6819      	ldreq	r1, [r3, #0]
 800f622:	685b      	ldreq	r3, [r3, #4]
 800f624:	6063      	str	r3, [r4, #4]
 800f626:	bf04      	itt	eq
 800f628:	1949      	addeq	r1, r1, r5
 800f62a:	6021      	streq	r1, [r4, #0]
 800f62c:	6054      	str	r4, [r2, #4]
 800f62e:	e7ca      	b.n	800f5c6 <_free_r+0x26>
 800f630:	b003      	add	sp, #12
 800f632:	bd30      	pop	{r4, r5, pc}
 800f634:	20005f04 	.word	0x20005f04

0800f638 <sbrk_aligned>:
 800f638:	b570      	push	{r4, r5, r6, lr}
 800f63a:	4e0e      	ldr	r6, [pc, #56]	; (800f674 <sbrk_aligned+0x3c>)
 800f63c:	460c      	mov	r4, r1
 800f63e:	6831      	ldr	r1, [r6, #0]
 800f640:	4605      	mov	r5, r0
 800f642:	b911      	cbnz	r1, 800f64a <sbrk_aligned+0x12>
 800f644:	f000 f8bc 	bl	800f7c0 <_sbrk_r>
 800f648:	6030      	str	r0, [r6, #0]
 800f64a:	4621      	mov	r1, r4
 800f64c:	4628      	mov	r0, r5
 800f64e:	f000 f8b7 	bl	800f7c0 <_sbrk_r>
 800f652:	1c43      	adds	r3, r0, #1
 800f654:	d00a      	beq.n	800f66c <sbrk_aligned+0x34>
 800f656:	1cc4      	adds	r4, r0, #3
 800f658:	f024 0403 	bic.w	r4, r4, #3
 800f65c:	42a0      	cmp	r0, r4
 800f65e:	d007      	beq.n	800f670 <sbrk_aligned+0x38>
 800f660:	1a21      	subs	r1, r4, r0
 800f662:	4628      	mov	r0, r5
 800f664:	f000 f8ac 	bl	800f7c0 <_sbrk_r>
 800f668:	3001      	adds	r0, #1
 800f66a:	d101      	bne.n	800f670 <sbrk_aligned+0x38>
 800f66c:	f04f 34ff 	mov.w	r4, #4294967295
 800f670:	4620      	mov	r0, r4
 800f672:	bd70      	pop	{r4, r5, r6, pc}
 800f674:	20005f08 	.word	0x20005f08

0800f678 <_malloc_r>:
 800f678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f67c:	1ccd      	adds	r5, r1, #3
 800f67e:	f025 0503 	bic.w	r5, r5, #3
 800f682:	3508      	adds	r5, #8
 800f684:	2d0c      	cmp	r5, #12
 800f686:	bf38      	it	cc
 800f688:	250c      	movcc	r5, #12
 800f68a:	2d00      	cmp	r5, #0
 800f68c:	4607      	mov	r7, r0
 800f68e:	db01      	blt.n	800f694 <_malloc_r+0x1c>
 800f690:	42a9      	cmp	r1, r5
 800f692:	d905      	bls.n	800f6a0 <_malloc_r+0x28>
 800f694:	230c      	movs	r3, #12
 800f696:	603b      	str	r3, [r7, #0]
 800f698:	2600      	movs	r6, #0
 800f69a:	4630      	mov	r0, r6
 800f69c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6a0:	4e2e      	ldr	r6, [pc, #184]	; (800f75c <_malloc_r+0xe4>)
 800f6a2:	f000 f89d 	bl	800f7e0 <__malloc_lock>
 800f6a6:	6833      	ldr	r3, [r6, #0]
 800f6a8:	461c      	mov	r4, r3
 800f6aa:	bb34      	cbnz	r4, 800f6fa <_malloc_r+0x82>
 800f6ac:	4629      	mov	r1, r5
 800f6ae:	4638      	mov	r0, r7
 800f6b0:	f7ff ffc2 	bl	800f638 <sbrk_aligned>
 800f6b4:	1c43      	adds	r3, r0, #1
 800f6b6:	4604      	mov	r4, r0
 800f6b8:	d14d      	bne.n	800f756 <_malloc_r+0xde>
 800f6ba:	6834      	ldr	r4, [r6, #0]
 800f6bc:	4626      	mov	r6, r4
 800f6be:	2e00      	cmp	r6, #0
 800f6c0:	d140      	bne.n	800f744 <_malloc_r+0xcc>
 800f6c2:	6823      	ldr	r3, [r4, #0]
 800f6c4:	4631      	mov	r1, r6
 800f6c6:	4638      	mov	r0, r7
 800f6c8:	eb04 0803 	add.w	r8, r4, r3
 800f6cc:	f000 f878 	bl	800f7c0 <_sbrk_r>
 800f6d0:	4580      	cmp	r8, r0
 800f6d2:	d13a      	bne.n	800f74a <_malloc_r+0xd2>
 800f6d4:	6821      	ldr	r1, [r4, #0]
 800f6d6:	3503      	adds	r5, #3
 800f6d8:	1a6d      	subs	r5, r5, r1
 800f6da:	f025 0503 	bic.w	r5, r5, #3
 800f6de:	3508      	adds	r5, #8
 800f6e0:	2d0c      	cmp	r5, #12
 800f6e2:	bf38      	it	cc
 800f6e4:	250c      	movcc	r5, #12
 800f6e6:	4629      	mov	r1, r5
 800f6e8:	4638      	mov	r0, r7
 800f6ea:	f7ff ffa5 	bl	800f638 <sbrk_aligned>
 800f6ee:	3001      	adds	r0, #1
 800f6f0:	d02b      	beq.n	800f74a <_malloc_r+0xd2>
 800f6f2:	6823      	ldr	r3, [r4, #0]
 800f6f4:	442b      	add	r3, r5
 800f6f6:	6023      	str	r3, [r4, #0]
 800f6f8:	e00e      	b.n	800f718 <_malloc_r+0xa0>
 800f6fa:	6822      	ldr	r2, [r4, #0]
 800f6fc:	1b52      	subs	r2, r2, r5
 800f6fe:	d41e      	bmi.n	800f73e <_malloc_r+0xc6>
 800f700:	2a0b      	cmp	r2, #11
 800f702:	d916      	bls.n	800f732 <_malloc_r+0xba>
 800f704:	1961      	adds	r1, r4, r5
 800f706:	42a3      	cmp	r3, r4
 800f708:	6025      	str	r5, [r4, #0]
 800f70a:	bf18      	it	ne
 800f70c:	6059      	strne	r1, [r3, #4]
 800f70e:	6863      	ldr	r3, [r4, #4]
 800f710:	bf08      	it	eq
 800f712:	6031      	streq	r1, [r6, #0]
 800f714:	5162      	str	r2, [r4, r5]
 800f716:	604b      	str	r3, [r1, #4]
 800f718:	4638      	mov	r0, r7
 800f71a:	f104 060b 	add.w	r6, r4, #11
 800f71e:	f000 f865 	bl	800f7ec <__malloc_unlock>
 800f722:	f026 0607 	bic.w	r6, r6, #7
 800f726:	1d23      	adds	r3, r4, #4
 800f728:	1af2      	subs	r2, r6, r3
 800f72a:	d0b6      	beq.n	800f69a <_malloc_r+0x22>
 800f72c:	1b9b      	subs	r3, r3, r6
 800f72e:	50a3      	str	r3, [r4, r2]
 800f730:	e7b3      	b.n	800f69a <_malloc_r+0x22>
 800f732:	6862      	ldr	r2, [r4, #4]
 800f734:	42a3      	cmp	r3, r4
 800f736:	bf0c      	ite	eq
 800f738:	6032      	streq	r2, [r6, #0]
 800f73a:	605a      	strne	r2, [r3, #4]
 800f73c:	e7ec      	b.n	800f718 <_malloc_r+0xa0>
 800f73e:	4623      	mov	r3, r4
 800f740:	6864      	ldr	r4, [r4, #4]
 800f742:	e7b2      	b.n	800f6aa <_malloc_r+0x32>
 800f744:	4634      	mov	r4, r6
 800f746:	6876      	ldr	r6, [r6, #4]
 800f748:	e7b9      	b.n	800f6be <_malloc_r+0x46>
 800f74a:	230c      	movs	r3, #12
 800f74c:	603b      	str	r3, [r7, #0]
 800f74e:	4638      	mov	r0, r7
 800f750:	f000 f84c 	bl	800f7ec <__malloc_unlock>
 800f754:	e7a1      	b.n	800f69a <_malloc_r+0x22>
 800f756:	6025      	str	r5, [r4, #0]
 800f758:	e7de      	b.n	800f718 <_malloc_r+0xa0>
 800f75a:	bf00      	nop
 800f75c:	20005f04 	.word	0x20005f04

0800f760 <_realloc_r>:
 800f760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f764:	4680      	mov	r8, r0
 800f766:	4614      	mov	r4, r2
 800f768:	460e      	mov	r6, r1
 800f76a:	b921      	cbnz	r1, 800f776 <_realloc_r+0x16>
 800f76c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f770:	4611      	mov	r1, r2
 800f772:	f7ff bf81 	b.w	800f678 <_malloc_r>
 800f776:	b92a      	cbnz	r2, 800f784 <_realloc_r+0x24>
 800f778:	f7ff ff12 	bl	800f5a0 <_free_r>
 800f77c:	4625      	mov	r5, r4
 800f77e:	4628      	mov	r0, r5
 800f780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f784:	f000 f838 	bl	800f7f8 <_malloc_usable_size_r>
 800f788:	4284      	cmp	r4, r0
 800f78a:	4607      	mov	r7, r0
 800f78c:	d802      	bhi.n	800f794 <_realloc_r+0x34>
 800f78e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f792:	d812      	bhi.n	800f7ba <_realloc_r+0x5a>
 800f794:	4621      	mov	r1, r4
 800f796:	4640      	mov	r0, r8
 800f798:	f7ff ff6e 	bl	800f678 <_malloc_r>
 800f79c:	4605      	mov	r5, r0
 800f79e:	2800      	cmp	r0, #0
 800f7a0:	d0ed      	beq.n	800f77e <_realloc_r+0x1e>
 800f7a2:	42bc      	cmp	r4, r7
 800f7a4:	4622      	mov	r2, r4
 800f7a6:	4631      	mov	r1, r6
 800f7a8:	bf28      	it	cs
 800f7aa:	463a      	movcs	r2, r7
 800f7ac:	f7ff fbb8 	bl	800ef20 <memcpy>
 800f7b0:	4631      	mov	r1, r6
 800f7b2:	4640      	mov	r0, r8
 800f7b4:	f7ff fef4 	bl	800f5a0 <_free_r>
 800f7b8:	e7e1      	b.n	800f77e <_realloc_r+0x1e>
 800f7ba:	4635      	mov	r5, r6
 800f7bc:	e7df      	b.n	800f77e <_realloc_r+0x1e>
	...

0800f7c0 <_sbrk_r>:
 800f7c0:	b538      	push	{r3, r4, r5, lr}
 800f7c2:	4d06      	ldr	r5, [pc, #24]	; (800f7dc <_sbrk_r+0x1c>)
 800f7c4:	2300      	movs	r3, #0
 800f7c6:	4604      	mov	r4, r0
 800f7c8:	4608      	mov	r0, r1
 800f7ca:	602b      	str	r3, [r5, #0]
 800f7cc:	f7f1 fdf6 	bl	80013bc <_sbrk>
 800f7d0:	1c43      	adds	r3, r0, #1
 800f7d2:	d102      	bne.n	800f7da <_sbrk_r+0x1a>
 800f7d4:	682b      	ldr	r3, [r5, #0]
 800f7d6:	b103      	cbz	r3, 800f7da <_sbrk_r+0x1a>
 800f7d8:	6023      	str	r3, [r4, #0]
 800f7da:	bd38      	pop	{r3, r4, r5, pc}
 800f7dc:	20005f0c 	.word	0x20005f0c

0800f7e0 <__malloc_lock>:
 800f7e0:	4801      	ldr	r0, [pc, #4]	; (800f7e8 <__malloc_lock+0x8>)
 800f7e2:	f000 b811 	b.w	800f808 <__retarget_lock_acquire_recursive>
 800f7e6:	bf00      	nop
 800f7e8:	20005f10 	.word	0x20005f10

0800f7ec <__malloc_unlock>:
 800f7ec:	4801      	ldr	r0, [pc, #4]	; (800f7f4 <__malloc_unlock+0x8>)
 800f7ee:	f000 b80c 	b.w	800f80a <__retarget_lock_release_recursive>
 800f7f2:	bf00      	nop
 800f7f4:	20005f10 	.word	0x20005f10

0800f7f8 <_malloc_usable_size_r>:
 800f7f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f7fc:	1f18      	subs	r0, r3, #4
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	bfbc      	itt	lt
 800f802:	580b      	ldrlt	r3, [r1, r0]
 800f804:	18c0      	addlt	r0, r0, r3
 800f806:	4770      	bx	lr

0800f808 <__retarget_lock_acquire_recursive>:
 800f808:	4770      	bx	lr

0800f80a <__retarget_lock_release_recursive>:
 800f80a:	4770      	bx	lr

0800f80c <_init>:
 800f80c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f80e:	bf00      	nop
 800f810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f812:	bc08      	pop	{r3}
 800f814:	469e      	mov	lr, r3
 800f816:	4770      	bx	lr

0800f818 <_fini>:
 800f818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f81a:	bf00      	nop
 800f81c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f81e:	bc08      	pop	{r3}
 800f820:	469e      	mov	lr, r3
 800f822:	4770      	bx	lr
